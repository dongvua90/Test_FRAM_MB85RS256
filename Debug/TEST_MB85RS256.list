
TEST_MB85RS256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b47c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800b61c  0800b61c  0001b61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6fc  0800b6fc  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6fc  0800b6fc  0001b6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b704  0800b704  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b704  0800b704  0001b704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b708  0800b708  0001b708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800b70c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f34  20000100  0800b80c  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006034  0800b80c  00026034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021163  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d35  00000000  00000000  00041293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  00045fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  00047b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbca  00000000  00000000  000494f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001feea  00000000  00000000  000650ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b507  00000000  00000000  00084fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001204ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000739c  00000000  00000000  001204fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b604 	.word	0x0800b604

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	0800b604 	.word	0x0800b604

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <WriteProtect>:
uint8_t cmd=0;
extern SPI_HandleTypeDef hspi1;
HAL_StatusTypeDef status;

// Thiết lập lại trạng thái Write ( bảo vệ , không cho phép Write)
void WriteProtect(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]= WRDI; // Reset Write Enable Latch
 80004ea:	2304      	movs	r3, #4
 80004ec:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 80004ee:	2200      	movs	r2, #0
 80004f0:	2110      	movs	r1, #16
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <WriteProtect+0x3c>)
 80004f4:	f001 faae 	bl	8001a54 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 80004f8:	1d39      	adds	r1, r7, #4
 80004fa:	2301      	movs	r3, #1
 80004fc:	2201      	movs	r2, #1
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <WriteProtect+0x40>)
 8000500:	f003 fa57 	bl	80039b2 <HAL_SPI_Transmit>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <WriteProtect+0x44>)
 800050a:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 800050c:	2201      	movs	r2, #1
 800050e:	2110      	movs	r1, #16
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <WriteProtect+0x3c>)
 8000512:	f001 fa9f 	bl	8001a54 <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020000 	.word	0x40020000
 8000524:	2000019c 	.word	0x2000019c
 8000528:	20000198 	.word	0x20000198

0800052c <ReadStatus>:
uint8_t ReadStatus(){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
	uint8_t reg[2],cmd[2];
	cmd[0] = RDSR;// Read Status Register
 8000532:	2305      	movs	r3, #5
 8000534:	703b      	strb	r3, [r7, #0]
	MB85RS_CS_LOW;
 8000536:	2200      	movs	r2, #0
 8000538:	2110      	movs	r1, #16
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <ReadStatus+0x38>)
 800053c:	f001 fa8a 	bl	8001a54 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,cmd, reg, 2, 1);
 8000540:	1d3a      	adds	r2, r7, #4
 8000542:	4639      	mov	r1, r7
 8000544:	2301      	movs	r3, #1
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2302      	movs	r3, #2
 800054a:	4807      	ldr	r0, [pc, #28]	; (8000568 <ReadStatus+0x3c>)
 800054c:	f003 fc7e 	bl	8003e4c <HAL_SPI_TransmitReceive>
	MB85RS_CS_HIGH;
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <ReadStatus+0x38>)
 8000556:	f001 fa7d 	bl	8001a54 <HAL_GPIO_WritePin>
	return reg[1];
 800055a:	797b      	ldrb	r3, [r7, #5]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40020000 	.word	0x40020000
 8000568:	2000019c 	.word	0x2000019c

0800056c <WriteEnable>:
void WriteEnable(){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]=WREN;
 8000572:	2306      	movs	r3, #6
 8000574:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 8000576:	2200      	movs	r2, #0
 8000578:	2110      	movs	r1, #16
 800057a:	480b      	ldr	r0, [pc, #44]	; (80005a8 <WriteEnable+0x3c>)
 800057c:	f001 fa6a 	bl	8001a54 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	2301      	movs	r3, #1
 8000584:	2201      	movs	r2, #1
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <WriteEnable+0x40>)
 8000588:	f003 fa13 	bl	80039b2 <HAL_SPI_Transmit>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <WriteEnable+0x44>)
 8000592:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <WriteEnable+0x3c>)
 800059a:	f001 fa5b 	bl	8001a54 <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020000 	.word	0x40020000
 80005ac:	2000019c 	.word	0x2000019c
 80005b0:	20000198 	.word	0x20000198

080005b4 <MB85RS_write>:

void MB85RS_write(unsigned int address, unsigned char *buffer, unsigned int size)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	Mb85rs_dataTx[0] = WRITE;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MB85RS_write+0x80>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	Mb85rs_dataTx[1] = (char)(address >> 8);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MB85RS_write+0x80>)
 80005ce:	705a      	strb	r2, [r3, #1]
	Mb85rs_dataTx[2] = (char)(address);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MB85RS_write+0x80>)
 80005d6:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<size;i++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00a      	b.n	80005f4 <MB85RS_write+0x40>
		Mb85rs_dataTx[3+i] = buffer[i];
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	441a      	add	r2, r3
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	3303      	adds	r3, #3
 80005e8:	7811      	ldrb	r1, [r2, #0]
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MB85RS_write+0x80>)
 80005ec:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<size;i++){
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	3301      	adds	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8f0      	bhi.n	80005de <MB85RS_write+0x2a>
	}
	WriteEnable();
 80005fc:	f7ff ffb6 	bl	800056c <WriteEnable>
	MB85RS_CS_LOW;
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <MB85RS_write+0x84>)
 8000606:	f001 fa25 	bl	8001a54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Mb85rs_dataTx, size+3, 10);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	b29b      	uxth	r3, r3
 800060e:	3303      	adds	r3, #3
 8000610:	b29a      	uxth	r2, r3
 8000612:	230a      	movs	r3, #10
 8000614:	4907      	ldr	r1, [pc, #28]	; (8000634 <MB85RS_write+0x80>)
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <MB85RS_write+0x88>)
 8000618:	f003 f9cb 	bl	80039b2 <HAL_SPI_Transmit>
	MB85RS_CS_HIGH;
 800061c:	2201      	movs	r2, #1
 800061e:	2110      	movs	r1, #16
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <MB85RS_write+0x84>)
 8000622:	f001 fa17 	bl	8001a54 <HAL_GPIO_WritePin>
	WriteProtect();
 8000626:	f7ff ff5d 	bl	80004e4 <WriteProtect>
}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000011c 	.word	0x2000011c
 8000638:	40020000 	.word	0x40020000
 800063c:	2000019c 	.word	0x2000019c

08000640 <MB85RS_read>:
void MB85RS_read(unsigned int address, unsigned char *buffer, unsigned int size)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
	uint8_t cmd[3];
	cmd[0]=READ;
 800064c:	2303      	movs	r3, #3
 800064e:	753b      	strb	r3, [r7, #20]
	cmd[1]=(char)(address >> 8);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	b2db      	uxtb	r3, r3
 8000656:	757b      	strb	r3, [r7, #21]
	cmd[2] = (char)(address);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	75bb      	strb	r3, [r7, #22]
	MB85RS_CS_LOW;
 800065e:	2200      	movs	r2, #0
 8000660:	2110      	movs	r1, #16
 8000662:	480d      	ldr	r0, [pc, #52]	; (8000698 <MB85RS_read+0x58>)
 8000664:	f001 f9f6 	bl	8001a54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 3, 10);
 8000668:	f107 0114 	add.w	r1, r7, #20
 800066c:	230a      	movs	r3, #10
 800066e:	2203      	movs	r2, #3
 8000670:	480a      	ldr	r0, [pc, #40]	; (800069c <MB85RS_read+0x5c>)
 8000672:	f003 f99e 	bl	80039b2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 10);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	b29a      	uxth	r2, r3
 800067a:	230a      	movs	r3, #10
 800067c:	68b9      	ldr	r1, [r7, #8]
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <MB85RS_read+0x5c>)
 8000680:	f003 fad3 	bl	8003c2a <HAL_SPI_Receive>
	MB85RS_CS_HIGH;
 8000684:	2201      	movs	r2, #1
 8000686:	2110      	movs	r1, #16
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <MB85RS_read+0x58>)
 800068a:	f001 f9e3 	bl	8001a54 <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020000 	.word	0x40020000
 800069c:	2000019c 	.word	0x2000019c

080006a0 <MB85RS_erase>:

void MB85RS_erase()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0a4      	sub	sp, #144	; 0x90
 80006a4:	af00      	add	r7, sp, #0
	uint8_t cmd[3];
	uint8_t datanull[128];
	//setStatus(0x00);
	cmd[0]=WRITE;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	cmd[1] = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	cmd[2] = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	WriteEnable();
 80006b8:	f7ff ff58 	bl	800056c <WriteEnable>
	MB85RS_CS_LOW;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	481d      	ldr	r0, [pc, #116]	; (8000738 <MB85RS_erase+0x98>)
 80006c2:	f001 f9c7 	bl	8001a54 <HAL_GPIO_WritePin>
	for(int i=0;i<128;i++){
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006cc:	e00a      	b.n	80006e4 <MB85RS_erase+0x44>
		datanull[i]=0;
 80006ce:	1d3a      	adds	r2, r7, #4
 80006d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006d4:	4413      	add	r3, r2
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<128;i++){
 80006da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006de:	3301      	adds	r3, #1
 80006e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006e8:	2b7f      	cmp	r3, #127	; 0x7f
 80006ea:	ddf0      	ble.n	80006ce <MB85RS_erase+0x2e>
	}
	HAL_SPI_Transmit(&hspi1, cmd, 3, 100);
 80006ec:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	2203      	movs	r2, #3
 80006f4:	4811      	ldr	r0, [pc, #68]	; (800073c <MB85RS_erase+0x9c>)
 80006f6:	f003 f95c 	bl	80039b2 <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000700:	e00a      	b.n	8000718 <MB85RS_erase+0x78>
	{
		HAL_SPI_Transmit(&hspi1, datanull, 128, 100);
 8000702:	1d39      	adds	r1, r7, #4
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <MB85RS_erase+0x9c>)
 800070a:	f003 f952 	bl	80039b2 <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 800070e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000712:	3301      	adds	r3, #1
 8000714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800071c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000720:	ddef      	ble.n	8000702 <MB85RS_erase+0x62>
	}
	MB85RS_CS_HIGH;
 8000722:	2201      	movs	r2, #1
 8000724:	2110      	movs	r1, #16
 8000726:	4804      	ldr	r0, [pc, #16]	; (8000738 <MB85RS_erase+0x98>)
 8000728:	f001 f994 	bl	8001a54 <HAL_GPIO_WritePin>
	WriteProtect();
 800072c:	f7ff feda 	bl	80004e4 <WriteProtect>
}
 8000730:	bf00      	nop
 8000732:	3790      	adds	r7, #144	; 0x90
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40020000 	.word	0x40020000
 800073c:	2000019c 	.word	0x2000019c

08000740 <StartTaskFram>:


uint8_t reg=0;

void StartTaskFram(void *argument){
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	osDelay(100);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f007 fdc1 	bl	80082d0 <osDelay>
	while(1){
		if(cmd==1){
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <StartTaskFram+0xf8>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d105      	bne.n	8000762 <StartTaskFram+0x22>
			WriteProtect();
 8000756:	f7ff fec5 	bl	80004e4 <WriteProtect>
			cmd=0;
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <StartTaskFram+0xf8>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	e065      	b.n	800082e <StartTaskFram+0xee>
		}else if(cmd==2){
 8000762:	4b35      	ldr	r3, [pc, #212]	; (8000838 <StartTaskFram+0xf8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d105      	bne.n	8000776 <StartTaskFram+0x36>
			WriteEnable();
 800076a:	f7ff feff 	bl	800056c <WriteEnable>
			cmd=0;
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <StartTaskFram+0xf8>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	e05b      	b.n	800082e <StartTaskFram+0xee>
		}else if(cmd==3){ // transmit
 8000776:	4b30      	ldr	r3, [pc, #192]	; (8000838 <StartTaskFram+0xf8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d118      	bne.n	80007b0 <StartTaskFram+0x70>
			for(int i=0;i<25;i++){
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	e009      	b.n	8000798 <StartTaskFram+0x58>
				data_tx[i]=i;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	b2d9      	uxtb	r1, r3
 8000788:	4a2c      	ldr	r2, [pc, #176]	; (800083c <StartTaskFram+0xfc>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4413      	add	r3, r2
 800078e:	460a      	mov	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<25;i++){
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b18      	cmp	r3, #24
 800079c:	ddf2      	ble.n	8000784 <StartTaskFram+0x44>
			}
			MB85RS_write(1, data_tx, 25);
 800079e:	2219      	movs	r2, #25
 80007a0:	4926      	ldr	r1, [pc, #152]	; (800083c <StartTaskFram+0xfc>)
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff ff06 	bl	80005b4 <MB85RS_write>
			cmd=0;
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <StartTaskFram+0xf8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	e03e      	b.n	800082e <StartTaskFram+0xee>
		}else if(cmd==4){ //receiver
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <StartTaskFram+0xf8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d108      	bne.n	80007ca <StartTaskFram+0x8a>
			MB85RS_read(1, data_rx, 25);
 80007b8:	2219      	movs	r2, #25
 80007ba:	4921      	ldr	r1, [pc, #132]	; (8000840 <StartTaskFram+0x100>)
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff ff3f 	bl	8000640 <MB85RS_read>
			cmd=0;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <StartTaskFram+0xf8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e031      	b.n	800082e <StartTaskFram+0xee>
		}else if(cmd==5){
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <StartTaskFram+0xf8>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	d116      	bne.n	8000800 <StartTaskFram+0xc0>
			for(int i=0;i<25;i++){
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	e007      	b.n	80007e8 <StartTaskFram+0xa8>
				data_tx[i]=0;
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <StartTaskFram+0xfc>)
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<25;i++){
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3301      	adds	r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	2b18      	cmp	r3, #24
 80007ec:	ddf4      	ble.n	80007d8 <StartTaskFram+0x98>
			}
			MB85RS_write(1, data_tx, 25);
 80007ee:	2219      	movs	r2, #25
 80007f0:	4912      	ldr	r1, [pc, #72]	; (800083c <StartTaskFram+0xfc>)
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fede 	bl	80005b4 <MB85RS_write>
			cmd=0;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <StartTaskFram+0xf8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e016      	b.n	800082e <StartTaskFram+0xee>
		}else if(cmd==6){
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <StartTaskFram+0xf8>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b06      	cmp	r3, #6
 8000806:	d109      	bne.n	800081c <StartTaskFram+0xdc>
			reg=ReadStatus();
 8000808:	f7ff fe90 	bl	800052c <ReadStatus>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <StartTaskFram+0x104>)
 8000812:	701a      	strb	r2, [r3, #0]
			cmd=0;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <StartTaskFram+0xf8>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
 800081a:	e008      	b.n	800082e <StartTaskFram+0xee>
		}else if(cmd==7){
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <StartTaskFram+0xf8>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b07      	cmp	r3, #7
 8000822:	d104      	bne.n	800082e <StartTaskFram+0xee>
			MB85RS_erase();
 8000824:	f7ff ff3c 	bl	80006a0 <MB85RS_erase>
			cmd=0;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <StartTaskFram+0xf8>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
		}
		osDelay(100);
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f007 fd4e 	bl	80082d0 <osDelay>
		if(cmd==1){
 8000834:	e78b      	b.n	800074e <StartTaskFram+0xe>
 8000836:	bf00      	nop
 8000838:	20000197 	.word	0x20000197
 800083c:	20000174 	.word	0x20000174
 8000840:	20000150 	.word	0x20000150
 8000844:	20000199 	.word	0x20000199

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084c:	f000 fb4c 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000850:	f000 f828 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000854:	f000 f8f0 	bl	8000a38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000858:	f000 f8c6 	bl	80009e8 <MX_DMA_Init>
  MX_SPI1_Init();
 800085c:	f000 f88e 	bl	800097c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000860:	f007 fc5a 	bl	8008118 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000864:	4a09      	ldr	r2, [pc, #36]	; (800088c <main+0x44>)
 8000866:	2100      	movs	r1, #0
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <main+0x48>)
 800086a:	f007 fc9f 	bl	80081ac <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <main+0x4c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* creation of taskFRam */
  taskFRamHandle = osThreadNew(StartTaskFram, NULL, &taskFRam_attributes);
 8000874:	4a08      	ldr	r2, [pc, #32]	; (8000898 <main+0x50>)
 8000876:	2100      	movs	r1, #0
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <main+0x54>)
 800087a:	f007 fc97 	bl	80081ac <osThreadNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <main+0x58>)
 8000882:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000884:	f007 fc6c 	bl	8008160 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000888:	e7fe      	b.n	8000888 <main+0x40>
 800088a:	bf00      	nop
 800088c:	0800b694 	.word	0x0800b694
 8000890:	08000b09 	.word	0x08000b09
 8000894:	200002b4 	.word	0x200002b4
 8000898:	0800b6b8 	.word	0x0800b6b8
 800089c:	08000741 	.word	0x08000741
 80008a0:	200002b8 	.word	0x200002b8

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	; 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	2230      	movs	r2, #48	; 0x30
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00a fe9e 	bl	800b5f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <SystemClock_Config+0xd0>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a28      	ldr	r2, [pc, #160]	; (8000974 <SystemClock_Config+0xd0>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <SystemClock_Config+0xd0>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <SystemClock_Config+0xd4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f0:	4a21      	ldr	r2, [pc, #132]	; (8000978 <SystemClock_Config+0xd4>)
 80008f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <SystemClock_Config+0xd4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000918:	2319      	movs	r3, #25
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800091c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000922:	2304      	movs	r3, #4
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000926:	2307      	movs	r3, #7
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fb40 	bl	8002fb4 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800093a:	f000 f909 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2302      	movs	r3, #2
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2102      	movs	r1, #2
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fda2 	bl	80034a4 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000966:	f000 f8f3 	bl	8000b50 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	; 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_SPI1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI1_Init+0x64>)
 800099c:	2202      	movs	r2, #2
 800099e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009b0:	2210      	movs	r2, #16
 80009b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009c8:	220a      	movs	r2, #10
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009ce:	f002 ff67 	bl	80038a0 <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 f8ba 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000019c 	.word	0x2000019c
 80009e4:	40013000 	.word	0x40013000

080009e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_DMA_Init+0x4c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <MX_DMA_Init+0x4c>)
 80009f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <MX_DMA_Init+0x4c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	2038      	movs	r0, #56	; 0x38
 8000a10:	f000 fb88 	bl	8001124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a14:	2038      	movs	r0, #56	; 0x38
 8000a16:	f000 fba1 	bl	800115c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2105      	movs	r1, #5
 8000a1e:	203b      	movs	r0, #59	; 0x3b
 8000a20:	f000 fb80 	bl	8001124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a24:	203b      	movs	r0, #59	; 0x3b
 8000a26:	f000 fb99 	bl	800115c <HAL_NVIC_EnableIRQ>

}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_GPIO_Init+0xc4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a29      	ldr	r2, [pc, #164]	; (8000afc <MX_GPIO_Init+0xc4>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <MX_GPIO_Init+0xc4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <MX_GPIO_Init+0xc4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a22      	ldr	r2, [pc, #136]	; (8000afc <MX_GPIO_Init+0xc4>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_GPIO_Init+0xc4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_GPIO_Init+0xc4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <MX_GPIO_Init+0xc4>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_GPIO_Init+0xc4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	4815      	ldr	r0, [pc, #84]	; (8000b00 <MX_GPIO_Init+0xc8>)
 8000aaa:	f000 ffd3 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	4814      	ldr	r0, [pc, #80]	; (8000b04 <MX_GPIO_Init+0xcc>)
 8000ab4:	f000 ffce 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_GPIO_Init+0xc8>)
 8000ad2:	f000 fe3b 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_GPIO_Init+0xcc>)
 8000aee:	f000 fe2d 	bl	800174c <HAL_GPIO_Init>

}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000

08000b08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b10:	f00a f854 	bl	800abbc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <StartDefaultTask+0x20>)
 8000b1a:	f000 ffb4 	bl	8001a86 <HAL_GPIO_TogglePin>

    osDelay(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
 8000b20:	f007 fbd6 	bl	80082d0 <osDelay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b24:	e7f6      	b.n	8000b14 <StartDefaultTask+0xc>
 8000b26:	bf00      	nop
 8000b28:	40020800 	.word	0x40020800

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3e:	f000 f9f5 	bl	8000f2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40014800 	.word	0x40014800

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	f06f 0001 	mvn.w	r0, #1
 8000ba2:	f000 fabf 	bl	8001124 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <HAL_SPI_MspInit+0x140>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	f040 808a 	bne.w	8000cec <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <HAL_SPI_MspInit+0x144>)
 8000bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be0:	4a45      	ldr	r2, [pc, #276]	; (8000cf8 <HAL_SPI_MspInit+0x144>)
 8000be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be6:	6453      	str	r3, [r2, #68]	; 0x44
 8000be8:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <HAL_SPI_MspInit+0x144>)
 8000bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b3f      	ldr	r3, [pc, #252]	; (8000cf8 <HAL_SPI_MspInit+0x144>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <HAL_SPI_MspInit+0x144>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <HAL_SPI_MspInit+0x144>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c10:	23e0      	movs	r3, #224	; 0xe0
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c20:	2305      	movs	r3, #5
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4834      	ldr	r0, [pc, #208]	; (8000cfc <HAL_SPI_MspInit+0x148>)
 8000c2c:	f000 fd8e 	bl	800174c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000c30:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c32:	4a34      	ldr	r2, [pc, #208]	; (8000d04 <HAL_SPI_MspInit+0x150>)
 8000c34:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000c36:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c38:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c40:	2240      	movs	r2, #64	; 0x40
 8000c42:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c50:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c6a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c72:	4823      	ldr	r0, [pc, #140]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c74:	f000 fa80 	bl	8001178 <HAL_DMA_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000c7e:	f7ff ff67 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c86:	649a      	str	r2, [r3, #72]	; 0x48
 8000c88:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <HAL_SPI_MspInit+0x14c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_SPI_MspInit+0x158>)
 8000c92:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000c96:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cae:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000cc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cc8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000cd2:	f000 fa51 	bl	8001178 <HAL_DMA_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8000cdc:	f7ff ff38 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000ce4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_SPI_MspInit+0x154>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40013000 	.word	0x40013000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	200001f4 	.word	0x200001f4
 8000d04:	40026458 	.word	0x40026458
 8000d08:	20000254 	.word	0x20000254
 8000d0c:	40026410 	.word	0x40026410

08000d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <HAL_InitTick+0xd0>)
 8000d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d28:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <HAL_InitTick+0xd0>)
 8000d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_InitTick+0xd0>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d3c:	f107 020c 	add.w	r2, r7, #12
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fd78 	bl	800383c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d4c:	f002 fd62 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 8000d50:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d54:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <HAL_InitTick+0xd4>)
 8000d56:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5a:	0c9b      	lsrs	r3, r3, #18
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <HAL_InitTick+0xd8>)
 8000d62:	4a22      	ldr	r2, [pc, #136]	; (8000dec <HAL_InitTick+0xdc>)
 8000d64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_InitTick+0xd8>)
 8000d68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d6c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <HAL_InitTick+0xd8>)
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_InitTick+0xd8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <HAL_InitTick+0xd8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_InitTick+0xd8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <HAL_InitTick+0xd8>)
 8000d88:	f003 fb32 	bl	80043f0 <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d11b      	bne.n	8000dd2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000d9a:	4813      	ldr	r0, [pc, #76]	; (8000de8 <HAL_InitTick+0xd8>)
 8000d9c:	f003 fb82 	bl	80044a4 <HAL_TIM_Base_Start_IT>
 8000da0:	4603      	mov	r3, r0
 8000da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d111      	bne.n	8000dd2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000dae:	201a      	movs	r0, #26
 8000db0:	f000 f9d4 	bl	800115c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b0f      	cmp	r3, #15
 8000db8:	d808      	bhi.n	8000dcc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	201a      	movs	r0, #26
 8000dc0:	f000 f9b0 	bl	8001124 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_InitTick+0xe0>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e002      	b.n	8000dd2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3730      	adds	r7, #48	; 0x30
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	431bde83 	.word	0x431bde83
 8000de8:	200002bc 	.word	0x200002bc
 8000dec:	40014800 	.word	0x40014800
 8000df0:	20000004 	.word	0x20000004

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e26:	f003 fb9f 	bl	8004568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200002bc 	.word	0x200002bc

08000e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <DMA2_Stream0_IRQHandler+0x10>)
 8000e3a:	f000 fa4b 	bl	80012d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000254 	.word	0x20000254

08000e48 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <DMA2_Stream3_IRQHandler+0x10>)
 8000e4e:	f000 fa41 	bl	80012d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200001f4 	.word	0x200001f4

08000e5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <OTG_FS_IRQHandler+0x10>)
 8000e62:	f000 ff7a 	bl	8001d5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20005908 	.word	0x20005908

08000e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <SystemInit+0x20>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <SystemInit+0x20>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ecc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e9a:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ebe:	f7ff ffd7 	bl	8000e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f00a fb65 	bl	800b590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec6:	f7ff fcbf 	bl	8000848 <main>
  bx  lr    
 8000eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ecc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000ed8:	0800b70c 	.word	0x0800b70c
  ldr r2, =_sbss
 8000edc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000ee0:	20006034 	.word	0x20006034

08000ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f8fc 	bl	800110e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	200f      	movs	r0, #15
 8000f18:	f7ff fefa 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fe1e 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000304 	.word	0x20000304

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000304 	.word	0x20000304

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff4c 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001136:	f7ff ff61 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 800113a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	6978      	ldr	r0, [r7, #20]
 8001142:	f7ff ffb1 	bl	80010a8 <NVIC_EncodePriority>
 8001146:	4602      	mov	r2, r0
 8001148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff80 	bl	8001054 <__NVIC_SetPriority>
}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff54 	bl	8001018 <__NVIC_EnableIRQ>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff fee6 	bl	8000f54 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e099      	b.n	80012c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2202      	movs	r2, #2
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0201 	bic.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b4:	e00f      	b.n	80011d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011b6:	f7ff fecd 	bl	8000f54 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d908      	bls.n	80011d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2220      	movs	r2, #32
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e078      	b.n	80012c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1e8      	bne.n	80011b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_DMA_Init+0x158>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001202:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	2b04      	cmp	r3, #4
 800122e:	d107      	bne.n	8001240 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4313      	orrs	r3, r2
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4313      	orrs	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f023 0307 	bic.w	r3, r3, #7
 8001256:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	4313      	orrs	r3, r2
 8001260:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	2b04      	cmp	r3, #4
 8001268:	d117      	bne.n	800129a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4313      	orrs	r3, r2
 8001272:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00e      	beq.n	800129a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f9e9 	bl	8001654 <DMA_CheckFifoParam>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2240      	movs	r2, #64	; 0x40
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001296:	2301      	movs	r3, #1
 8001298:	e016      	b.n	80012c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f9a0 	bl	80015e8 <DMA_CalcBaseAndBitshift>
 80012a8:	4603      	mov	r3, r0
 80012aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b0:	223f      	movs	r2, #63	; 0x3f
 80012b2:	409a      	lsls	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	f010803f 	.word	0xf010803f

080012d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012e0:	4b8e      	ldr	r3, [pc, #568]	; (800151c <HAL_DMA_IRQHandler+0x248>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a8e      	ldr	r2, [pc, #568]	; (8001520 <HAL_DMA_IRQHandler+0x24c>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0a9b      	lsrs	r3, r3, #10
 80012ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fe:	2208      	movs	r2, #8
 8001300:	409a      	lsls	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01a      	beq.n	8001340 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0204 	bic.w	r2, r2, #4
 8001326:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	2208      	movs	r2, #8
 800132e:	409a      	lsls	r2, r3
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	2201      	movs	r2, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d012      	beq.n	8001376 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	2201      	movs	r2, #1
 8001364:	409a      	lsls	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136e:	f043 0202 	orr.w	r2, r3, #2
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137a:	2204      	movs	r2, #4
 800137c:	409a      	lsls	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d012      	beq.n	80013ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	2204      	movs	r2, #4
 800139a:	409a      	lsls	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a4:	f043 0204 	orr.w	r2, r3, #4
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b0:	2210      	movs	r2, #16
 80013b2:	409a      	lsls	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d043      	beq.n	8001444 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d03c      	beq.n	8001444 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ce:	2210      	movs	r2, #16
 80013d0:	409a      	lsls	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d018      	beq.n	8001416 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d108      	bne.n	8001404 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d024      	beq.n	8001444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
 8001402:	e01f      	b.n	8001444 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01b      	beq.n	8001444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	4798      	blx	r3
 8001414:	e016      	b.n	8001444 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d107      	bne.n	8001434 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0208 	bic.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001448:	2220      	movs	r2, #32
 800144a:	409a      	lsls	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4013      	ands	r3, r2
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 808f 	beq.w	8001574 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8087 	beq.w	8001574 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	2220      	movs	r2, #32
 800146c:	409a      	lsls	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b05      	cmp	r3, #5
 800147c:	d136      	bne.n	80014ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0216 	bic.w	r2, r2, #22
 800148c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <HAL_DMA_IRQHandler+0x1da>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0208 	bic.w	r2, r2, #8
 80014bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	223f      	movs	r2, #63	; 0x3f
 80014c4:	409a      	lsls	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d07e      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
        }
        return;
 80014ea:	e079      	b.n	80015e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d01d      	beq.n	8001536 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10d      	bne.n	8001524 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	2b00      	cmp	r3, #0
 800150e:	d031      	beq.n	8001574 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	4798      	blx	r3
 8001518:	e02c      	b.n	8001574 <HAL_DMA_IRQHandler+0x2a0>
 800151a:	bf00      	nop
 800151c:	20000000 	.word	0x20000000
 8001520:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	2b00      	cmp	r3, #0
 800152a:	d023      	beq.n	8001574 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
 8001534:	e01e      	b.n	8001574 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10f      	bne.n	8001564 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0210 	bic.w	r2, r2, #16
 8001552:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	2b00      	cmp	r3, #0
 800157a:	d032      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d022      	beq.n	80015ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2205      	movs	r2, #5
 800158c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d307      	bcc.n	80015bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f2      	bne.n	80015a0 <HAL_DMA_IRQHandler+0x2cc>
 80015ba:	e000      	b.n	80015be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4798      	blx	r3
 80015de:	e000      	b.n	80015e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80015e0:	bf00      	nop
    }
  }
}
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3b10      	subs	r3, #16
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <DMA_CalcBaseAndBitshift+0x64>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <DMA_CalcBaseAndBitshift+0x68>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d909      	bls.n	800162a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800161e:	f023 0303 	bic.w	r3, r3, #3
 8001622:	1d1a      	adds	r2, r3, #4
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	659a      	str	r2, [r3, #88]	; 0x58
 8001628:	e007      	b.n	800163a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	aaaaaaab 	.word	0xaaaaaaab
 8001650:	0800b6f4 	.word	0x0800b6f4

08001654 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d11f      	bne.n	80016ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d856      	bhi.n	8001722 <DMA_CheckFifoParam+0xce>
 8001674:	a201      	add	r2, pc, #4	; (adr r2, 800167c <DMA_CheckFifoParam+0x28>)
 8001676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167a:	bf00      	nop
 800167c:	0800168d 	.word	0x0800168d
 8001680:	0800169f 	.word	0x0800169f
 8001684:	0800168d 	.word	0x0800168d
 8001688:	08001723 	.word	0x08001723
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d046      	beq.n	8001726 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800169c:	e043      	b.n	8001726 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016a6:	d140      	bne.n	800172a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ac:	e03d      	b.n	800172a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b6:	d121      	bne.n	80016fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d837      	bhi.n	800172e <DMA_CheckFifoParam+0xda>
 80016be:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <DMA_CheckFifoParam+0x70>)
 80016c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c4:	080016d5 	.word	0x080016d5
 80016c8:	080016db 	.word	0x080016db
 80016cc:	080016d5 	.word	0x080016d5
 80016d0:	080016ed 	.word	0x080016ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
      break;
 80016d8:	e030      	b.n	800173c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d025      	beq.n	8001732 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ea:	e022      	b.n	8001732 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f4:	d11f      	bne.n	8001736 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016fa:	e01c      	b.n	8001736 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d903      	bls.n	800170a <DMA_CheckFifoParam+0xb6>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d003      	beq.n	8001710 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001708:	e018      	b.n	800173c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
      break;
 800170e:	e015      	b.n	800173c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00e      	beq.n	800173a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
      break;
 8001720:	e00b      	b.n	800173a <DMA_CheckFifoParam+0xe6>
      break;
 8001722:	bf00      	nop
 8001724:	e00a      	b.n	800173c <DMA_CheckFifoParam+0xe8>
      break;
 8001726:	bf00      	nop
 8001728:	e008      	b.n	800173c <DMA_CheckFifoParam+0xe8>
      break;
 800172a:	bf00      	nop
 800172c:	e006      	b.n	800173c <DMA_CheckFifoParam+0xe8>
      break;
 800172e:	bf00      	nop
 8001730:	e004      	b.n	800173c <DMA_CheckFifoParam+0xe8>
      break;
 8001732:	bf00      	nop
 8001734:	e002      	b.n	800173c <DMA_CheckFifoParam+0xe8>
      break;   
 8001736:	bf00      	nop
 8001738:	e000      	b.n	800173c <DMA_CheckFifoParam+0xe8>
      break;
 800173a:	bf00      	nop
    }
  } 
  
  return status; 
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	e159      	b.n	8001a1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	429a      	cmp	r2, r3
 8001782:	f040 8148 	bne.w	8001a16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d005      	beq.n	800179e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	2b02      	cmp	r3, #2
 800179c:	d130      	bne.n	8001800 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d4:	2201      	movs	r2, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 0201 	and.w	r2, r3, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b03      	cmp	r3, #3
 800180a:	d017      	beq.n	800183c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d123      	bne.n	8001890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	69b9      	ldr	r1, [r7, #24]
 800188c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80a2 	beq.w	8001a16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <HAL_GPIO_Init+0x2e8>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a56      	ldr	r2, [pc, #344]	; (8001a34 <HAL_GPIO_Init+0x2e8>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b54      	ldr	r3, [pc, #336]	; (8001a34 <HAL_GPIO_Init+0x2e8>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ee:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_GPIO_Init+0x2ec>)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a49      	ldr	r2, [pc, #292]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x202>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a48      	ldr	r2, [pc, #288]	; (8001a40 <HAL_GPIO_Init+0x2f4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x1fe>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_GPIO_Init+0x2f8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x1fa>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <HAL_GPIO_Init+0x2fc>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x1f6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a45      	ldr	r2, [pc, #276]	; (8001a4c <HAL_GPIO_Init+0x300>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x1f2>
 800193a:	2304      	movs	r3, #4
 800193c:	e008      	b.n	8001950 <HAL_GPIO_Init+0x204>
 800193e:	2307      	movs	r3, #7
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x204>
 8001942:	2303      	movs	r3, #3
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x204>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x204>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x204>
 800194e:	2300      	movs	r3, #0
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f002 0203 	and.w	r2, r2, #3
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001960:	4935      	ldr	r1, [pc, #212]	; (8001a38 <HAL_GPIO_Init+0x2ec>)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196e:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <HAL_GPIO_Init+0x304>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001992:	4a2f      	ldr	r2, [pc, #188]	; (8001a50 <HAL_GPIO_Init+0x304>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001998:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_GPIO_Init+0x304>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019bc:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <HAL_GPIO_Init+0x304>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_GPIO_Init+0x304>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e6:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <HAL_GPIO_Init+0x304>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_GPIO_Init+0x304>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_GPIO_Init+0x304>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b0f      	cmp	r3, #15
 8001a20:	f67f aea2 	bls.w	8001768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40013c00 	.word	0x40013c00

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a70:	e003      	b.n	8001a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	041a      	lsls	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	619a      	str	r2, [r3, #24]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a98:	887a      	ldrh	r2, [r7, #2]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	041a      	lsls	r2, r3, #16
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abc:	b08f      	sub	sp, #60	; 0x3c
 8001abe:	af0a      	add	r7, sp, #40	; 0x28
 8001ac0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e10f      	b.n	8001cec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f009 fa48 	bl	800af7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 f805 	bl	8004b1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	687e      	ldr	r6, [r7, #4]
 8001b18:	466d      	mov	r5, sp
 8001b1a:	f106 0410 	add.w	r4, r6, #16
 8001b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b2e:	1d33      	adds	r3, r6, #4
 8001b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f002 fedc 	bl	80048f0 <USB_CoreInit>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0d0      	b.n	8001cec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fff3 	bl	8004b3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e04a      	b.n	8001bf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	333d      	adds	r3, #61	; 0x3d
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333c      	adds	r3, #60	; 0x3c
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	b298      	uxth	r0, r3
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3344      	adds	r3, #68	; 0x44
 8001b98:	4602      	mov	r2, r0
 8001b9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3340      	adds	r3, #64	; 0x40
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3348      	adds	r3, #72	; 0x48
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	334c      	adds	r3, #76	; 0x4c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3354      	adds	r3, #84	; 0x54
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3af      	bcc.n	8001b5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e044      	b.n	8001c8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3b5      	bcc.n	8001c02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	687e      	ldr	r6, [r7, #4]
 8001c9e:	466d      	mov	r5, sp
 8001ca0:	f106 0410 	add.w	r4, r6, #16
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb4:	1d33      	adds	r3, r6, #4
 8001cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f002 ff8b 	bl	8004bd4 <USB_DevInit>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e00d      	b.n	8001cec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f004 f8da 	bl	8005e9e <USB_DevDisconnect>

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_Start+0x1c>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e020      	b.n	8001d52 <HAL_PCD_Start+0x5e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d109      	bne.n	8001d34 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d005      	beq.n	8001d34 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 fedd 	bl	8004af8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 f88a 	bl	8005e5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d5a:	b590      	push	{r4, r7, lr}
 8001d5c:	b08d      	sub	sp, #52	; 0x34
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 f948 	bl	8006006 <USB_GetMode>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 848a 	bne.w	8002692 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 f8ac 	bl	8005ee0 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8480 	beq.w	8002690 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f004 f899 	bl	8005ee0 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d107      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f002 0202 	and.w	r2, r2, #2
 8001dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f004 f887 	bl	8005ee0 <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d161      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0210 	bic.w	r2, r2, #16
 8001dea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f003 020f 	and.w	r2, r3, #15
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	3304      	adds	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	0c5b      	lsrs	r3, r3, #17
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d124      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d035      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	6a38      	ldr	r0, [r7, #32]
 8001e38:	f003 febe 	bl	8005bb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e48:	441a      	add	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	6a1a      	ldr	r2, [r3, #32]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e5a:	441a      	add	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	621a      	str	r2, [r3, #32]
 8001e60:	e016      	b.n	8001e90 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	0c5b      	lsrs	r3, r3, #17
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d110      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e74:	2208      	movs	r2, #8
 8001e76:	4619      	mov	r1, r3
 8001e78:	6a38      	ldr	r0, [r7, #32]
 8001e7a:	f003 fe9d 	bl	8005bb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e8a:	441a      	add	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0210 	orr.w	r2, r2, #16
 8001e9e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f004 f81b 	bl	8005ee0 <USB_ReadInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001eb4:	f040 80a7 	bne.w	8002006 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 f820 	bl	8005f06 <USB_ReadDevAllOutEpInterrupt>
 8001ec6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ec8:	e099      	b.n	8001ffe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 808e 	beq.w	8001ff2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 f844 	bl	8005f6e <USB_ReadDevOutEPInterrupt>
 8001ee6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efe:	461a      	mov	r2, r3
 8001f00:	2301      	movs	r3, #1
 8001f02:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fec2 	bl	8002c90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f22:	461a      	mov	r2, r3
 8001f24:	2308      	movs	r3, #8
 8001f26:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 ff98 	bl	8002e60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f46:	461a      	mov	r2, r3
 8001f48:	2310      	movs	r3, #16
 8001f4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d030      	beq.n	8001fb8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	d109      	bne.n	8001f76 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f74:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	78db      	ldrb	r3, [r3, #3]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d108      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2200      	movs	r2, #0
 8001f98:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f009 f8e7 	bl	800b174 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fea:	461a      	mov	r2, r3
 8001fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	f47f af62 	bne.w	8001eca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 ff68 	bl	8005ee0 <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002016:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800201a:	f040 80db 	bne.w	80021d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 ff89 	bl	8005f3a <USB_ReadDevAllInEpInterrupt>
 8002028:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800202e:	e0cd      	b.n	80021cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80c2 	beq.w	80021c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f003 ffaf 	bl	8005faa <USB_ReadDevInEPInterrupt>
 800204c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d057      	beq.n	8002108 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	2201      	movs	r2, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	69f9      	ldr	r1, [r7, #28]
 8002074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002078:	4013      	ands	r3, r2
 800207a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002088:	461a      	mov	r2, r3
 800208a:	2301      	movs	r3, #1
 800208c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d132      	bne.n	80020fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	334c      	adds	r3, #76	; 0x4c
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4403      	add	r3, r0
 80020b6:	3348      	adds	r3, #72	; 0x48
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4419      	add	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4403      	add	r3, r0
 80020ca:	334c      	adds	r3, #76	; 0x4c
 80020cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d113      	bne.n	80020fc <HAL_PCD_IRQHandler+0x3a2>
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3354      	adds	r3, #84	; 0x54
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020f4:	461a      	mov	r2, r3
 80020f6:	2101      	movs	r1, #1
 80020f8:	f003 ffb6 	bl	8006068 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f008 ffbb 	bl	800b07e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800211e:	461a      	mov	r2, r3
 8002120:	2308      	movs	r3, #8
 8002122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213a:	461a      	mov	r2, r3
 800213c:	2310      	movs	r3, #16
 800213e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002156:	461a      	mov	r2, r3
 8002158:	2340      	movs	r3, #64	; 0x40
 800215a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d023      	beq.n	80021ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002168:	6a38      	ldr	r0, [r7, #32]
 800216a:	f002 fe97 	bl	8004e9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800216e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	3338      	adds	r3, #56	; 0x38
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	3304      	adds	r3, #4
 8002180:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	78db      	ldrb	r3, [r3, #3]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d108      	bne.n	800219c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4619      	mov	r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f008 fffe 	bl	800b198 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021a8:	461a      	mov	r2, r3
 80021aa:	2302      	movs	r3, #2
 80021ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fcdb 	bl	8002b76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	3301      	adds	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f47f af2e 	bne.w	8002030 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 fe81 	bl	8005ee0 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021e8:	d122      	bne.n	8002230 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002204:	2b01      	cmp	r3, #1
 8002206:	d108      	bne.n	800221a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002210:	2100      	movs	r1, #0
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fec2 	bl	8002f9c <HAL_PCDEx_LPM_Callback>
 8002218:	e002      	b.n	8002220 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f008 ff9c 	bl	800b158 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800222e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f003 fe53 	bl	8005ee0 <USB_ReadInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002244:	d112      	bne.n	800226c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d102      	bne.n	800225c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f008 ff58 	bl	800b10c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800226a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f003 fe35 	bl	8005ee0 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002280:	f040 80b7 	bne.w	80023f2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2110      	movs	r1, #16
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 fdfc 	bl	8004e9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a8:	e046      	b.n	8002338 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b6:	461a      	mov	r2, r3
 80022b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ce:	0151      	lsls	r1, r2, #5
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	440a      	add	r2, r1
 80022d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ea:	461a      	mov	r2, r3
 80022ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002302:	0151      	lsls	r1, r2, #5
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	440a      	add	r2, r1
 8002308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800230c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002310:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002322:	0151      	lsls	r1, r2, #5
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	440a      	add	r2, r1
 8002328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800232c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002330:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	3301      	adds	r3, #1
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233e:	429a      	cmp	r2, r3
 8002340:	d3b3      	bcc.n	80022aa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002350:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002354:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236e:	f043 030b 	orr.w	r3, r3, #11
 8002372:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002384:	f043 030b 	orr.w	r3, r3, #11
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	e015      	b.n	80023b8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800239e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b2:	f043 030b 	orr.w	r3, r3, #11
 80023b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023dc:	461a      	mov	r2, r3
 80023de:	f003 fe43 	bl	8006068 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fd72 	bl	8005ee0 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002406:	d124      	bne.n	8002452 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f003 fe08 	bl	8006022 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fdbd 	bl	8004f96 <USB_GetDevSpeed>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681c      	ldr	r4, [r3, #0]
 8002428:	f001 f9e8 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800242c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	4620      	mov	r0, r4
 8002438:	f002 fabc 	bl	80049b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f008 fe46 	bl	800b0ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002450:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fd42 	bl	8005ee0 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b08      	cmp	r3, #8
 8002464:	d10a      	bne.n	800247c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f008 fe23 	bl	800b0b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f002 0208 	and.w	r2, r2, #8
 800247a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f003 fd2d 	bl	8005ee0 <USB_ReadInterrupts>
 8002486:	4603      	mov	r3, r0
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d122      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800249c:	2301      	movs	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
 80024a0:	e014      	b.n	80024cc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fb27 	bl	8002b14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	3301      	adds	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d3e5      	bcc.n	80024a2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fd00 	bl	8005ee0 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ea:	d13b      	bne.n	8002564 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ec:	2301      	movs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	e02b      	b.n	800254a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3340      	adds	r3, #64	; 0x40
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d115      	bne.n	8002544 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002518:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	da12      	bge.n	8002544 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	333f      	adds	r3, #63	; 0x3f
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fae8 	bl	8002b14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	3301      	adds	r3, #1
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	429a      	cmp	r2, r3
 8002552:	d3ce      	bcc.n	80024f2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fcb9 	bl	8005ee0 <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002578:	d155      	bne.n	8002626 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800257a:	2301      	movs	r3, #1
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
 800257e:	e045      	b.n	800260c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d12e      	bne.n	8002606 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da2b      	bge.n	8002606 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025be:	429a      	cmp	r2, r3
 80025c0:	d121      	bne.n	8002606 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002602:	6053      	str	r3, [r2, #4]
            break;
 8002604:	e007      	b.n	8002616 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	3301      	adds	r3, #1
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002612:	429a      	cmp	r2, r3
 8002614:	d3b4      	bcc.n	8002580 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fc58 	bl	8005ee0 <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263a:	d10a      	bne.n	8002652 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f008 fdbd 	bl	800b1bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fc42 	bl	8005ee0 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b04      	cmp	r3, #4
 8002664:	d115      	bne.n	8002692 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f008 fdad 	bl	800b1d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e000      	b.n	8002692 <HAL_PCD_IRQHandler+0x938>
      return;
 8002690:	bf00      	nop
    }
  }
}
 8002692:	3734      	adds	r7, #52	; 0x34
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}

08002698 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_PCD_SetAddress+0x1a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e013      	b.n	80026da <HAL_PCD_SetAddress+0x42>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fba0 	bl	8005e10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	4608      	mov	r0, r1
 80026ec:	4611      	mov	r1, r2
 80026ee:	461a      	mov	r2, r3
 80026f0:	4603      	mov	r3, r0
 80026f2:	70fb      	strb	r3, [r7, #3]
 80026f4:	460b      	mov	r3, r1
 80026f6:	803b      	strh	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002704:	2b00      	cmp	r3, #0
 8002706:	da0f      	bge.n	8002728 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	f003 020f 	and.w	r2, r3, #15
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	3338      	adds	r3, #56	; 0x38
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	705a      	strb	r2, [r3, #1]
 8002726:	e00f      	b.n	8002748 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 020f 	and.w	r2, r3, #15
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	b2da      	uxtb	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002754:	883a      	ldrh	r2, [r7, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	78ba      	ldrb	r2, [r7, #2]
 800275e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	785b      	ldrb	r3, [r3, #1]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002772:	78bb      	ldrb	r3, [r7, #2]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d102      	bne.n	800277e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_PCD_EP_Open+0xaa>
 8002788:	2302      	movs	r3, #2
 800278a:	e00e      	b.n	80027aa <HAL_PCD_EP_Open+0xc8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fc20 	bl	8004fe0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80027a8:	7afb      	ldrb	r3, [r7, #11]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	da0f      	bge.n	80027e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	3338      	adds	r3, #56	; 0x38
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	3304      	adds	r3, #4
 80027dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	705a      	strb	r2, [r3, #1]
 80027e4:	e00f      	b.n	8002806 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 020f 	and.w	r2, r3, #15
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_PCD_EP_Close+0x6e>
 800281c:	2302      	movs	r3, #2
 800281e:	e00e      	b.n	800283e <HAL_PCD_EP_Close+0x8c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68f9      	ldr	r1, [r7, #12]
 800282e:	4618      	mov	r0, r3
 8002830:	f002 fc5e 	bl	80050f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	460b      	mov	r3, r1
 8002854:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2200      	movs	r2, #0
 8002886:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	b2da      	uxtb	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d102      	bne.n	80028a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	6979      	ldr	r1, [r7, #20]
 80028ba:	f002 ff3d 	bl	8005738 <USB_EP0StartXfer>
 80028be:	e008      	b.n	80028d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	f002 fceb 	bl	80052a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 020f 	and.w	r2, r3, #15
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	460b      	mov	r3, r1
 800291a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291c:	7afb      	ldrb	r3, [r7, #11]
 800291e:	f003 020f 	and.w	r2, r3, #15
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	3338      	adds	r3, #56	; 0x38
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	3304      	adds	r3, #4
 8002932:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2200      	movs	r2, #0
 8002944:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2201      	movs	r2, #1
 800294a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	b2da      	uxtb	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6979      	ldr	r1, [r7, #20]
 800297e:	f002 fedb 	bl	8005738 <USB_EP0StartXfer>
 8002982:	e008      	b.n	8002996 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	f002 fc89 	bl	80052a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 020f 	and.w	r2, r3, #15
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d901      	bls.n	80029be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e050      	b.n	8002a60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da0f      	bge.n	80029e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 020f 	and.w	r2, r3, #15
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	3338      	adds	r3, #56	; 0x38
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	3304      	adds	r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	705a      	strb	r2, [r3, #1]
 80029e4:	e00d      	b.n	8002a02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_EP_SetStall+0x82>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e01e      	b.n	8002a60 <HAL_PCD_EP_SetStall+0xc0>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68f9      	ldr	r1, [r7, #12]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 f919 	bl	8005c68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	b2d9      	uxtb	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a50:	461a      	mov	r2, r3
 8002a52:	f003 fb09 	bl	8006068 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	f003 020f 	and.w	r2, r3, #15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d901      	bls.n	8002a86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e042      	b.n	8002b0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	da0f      	bge.n	8002aae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 020f 	and.w	r2, r3, #15
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	3338      	adds	r3, #56	; 0x38
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	705a      	strb	r2, [r3, #1]
 8002aac:	e00f      	b.n	8002ace <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 020f 	and.w	r2, r3, #15
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_PCD_EP_ClrStall+0x86>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e00e      	b.n	8002b0c <HAL_PCD_EP_ClrStall+0xa4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 f921 	bl	8005d44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da0c      	bge.n	8002b42 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 020f 	and.w	r2, r3, #15
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3338      	adds	r3, #56	; 0x38
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e00c      	b.n	8002b5c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	3304      	adds	r3, #4
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 ff40 	bl	80059e8 <USB_EPStopXfer>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b08a      	sub	sp, #40	; 0x28
 8002b7a:	af02      	add	r7, sp, #8
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	3338      	adds	r3, #56	; 0x38
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d901      	bls.n	8002bae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06c      	b.n	8002c88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d902      	bls.n	8002bca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3303      	adds	r3, #3
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bd2:	e02b      	b.n	8002c2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d902      	bls.n	8002bf0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	3303      	adds	r3, #3
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6919      	ldr	r1, [r3, #16]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f002 ff94 	bl	8005b3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	441a      	add	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d809      	bhi.n	8002c56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d203      	bcs.n	8002c56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1be      	bne.n	8002bd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d811      	bhi.n	8002c86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	2201      	movs	r2, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	6939      	ldr	r1, [r7, #16]
 8002c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c82:	4013      	ands	r3, r2
 8002c84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	333c      	adds	r3, #60	; 0x3c
 8002ca8:	3304      	adds	r3, #4
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d17b      	bne.n	8002dbe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	4a61      	ldr	r2, [pc, #388]	; (8002e58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	f240 80b9 	bls.w	8002e4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80b3 	beq.w	8002e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cf8:	6093      	str	r3, [r2, #8]
 8002cfa:	e0a7      	b.n	8002e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d12:	461a      	mov	r2, r3
 8002d14:	2320      	movs	r3, #32
 8002d16:	6093      	str	r3, [r2, #8]
 8002d18:	e098      	b.n	8002e4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 8093 	bne.w	8002e4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	4a4b      	ldr	r2, [pc, #300]	; (8002e58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d90f      	bls.n	8002d4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d44:	461a      	mov	r2, r3
 8002d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d4a:	6093      	str	r3, [r2, #8]
 8002d4c:	e07e      	b.n	8002e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	0159      	lsls	r1, r3, #5
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	440b      	add	r3, r1
 8002d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7a:	1ad2      	subs	r2, r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d114      	bne.n	8002db0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	f003 f964 	bl	8006068 <USB_EP0_OutStart>
 8002da0:	e006      	b.n	8002db0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	441a      	add	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f008 f946 	bl	800b048 <HAL_PCD_DataOutStageCallback>
 8002dbc:	e046      	b.n	8002e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d124      	bne.n	8002e10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de2:	6093      	str	r3, [r2, #8]
 8002de4:	e032      	b.n	8002e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2320      	movs	r3, #32
 8002e00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f008 f91d 	bl	800b048 <HAL_PCD_DataOutStageCallback>
 8002e0e:	e01d      	b.n	8002e4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d114      	bne.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d108      	bne.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	f003 f914 	bl	8006068 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f008 f8fe 	bl	800b048 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	4f54300a 	.word	0x4f54300a
 8002e5c:	4f54310a 	.word	0x4f54310a

08002e60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	333c      	adds	r3, #60	; 0x3c
 8002e78:	3304      	adds	r3, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d90e      	bls.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eac:	461a      	mov	r2, r3
 8002eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f008 f8b5 	bl	800b024 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d90c      	bls.n	8002edc <PCD_EP_OutSetupPacket_int+0x7c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d108      	bne.n	8002edc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	f003 f8c6 	bl	8006068 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	4f54300a 	.word	0x4f54300a

08002eec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f0a:	883b      	ldrh	r3, [r7, #0]
 8002f0c:	0419      	lsls	r1, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
 8002f18:	e028      	b.n	8002f6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	4413      	add	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e00d      	b.n	8002f4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	3340      	adds	r3, #64	; 0x40
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	4413      	add	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	3301      	adds	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3ec      	bcc.n	8002f2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f54:	883b      	ldrh	r3, [r7, #0]
 8002f56:	0418      	lsls	r0, r3, #16
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	4302      	orrs	r2, r0
 8002f64:	3340      	adds	r3, #64	; 0x40
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e267      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d075      	beq.n	80030be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd2:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fde:	4b85      	ldr	r3, [pc, #532]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d112      	bne.n	8003010 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fea:	4b82      	ldr	r3, [pc, #520]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff6:	d10b      	bne.n	8003010 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	4b7e      	ldr	r3, [pc, #504]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d05b      	beq.n	80030bc <HAL_RCC_OscConfig+0x108>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d157      	bne.n	80030bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e242      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003018:	d106      	bne.n	8003028 <HAL_RCC_OscConfig+0x74>
 800301a:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a75      	ldr	r2, [pc, #468]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e01d      	b.n	8003064 <HAL_RCC_OscConfig+0xb0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x98>
 8003032:	4b70      	ldr	r3, [pc, #448]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6f      	ldr	r2, [pc, #444]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6c      	ldr	r2, [pc, #432]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0xb0>
 800304c:	4b69      	ldr	r3, [pc, #420]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a68      	ldr	r2, [pc, #416]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a65      	ldr	r2, [pc, #404]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 800305e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fd ff72 	bl	8000f54 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7fd ff6e 	bl	8000f54 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e207      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0xc0>
 8003092:	e014      	b.n	80030be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fd ff5e 	bl	8000f54 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800309c:	f7fd ff5a 	bl	8000f54 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1f3      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	4b51      	ldr	r3, [pc, #324]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0xe8>
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d063      	beq.n	8003192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ca:	4b4a      	ldr	r3, [pc, #296]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d6:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d11c      	bne.n	800311c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d116      	bne.n	800311c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_RCC_OscConfig+0x152>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d001      	beq.n	8003106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e1c7      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4937      	ldr	r1, [pc, #220]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	e03a      	b.n	8003192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003124:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <HAL_RCC_OscConfig+0x244>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fd ff13 	bl	8000f54 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003132:	f7fd ff0f 	bl	8000f54 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1a8      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4925      	ldr	r1, [pc, #148]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_OscConfig+0x244>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fd fef2 	bl	8000f54 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003174:	f7fd feee 	bl	8000f54 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e187      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d036      	beq.n	800320c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_RCC_OscConfig+0x248>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fd fed2 	bl	8000f54 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b4:	f7fd fece 	bl	8000f54 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e167      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x200>
 80031d2:	e01b      	b.n	800320c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_RCC_OscConfig+0x248>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031da:	f7fd febb 	bl	8000f54 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	e00e      	b.n	8003200 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e2:	f7fd feb7 	bl	8000f54 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d907      	bls.n	8003200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e150      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
 80031f4:	40023800 	.word	0x40023800
 80031f8:	42470000 	.word	0x42470000
 80031fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ea      	bne.n	80031e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8097 	beq.w	8003348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321e:	4b81      	ldr	r3, [pc, #516]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b7d      	ldr	r3, [pc, #500]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a7c      	ldr	r2, [pc, #496]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b7a      	ldr	r3, [pc, #488]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b77      	ldr	r3, [pc, #476]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d118      	bne.n	8003288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003256:	4b74      	ldr	r3, [pc, #464]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a73      	ldr	r2, [pc, #460]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003262:	f7fd fe77 	bl	8000f54 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326a:	f7fd fe73 	bl	8000f54 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e10c      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_OscConfig+0x474>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x2ea>
 8003290:	4b64      	ldr	r3, [pc, #400]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a63      	ldr	r2, [pc, #396]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x324>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x30c>
 80032a6:	4b5f      	ldr	r3, [pc, #380]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a5e      	ldr	r2, [pc, #376]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70
 80032b2:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a5b      	ldr	r2, [pc, #364]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0x324>
 80032c0:	4b58      	ldr	r3, [pc, #352]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a57      	ldr	r2, [pc, #348]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	4b55      	ldr	r3, [pc, #340]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a54      	ldr	r2, [pc, #336]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f023 0304 	bic.w	r3, r3, #4
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fd fe38 	bl	8000f54 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fd fe34 	bl	8000f54 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0cb      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	4b49      	ldr	r3, [pc, #292]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ee      	beq.n	80032e8 <HAL_RCC_OscConfig+0x334>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330c:	f7fd fe22 	bl	8000f54 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fd fe1e 	bl	8000f54 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0b5      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ee      	bne.n	8003314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b39      	ldr	r3, [pc, #228]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	4a38      	ldr	r2, [pc, #224]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003346:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a1 	beq.w	8003494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003352:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b08      	cmp	r3, #8
 800335c:	d05c      	beq.n	8003418 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d141      	bne.n	80033ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_OscConfig+0x478>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fd fdf2 	bl	8000f54 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd fdee 	bl	8000f54 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e087      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	491b      	ldr	r1, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x478>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fd fdc7 	bl	8000f54 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fd fdc3 	bl	8000f54 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e05c      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x416>
 80033e8:	e054      	b.n	8003494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <HAL_RCC_OscConfig+0x478>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fd fdb0 	bl	8000f54 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fd fdac 	bl	8000f54 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e045      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_OscConfig+0x470>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x444>
 8003416:	e03d      	b.n	8003494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d107      	bne.n	8003430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e038      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
 8003424:	40023800 	.word	0x40023800
 8003428:	40007000 	.word	0x40007000
 800342c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x4ec>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d028      	beq.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d121      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d11a      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	3b01      	subs	r3, #1
 800347a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0cc      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b68      	ldr	r3, [pc, #416]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d90c      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0b8      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800351a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d044      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d119      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d003      	beq.n	8003562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	2b03      	cmp	r3, #3
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e067      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4934      	ldr	r1, [pc, #208]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003594:	f7fd fcde 	bl	8000f54 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fd fcda 	bl	8000f54 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e04f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 020c 	and.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1eb      	bne.n	800359c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d20c      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e032      	b.n	8003652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4916      	ldr	r1, [pc, #88]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	490e      	ldr	r1, [pc, #56]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800362a:	f000 f821 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	490a      	ldr	r1, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fb60 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023c00 	.word	0x40023c00
 8003660:	40023800 	.word	0x40023800
 8003664:	0800b6dc 	.word	0x0800b6dc
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b090      	sub	sp, #64	; 0x40
 8003676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	2300      	movs	r3, #0
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d00d      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003694:	2b08      	cmp	r3, #8
 8003696:	f200 80a1 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x16c>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x34>
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x3a>
 80036a2:	e09b      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80036a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036a8:	e09b      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036aa:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ae:	e098      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b0:	4b4f      	ldr	r3, [pc, #316]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ba:	4b4d      	ldr	r3, [pc, #308]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d028      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	2200      	movs	r2, #0
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	627a      	str	r2, [r7, #36]	; 0x24
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d8:	2100      	movs	r1, #0
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036dc:	fb03 f201 	mul.w	r2, r3, r1
 80036e0:	2300      	movs	r3, #0
 80036e2:	fb00 f303 	mul.w	r3, r0, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	4a43      	ldr	r2, [pc, #268]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80036ea:	fba0 1202 	umull	r1, r2, r0, r2
 80036ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f0:	460a      	mov	r2, r1
 80036f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80036f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f6:	4413      	add	r3, r2
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	2200      	movs	r2, #0
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	61fa      	str	r2, [r7, #28]
 8003702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800370a:	f7fc fd69 	bl	80001e0 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4613      	mov	r3, r2
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003716:	e053      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	2200      	movs	r2, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	617a      	str	r2, [r7, #20]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800372a:	f04f 0b00 	mov.w	fp, #0
 800372e:	4652      	mov	r2, sl
 8003730:	465b      	mov	r3, fp
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	0159      	lsls	r1, r3, #5
 800373c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003740:	0150      	lsls	r0, r2, #5
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	ebb2 080a 	subs.w	r8, r2, sl
 800374a:	eb63 090b 	sbc.w	r9, r3, fp
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800375a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800375e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003762:	ebb2 0408 	subs.w	r4, r2, r8
 8003766:	eb63 0509 	sbc.w	r5, r3, r9
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	00eb      	lsls	r3, r5, #3
 8003774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003778:	00e2      	lsls	r2, r4, #3
 800377a:	4614      	mov	r4, r2
 800377c:	461d      	mov	r5, r3
 800377e:	eb14 030a 	adds.w	r3, r4, sl
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	eb45 030b 	adc.w	r3, r5, fp
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003796:	4629      	mov	r1, r5
 8003798:	028b      	lsls	r3, r1, #10
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a0:	4621      	mov	r1, r4
 80037a2:	028a      	lsls	r2, r1, #10
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	2200      	movs	r2, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	60fa      	str	r2, [r7, #12]
 80037b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b4:	f7fc fd14 	bl	80001e0 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3740      	adds	r7, #64	; 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	017d7840 	.word	0x017d7840

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003818:	f7ff fff0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0b5b      	lsrs	r3, r3, #13
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	0800b6ec 	.word	0x0800b6ec

0800383c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	220f      	movs	r2, #15
 800384a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0203 	and.w	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	08db      	lsrs	r3, r3, #3
 8003876:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <HAL_RCC_GetClockConfig+0x60>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0207 	and.w	r2, r3, #7
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	601a      	str	r2, [r3, #0]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40023c00 	.word	0x40023c00

080038a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e07b      	b.n	80039aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c2:	d009      	beq.n	80038d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	61da      	str	r2, [r3, #28]
 80038ca:	e005      	b.n	80038d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd f95e 	bl	8000bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	ea42 0103 	orr.w	r1, r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	f003 0104 	and.w	r1, r3, #4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f003 0210 	and.w	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_SPI_Transmit+0x22>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e126      	b.n	8003c22 <HAL_SPI_Transmit+0x270>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039dc:	f7fd faba 	bl	8000f54 <HAL_GetTick>
 80039e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d002      	beq.n	80039f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039f6:	e10b      	b.n	8003c10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_SPI_Transmit+0x52>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a08:	e102      	b.n	8003c10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a50:	d10f      	bne.n	8003a72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d007      	beq.n	8003a90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a98:	d14b      	bne.n	8003b32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_SPI_Transmit+0xf6>
 8003aa2:	8afb      	ldrh	r3, [r7, #22]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d13e      	bne.n	8003b26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	881a      	ldrh	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	1c9a      	adds	r2, r3, #2
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003acc:	e02b      	b.n	8003b26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d112      	bne.n	8003b02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	881a      	ldrh	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b00:	e011      	b.n	8003b26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b02:	f7fd fa27 	bl	8000f54 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d803      	bhi.n	8003b1a <HAL_SPI_Transmit+0x168>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d102      	bne.n	8003b20 <HAL_SPI_Transmit+0x16e>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b24:	e074      	b.n	8003c10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ce      	bne.n	8003ace <HAL_SPI_Transmit+0x11c>
 8003b30:	e04c      	b.n	8003bcc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_SPI_Transmit+0x18e>
 8003b3a:	8afb      	ldrh	r3, [r7, #22]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d140      	bne.n	8003bc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b66:	e02c      	b.n	8003bc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d113      	bne.n	8003b9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b9c:	e011      	b.n	8003bc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b9e:	f7fd f9d9 	bl	8000f54 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d803      	bhi.n	8003bb6 <HAL_SPI_Transmit+0x204>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d102      	bne.n	8003bbc <HAL_SPI_Transmit+0x20a>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bc0:	e026      	b.n	8003c10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1cd      	bne.n	8003b68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	6839      	ldr	r1, [r7, #0]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fbcb 	bl	800436c <SPI_EndRxTxTransaction>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e000      	b.n	8003c10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b088      	sub	sp, #32
 8003c2e:	af02      	add	r7, sp, #8
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c46:	d112      	bne.n	8003c6e <HAL_SPI_Receive+0x44>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10e      	bne.n	8003c6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2204      	movs	r2, #4
 8003c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f8f1 	bl	8003e4c <HAL_SPI_TransmitReceive>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	e0ea      	b.n	8003e44 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_SPI_Receive+0x52>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e0e3      	b.n	8003e44 <HAL_SPI_Receive+0x21a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c84:	f7fd f966 	bl	8000f54 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
 8003c98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c9a:	e0ca      	b.n	8003e32 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_SPI_Receive+0x7e>
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cac:	e0c1      	b.n	8003e32 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	88fa      	ldrh	r2, [r7, #6]
 8003cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	88fa      	ldrh	r2, [r7, #6]
 8003ccc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf4:	d10f      	bne.n	8003d16 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d007      	beq.n	8003d34 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d162      	bne.n	8003e02 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d3c:	e02e      	b.n	8003d9c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d115      	bne.n	8003d78 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f103 020c 	add.w	r2, r3, #12
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d76:	e011      	b.n	8003d9c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d78:	f7fd f8ec 	bl	8000f54 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d803      	bhi.n	8003d90 <HAL_SPI_Receive+0x166>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d102      	bne.n	8003d96 <HAL_SPI_Receive+0x16c>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d102      	bne.n	8003d9c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d9a:	e04a      	b.n	8003e32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1cb      	bne.n	8003d3e <HAL_SPI_Receive+0x114>
 8003da6:	e031      	b.n	8003e0c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d113      	bne.n	8003dde <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	b292      	uxth	r2, r2
 8003dc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	1c9a      	adds	r2, r3, #2
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ddc:	e011      	b.n	8003e02 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dde:	f7fd f8b9 	bl	8000f54 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d803      	bhi.n	8003df6 <HAL_SPI_Receive+0x1cc>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d102      	bne.n	8003dfc <HAL_SPI_Receive+0x1d2>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e00:	e017      	b.n	8003e32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1cd      	bne.n	8003da8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fa45 	bl	80042a0 <SPI_EndRxTransaction>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
 8003e2e:	e000      	b.n	8003e32 <HAL_SPI_Receive+0x208>
  }

error :
 8003e30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x26>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e18a      	b.n	8004188 <HAL_SPI_TransmitReceive+0x33c>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7a:	f7fd f86b 	bl	8000f54 <HAL_GetTick>
 8003e7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d00f      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x70>
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d107      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x68>
 8003eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d003      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003eba:	e15b      	b.n	8004174 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x82>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x82>
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ed4:	e14e      	b.n	8004174 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d003      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	887a      	ldrh	r2, [r7, #2]
 8003efa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d007      	beq.n	8003f3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f46:	d178      	bne.n	800403a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x10a>
 8003f50:	8b7b      	ldrh	r3, [r7, #26]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d166      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	881a      	ldrh	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	1c9a      	adds	r2, r3, #2
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f7a:	e053      	b.n	8004024 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d11b      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x176>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d016      	beq.n	8003fc2 <HAL_SPI_TransmitReceive+0x176>
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d113      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d119      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x1b8>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d014      	beq.n	8004004 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	b292      	uxth	r2, r2
 8003fe6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	1c9a      	adds	r2, r3, #2
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004000:	2301      	movs	r3, #1
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004004:	f7fc ffa6 	bl	8000f54 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004010:	429a      	cmp	r2, r3
 8004012:	d807      	bhi.n	8004024 <HAL_SPI_TransmitReceive+0x1d8>
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d003      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004022:	e0a7      	b.n	8004174 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1a6      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x130>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1a1      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x130>
 8004038:	e07c      	b.n	8004134 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x1fc>
 8004042:	8b7b      	ldrh	r3, [r7, #26]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d16b      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	7812      	ldrb	r2, [r2, #0]
 8004054:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406e:	e057      	b.n	8004120 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b02      	cmp	r3, #2
 800407c:	d11c      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x26c>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x26c>
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d114      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	7812      	ldrb	r2, [r2, #0]
 800409a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d119      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x2ae>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d014      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f6:	2301      	movs	r3, #1
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040fa:	f7fc ff2b 	bl	8000f54 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004106:	429a      	cmp	r2, r3
 8004108:	d803      	bhi.n	8004112 <HAL_SPI_TransmitReceive+0x2c6>
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d102      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x2cc>
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800411e:	e029      	b.n	8004174 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1a2      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x224>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d19d      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f917 	bl	800436c <SPI_EndRxTxTransaction>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d006      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004150:	e010      	b.n	8004174 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	e000      	b.n	8004174 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004172:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004184:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004188:	4618      	mov	r0, r3
 800418a:	3730      	adds	r7, #48	; 0x30
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041a0:	f7fc fed8 	bl	8000f54 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	4413      	add	r3, r2
 80041ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041b0:	f7fc fed0 	bl	8000f54 <HAL_GetTick>
 80041b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041b6:	4b39      	ldr	r3, [pc, #228]	; (800429c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	015b      	lsls	r3, r3, #5
 80041bc:	0d1b      	lsrs	r3, r3, #20
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041c6:	e054      	b.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d050      	beq.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041d0:	f7fc fec0 	bl	8000f54 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d902      	bls.n	80041e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d13d      	bne.n	8004262 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fe:	d111      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	d004      	beq.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004212:	d107      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422c:	d10f      	bne.n	800424e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e017      	b.n	8004292 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3b01      	subs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	429a      	cmp	r2, r3
 800428e:	d19b      	bne.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000000 	.word	0x20000000

080042a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b4:	d111      	bne.n	80042da <SPI_EndRxTransaction+0x3a>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042be:	d004      	beq.n	80042ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c8:	d107      	bne.n	80042da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e2:	d12a      	bne.n	800433a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ec:	d012      	beq.n	8004314 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2180      	movs	r1, #128	; 0x80
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff ff49 	bl	8004190 <SPI_WaitFlagStateUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d02d      	beq.n	8004360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e026      	b.n	8004362 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	2101      	movs	r1, #1
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff ff36 	bl	8004190 <SPI_WaitFlagStateUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01a      	beq.n	8004360 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e013      	b.n	8004362 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2200      	movs	r2, #0
 8004342:	2101      	movs	r1, #1
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff ff23 	bl	8004190 <SPI_WaitFlagStateUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e000      	b.n	8004362 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004378:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <SPI_EndRxTxTransaction+0x7c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <SPI_EndRxTxTransaction+0x80>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	0d5b      	lsrs	r3, r3, #21
 8004384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004388:	fb02 f303 	mul.w	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004396:	d112      	bne.n	80043be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	2180      	movs	r1, #128	; 0x80
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff fef4 	bl	8004190 <SPI_WaitFlagStateUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d016      	beq.n	80043dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e00f      	b.n	80043de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b80      	cmp	r3, #128	; 0x80
 80043d6:	d0f2      	beq.n	80043be <SPI_EndRxTxTransaction+0x52>
 80043d8:	e000      	b.n	80043dc <SPI_EndRxTxTransaction+0x70>
        break;
 80043da:	bf00      	nop
  }

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000000 	.word	0x20000000
 80043ec:	165e9f81 	.word	0x165e9f81

080043f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e041      	b.n	8004486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f839 	bl	800448e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f000 f9ca 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d001      	beq.n	80044bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e044      	b.n	8004546 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <HAL_TIM_Base_Start_IT+0xb0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d018      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x6c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d013      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x6c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <HAL_TIM_Base_Start_IT+0xb4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00e      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x6c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a19      	ldr	r2, [pc, #100]	; (800455c <HAL_TIM_Base_Start_IT+0xb8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x6c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a17      	ldr	r2, [pc, #92]	; (8004560 <HAL_TIM_Base_Start_IT+0xbc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x6c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a16      	ldr	r2, [pc, #88]	; (8004564 <HAL_TIM_Base_Start_IT+0xc0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d111      	bne.n	8004534 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b06      	cmp	r3, #6
 8004520:	d010      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004532:	e007      	b.n	8004544 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40014000 	.word	0x40014000

08004568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0202 	mvn.w	r2, #2
 8004594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8ee 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8e0 	bl	8004778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f8f1 	bl	80047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d122      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d11b      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0204 	mvn.w	r2, #4
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8c4 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8b6 	bl	8004778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f8c7 	bl	80047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d122      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d11b      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0208 	mvn.w	r2, #8
 800463c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2204      	movs	r2, #4
 8004642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f89a 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f88c 	bl	8004778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f89d 	bl	80047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0210 	mvn.w	r2, #16
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2208      	movs	r2, #8
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f870 	bl	800478c <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f862 	bl	8004778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f873 	bl	80047a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10e      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0201 	mvn.w	r2, #1
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc fa20 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d107      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8e2 	bl	80048dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d10e      	bne.n	8004744 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d107      	bne.n	8004744 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800473c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f838 	bl	80047b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b20      	cmp	r3, #32
 8004750:	d10e      	bne.n	8004770 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b20      	cmp	r3, #32
 800475e:	d107      	bne.n	8004770 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0220 	mvn.w	r2, #32
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8ac 	bl	80048c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a34      	ldr	r2, [pc, #208]	; (80048ac <TIM_Base_SetConfig+0xe4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00f      	beq.n	8004800 <TIM_Base_SetConfig+0x38>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e6:	d00b      	beq.n	8004800 <TIM_Base_SetConfig+0x38>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a31      	ldr	r2, [pc, #196]	; (80048b0 <TIM_Base_SetConfig+0xe8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_Base_SetConfig+0x38>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a30      	ldr	r2, [pc, #192]	; (80048b4 <TIM_Base_SetConfig+0xec>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_Base_SetConfig+0x38>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a2f      	ldr	r2, [pc, #188]	; (80048b8 <TIM_Base_SetConfig+0xf0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d108      	bne.n	8004812 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a25      	ldr	r2, [pc, #148]	; (80048ac <TIM_Base_SetConfig+0xe4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d01b      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004820:	d017      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a22      	ldr	r2, [pc, #136]	; (80048b0 <TIM_Base_SetConfig+0xe8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <TIM_Base_SetConfig+0xec>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00f      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <TIM_Base_SetConfig+0xf0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00b      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1f      	ldr	r2, [pc, #124]	; (80048bc <TIM_Base_SetConfig+0xf4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1e      	ldr	r2, [pc, #120]	; (80048c0 <TIM_Base_SetConfig+0xf8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <TIM_Base_SetConfig+0xfc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a08      	ldr	r2, [pc, #32]	; (80048ac <TIM_Base_SetConfig+0xe4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d103      	bne.n	8004898 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	615a      	str	r2, [r3, #20]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800

080048c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048f0:	b084      	sub	sp, #16
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	f107 001c 	add.w	r0, r7, #28
 80048fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	2b01      	cmp	r3, #1
 8004906:	d122      	bne.n	800494e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800491c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f001 fbee 	bl	8006124 <USB_CoreReset>
 8004948:	4603      	mov	r3, r0
 800494a:	73fb      	strb	r3, [r7, #15]
 800494c:	e01a      	b.n	8004984 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f001 fbe2 	bl	8006124 <USB_CoreReset>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
 8004976:	e005      	b.n	8004984 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	2b01      	cmp	r3, #1
 8004988:	d10b      	bne.n	80049a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f043 0206 	orr.w	r2, r3, #6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f043 0220 	orr.w	r2, r3, #32
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049ae:	b004      	add	sp, #16
 80049b0:	4770      	bx	lr
	...

080049b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d165      	bne.n	8004a94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4a41      	ldr	r2, [pc, #260]	; (8004ad0 <USB_SetTurnaroundTime+0x11c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d906      	bls.n	80049de <USB_SetTurnaroundTime+0x2a>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4a40      	ldr	r2, [pc, #256]	; (8004ad4 <USB_SetTurnaroundTime+0x120>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d202      	bcs.n	80049de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049d8:	230f      	movs	r3, #15
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e062      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4a3c      	ldr	r2, [pc, #240]	; (8004ad4 <USB_SetTurnaroundTime+0x120>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d306      	bcc.n	80049f4 <USB_SetTurnaroundTime+0x40>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4a3b      	ldr	r2, [pc, #236]	; (8004ad8 <USB_SetTurnaroundTime+0x124>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d202      	bcs.n	80049f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049ee:	230e      	movs	r3, #14
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e057      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4a38      	ldr	r2, [pc, #224]	; (8004ad8 <USB_SetTurnaroundTime+0x124>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d306      	bcc.n	8004a0a <USB_SetTurnaroundTime+0x56>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4a37      	ldr	r2, [pc, #220]	; (8004adc <USB_SetTurnaroundTime+0x128>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d202      	bcs.n	8004a0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a04:	230d      	movs	r3, #13
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	e04c      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4a33      	ldr	r2, [pc, #204]	; (8004adc <USB_SetTurnaroundTime+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d306      	bcc.n	8004a20 <USB_SetTurnaroundTime+0x6c>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4a32      	ldr	r2, [pc, #200]	; (8004ae0 <USB_SetTurnaroundTime+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d802      	bhi.n	8004a20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e041      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4a2f      	ldr	r2, [pc, #188]	; (8004ae0 <USB_SetTurnaroundTime+0x12c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d906      	bls.n	8004a36 <USB_SetTurnaroundTime+0x82>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ae4 <USB_SetTurnaroundTime+0x130>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d802      	bhi.n	8004a36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a30:	230b      	movs	r3, #11
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e036      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4a2a      	ldr	r2, [pc, #168]	; (8004ae4 <USB_SetTurnaroundTime+0x130>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d906      	bls.n	8004a4c <USB_SetTurnaroundTime+0x98>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4a29      	ldr	r2, [pc, #164]	; (8004ae8 <USB_SetTurnaroundTime+0x134>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d802      	bhi.n	8004a4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a46:	230a      	movs	r3, #10
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e02b      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <USB_SetTurnaroundTime+0x134>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d906      	bls.n	8004a62 <USB_SetTurnaroundTime+0xae>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4a25      	ldr	r2, [pc, #148]	; (8004aec <USB_SetTurnaroundTime+0x138>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d202      	bcs.n	8004a62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a5c:	2309      	movs	r3, #9
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e020      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4a21      	ldr	r2, [pc, #132]	; (8004aec <USB_SetTurnaroundTime+0x138>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d306      	bcc.n	8004a78 <USB_SetTurnaroundTime+0xc4>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <USB_SetTurnaroundTime+0x13c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d802      	bhi.n	8004a78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a72:	2308      	movs	r3, #8
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e015      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <USB_SetTurnaroundTime+0x13c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d906      	bls.n	8004a8e <USB_SetTurnaroundTime+0xda>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <USB_SetTurnaroundTime+0x140>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d202      	bcs.n	8004a8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a88:	2307      	movs	r3, #7
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e00a      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a8e:	2306      	movs	r3, #6
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e007      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a9a:	2309      	movs	r3, #9
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e001      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004aa0:	2309      	movs	r3, #9
 8004aa2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	029b      	lsls	r3, r3, #10
 8004ab8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	00d8acbf 	.word	0x00d8acbf
 8004ad4:	00e4e1c0 	.word	0x00e4e1c0
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	01067380 	.word	0x01067380
 8004ae0:	011a499f 	.word	0x011a499f
 8004ae4:	01312cff 	.word	0x01312cff
 8004ae8:	014ca43f 	.word	0x014ca43f
 8004aec:	016e3600 	.word	0x016e3600
 8004af0:	01a6ab1f 	.word	0x01a6ab1f
 8004af4:	01e84800 	.word	0x01e84800

08004af8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f043 0201 	orr.w	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f023 0201 	bic.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d115      	bne.n	8004b8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f7fc f9fe 	bl	8000f6c <HAL_Delay>
      ms++;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3301      	adds	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f001 fa45 	bl	8006006 <USB_GetMode>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d01e      	beq.n	8004bc0 <USB_SetCurrentMode+0x84>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b31      	cmp	r3, #49	; 0x31
 8004b86:	d9f0      	bls.n	8004b6a <USB_SetCurrentMode+0x2e>
 8004b88:	e01a      	b.n	8004bc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d115      	bne.n	8004bbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	f7fc f9e5 	bl	8000f6c <HAL_Delay>
      ms++;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f001 fa2c 	bl	8006006 <USB_GetMode>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <USB_SetCurrentMode+0x84>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b31      	cmp	r3, #49	; 0x31
 8004bb8:	d9f0      	bls.n	8004b9c <USB_SetCurrentMode+0x60>
 8004bba:	e001      	b.n	8004bc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e005      	b.n	8004bcc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b32      	cmp	r3, #50	; 0x32
 8004bc4:	d101      	bne.n	8004bca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e009      	b.n	8004c08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3340      	adds	r3, #64	; 0x40
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3301      	adds	r3, #1
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b0e      	cmp	r3, #14
 8004c0c:	d9f2      	bls.n	8004bf4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11c      	bne.n	8004c4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c22:	f043 0302 	orr.w	r3, r3, #2
 8004c26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c4c:	e00b      	b.n	8004c66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	4619      	mov	r1, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c80:	461a      	mov	r2, r3
 8004c82:	680b      	ldr	r3, [r1, #0]
 8004c84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10c      	bne.n	8004ca6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c92:	2100      	movs	r1, #0
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f965 	bl	8004f64 <USB_SetDevSpeed>
 8004c9a:	e008      	b.n	8004cae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f960 	bl	8004f64 <USB_SetDevSpeed>
 8004ca4:	e003      	b.n	8004cae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ca6:	2103      	movs	r1, #3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f95b 	bl	8004f64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cae:	2110      	movs	r1, #16
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8f3 	bl	8004e9c <USB_FlushTxFifo>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f91f 	bl	8004f04 <USB_FlushRxFifo>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	e043      	b.n	8004d82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d10:	d118      	bne.n	8004d44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	461a      	mov	r2, r3
 8004d26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e013      	b.n	8004d56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e008      	b.n	8004d56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	461a      	mov	r2, r3
 8004d52:	2300      	movs	r3, #0
 8004d54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d62:	461a      	mov	r2, r3
 8004d64:	2300      	movs	r3, #0
 8004d66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	461a      	mov	r2, r3
 8004d76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d3b7      	bcc.n	8004cfa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	e043      	b.n	8004e18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004da6:	d118      	bne.n	8004dda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e013      	b.n	8004dec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	e008      	b.n	8004dec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	461a      	mov	r2, r3
 8004de8:	2300      	movs	r3, #0
 8004dea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	3301      	adds	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d3b7      	bcc.n	8004d90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f043 0210 	orr.w	r2, r3, #16
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <USB_DevInit+0x2c4>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f043 0208 	orr.w	r2, r3, #8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d107      	bne.n	8004e88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e94:	b004      	add	sp, #16
 8004e96:	4770      	bx	lr
 8004e98:	803c3800 	.word	0x803c3800

08004e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <USB_FlushTxFifo+0x64>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e01b      	b.n	8004ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	daf2      	bge.n	8004eaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	019b      	lsls	r3, r3, #6
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <USB_FlushTxFifo+0x64>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e006      	b.n	8004ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d0f0      	beq.n	8004ed4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	00030d40 	.word	0x00030d40

08004f04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a11      	ldr	r2, [pc, #68]	; (8004f60 <USB_FlushRxFifo+0x5c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e018      	b.n	8004f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	daf2      	bge.n	8004f10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2210      	movs	r2, #16
 8004f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <USB_FlushRxFifo+0x5c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e006      	b.n	8004f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d0f0      	beq.n	8004f34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	00030d40 	.word	0x00030d40

08004f64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	68f9      	ldr	r1, [r7, #12]
 8004f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0306 	and.w	r3, r3, #6
 8004fae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	75fb      	strb	r3, [r7, #23]
 8004fba:	e00a      	b.n	8004fd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d002      	beq.n	8004fc8 <USB_GetDevSpeed+0x32>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b06      	cmp	r3, #6
 8004fc6:	d102      	bne.n	8004fce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	75fb      	strb	r3, [r7, #23]
 8004fcc:	e001      	b.n	8004fd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fce:	230f      	movs	r3, #15
 8004fd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	785b      	ldrb	r3, [r3, #1]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d13a      	bne.n	8005072 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	2101      	movs	r1, #1
 800500e:	fa01 f303 	lsl.w	r3, r1, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	68f9      	ldr	r1, [r7, #12]
 8005016:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800501a:	4313      	orrs	r3, r2
 800501c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d155      	bne.n	80050e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	791b      	ldrb	r3, [r3, #4]
 800504e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005050:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	059b      	lsls	r3, r3, #22
 8005056:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005058:	4313      	orrs	r3, r2
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e036      	b.n	80050e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	2101      	movs	r1, #1
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	041b      	lsls	r3, r3, #16
 800508a:	68f9      	ldr	r1, [r7, #12]
 800508c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005090:	4313      	orrs	r3, r2
 8005092:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d11a      	bne.n	80050e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	791b      	ldrb	r3, [r3, #4]
 80050c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050c6:	430b      	orrs	r3, r1
 80050c8:	4313      	orrs	r3, r2
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	785b      	ldrb	r3, [r3, #1]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d161      	bne.n	80051d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800511e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005122:	d11f      	bne.n	8005164 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005142:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005162:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	2101      	movs	r1, #1
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	43db      	mvns	r3, r3
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005184:	4013      	ands	r3, r2
 8005186:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	2101      	movs	r1, #1
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	b29b      	uxth	r3, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a8:	4013      	ands	r3, r2
 80051aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	0159      	lsls	r1, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	440b      	add	r3, r1
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	4619      	mov	r1, r3
 80051c8:	4b35      	ldr	r3, [pc, #212]	; (80052a0 <USB_DeactivateEndpoint+0x1b0>)
 80051ca:	4013      	ands	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]
 80051ce:	e060      	b.n	8005292 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e6:	d11f      	bne.n	8005228 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005206:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005226:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	2101      	movs	r1, #1
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	43db      	mvns	r3, r3
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005248:	4013      	ands	r3, r2
 800524a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	43db      	mvns	r3, r3
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800526c:	4013      	ands	r3, r2
 800526e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	0159      	lsls	r1, r3, #5
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	440b      	add	r3, r1
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	4619      	mov	r1, r3
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <USB_DeactivateEndpoint+0x1b4>)
 800528e:	4013      	ands	r3, r2
 8005290:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	ec337800 	.word	0xec337800
 80052a4:	eff37800 	.word	0xeff37800

080052a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	f040 815c 	bne.w	8005582 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d132      	bne.n	8005338 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	440a      	add	r2, r1
 800530c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005314:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005330:	0cdb      	lsrs	r3, r3, #19
 8005332:	04db      	lsls	r3, r3, #19
 8005334:	6113      	str	r3, [r2, #16]
 8005336:	e074      	b.n	8005422 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005352:	0cdb      	lsrs	r3, r3, #19
 8005354:	04db      	lsls	r3, r3, #19
 8005356:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005376:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800537a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6999      	ldr	r1, [r3, #24]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	440b      	add	r3, r1
 8005394:	1e59      	subs	r1, r3, #1
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	fbb1 f3f3 	udiv	r3, r1, r3
 800539e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053a0:	4b9d      	ldr	r3, [pc, #628]	; (8005618 <USB_EPStartXfer+0x370>)
 80053a2:	400b      	ands	r3, r1
 80053a4:	69b9      	ldr	r1, [r7, #24]
 80053a6:	0148      	lsls	r0, r1, #5
 80053a8:	69f9      	ldr	r1, [r7, #28]
 80053aa:	4401      	add	r1, r0
 80053ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053b0:	4313      	orrs	r3, r2
 80053b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ca:	69b9      	ldr	r1, [r7, #24]
 80053cc:	0148      	lsls	r0, r1, #5
 80053ce:	69f9      	ldr	r1, [r7, #28]
 80053d0:	4401      	add	r1, r0
 80053d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053d6:	4313      	orrs	r3, r2
 80053d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	791b      	ldrb	r3, [r3, #4]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d11f      	bne.n	8005422 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005400:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005420:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d14b      	bne.n	80054c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	461a      	mov	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	791b      	ldrb	r3, [r3, #4]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d128      	bne.n	800549e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d110      	bne.n	800547e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e00f      	b.n	800549e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e133      	b.n	8005728 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	791b      	ldrb	r3, [r3, #4]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d015      	beq.n	8005514 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 811b 	beq.w	8005728 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	2101      	movs	r1, #1
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	69f9      	ldr	r1, [r7, #28]
 800550a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800550e:	4313      	orrs	r3, r2
 8005510:	634b      	str	r3, [r1, #52]	; 0x34
 8005512:	e109      	b.n	8005728 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005520:	2b00      	cmp	r3, #0
 8005522:	d110      	bne.n	8005546 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e00f      	b.n	8005566 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6919      	ldr	r1, [r3, #16]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	781a      	ldrb	r2, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	b298      	uxth	r0, r3
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4603      	mov	r3, r0
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fade 	bl	8005b3c <USB_WritePacket>
 8005580:	e0d2      	b.n	8005728 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559c:	0cdb      	lsrs	r3, r3, #19
 800559e:	04db      	lsls	r3, r3, #19
 80055a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d126      	bne.n	800561c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	0148      	lsls	r0, r1, #5
 80055e8:	69f9      	ldr	r1, [r7, #28]
 80055ea:	4401      	add	r1, r0
 80055ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055f0:	4313      	orrs	r3, r2
 80055f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005612:	6113      	str	r3, [r2, #16]
 8005614:	e03a      	b.n	800568c <USB_EPStartXfer+0x3e4>
 8005616:	bf00      	nop
 8005618:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4413      	add	r3, r2
 8005626:	1e5a      	subs	r2, r3, #1
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	8afa      	ldrh	r2, [r7, #22]
 8005638:	fb03 f202 	mul.w	r2, r3, r2
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	8afb      	ldrh	r3, [r7, #22]
 8005650:	04d9      	lsls	r1, r3, #19
 8005652:	4b38      	ldr	r3, [pc, #224]	; (8005734 <USB_EPStartXfer+0x48c>)
 8005654:	400b      	ands	r3, r1
 8005656:	69b9      	ldr	r1, [r7, #24]
 8005658:	0148      	lsls	r0, r1, #5
 800565a:	69f9      	ldr	r1, [r7, #28]
 800565c:	4401      	add	r1, r0
 800565e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005662:	4313      	orrs	r3, r2
 8005664:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567c:	69b9      	ldr	r1, [r7, #24]
 800567e:	0148      	lsls	r0, r1, #5
 8005680:	69f9      	ldr	r1, [r7, #28]
 8005682:	4401      	add	r1, r0
 8005684:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005688:	4313      	orrs	r3, r2
 800568a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d10d      	bne.n	80056ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6919      	ldr	r1, [r3, #16]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	460a      	mov	r2, r1
 80056ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	791b      	ldrb	r3, [r3, #4]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d128      	bne.n	8005708 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d110      	bne.n	80056e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e00f      	b.n	8005708 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005706:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005726:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	1ff80000 	.word	0x1ff80000

08005738 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 80ce 	bne.w	80058f6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d132      	bne.n	80057c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005780:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	0cdb      	lsrs	r3, r3, #19
 80057c2:	04db      	lsls	r3, r3, #19
 80057c4:	6113      	str	r3, [r2, #16]
 80057c6:	e04e      	b.n	8005866 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e2:	0cdb      	lsrs	r3, r3, #19
 80057e4:	04db      	lsls	r3, r3, #19
 80057e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800580a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	699a      	ldr	r2, [r3, #24]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800583e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005856:	6939      	ldr	r1, [r7, #16]
 8005858:	0148      	lsls	r0, r1, #5
 800585a:	6979      	ldr	r1, [r7, #20]
 800585c:	4401      	add	r1, r0
 800585e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d11e      	bne.n	80058aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d009      	beq.n	8005888 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	461a      	mov	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	e097      	b.n	80059da <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8083 	beq.w	80059da <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	2101      	movs	r1, #1
 80058e6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ea:	6979      	ldr	r1, [r7, #20]
 80058ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f0:	4313      	orrs	r3, r2
 80058f2:	634b      	str	r3, [r1, #52]	; 0x34
 80058f4:	e071      	b.n	80059da <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005910:	0cdb      	lsrs	r3, r3, #19
 8005912:	04db      	lsls	r3, r3, #19
 8005914:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005930:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005934:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005938:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005988:	6939      	ldr	r1, [r7, #16]
 800598a:	0148      	lsls	r0, r1, #5
 800598c:	6979      	ldr	r1, [r7, #20]
 800598e:	4401      	add	r1, r0
 8005990:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005994:	4313      	orrs	r3, r2
 8005996:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d10d      	bne.n	80059ba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6919      	ldr	r1, [r3, #16]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	460a      	mov	r2, r1
 80059b8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d14a      	bne.n	8005a9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a1e:	f040 8086 	bne.w	8005b2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d902      	bls.n	8005a80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a7e:	e056      	b.n	8005b2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a98:	d0e7      	beq.n	8005a6a <USB_EPStopXfer+0x82>
 8005a9a:	e048      	b.n	8005b2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab4:	d13b      	bne.n	8005b2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	7812      	ldrb	r2, [r2, #0]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ad8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005afc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3301      	adds	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d902      	bls.n	8005b14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	75fb      	strb	r3, [r7, #23]
          break;
 8005b12:	e00c      	b.n	8005b2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b2c:	d0e7      	beq.n	8005afe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4611      	mov	r1, r2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	71fb      	strb	r3, [r7, #7]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d123      	bne.n	8005baa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b62:	88bb      	ldrh	r3, [r7, #4]
 8005b64:	3303      	adds	r3, #3
 8005b66:	089b      	lsrs	r3, r3, #2
 8005b68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	e018      	b.n	8005ba2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	031a      	lsls	r2, r3, #12
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d3e2      	bcc.n	8005b70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3724      	adds	r7, #36	; 0x24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b08b      	sub	sp, #44	; 0x2c
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	089b      	lsrs	r3, r3, #2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	e014      	b.n	8005c0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	3301      	adds	r3, #1
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	3301      	adds	r3, #1
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	623b      	str	r3, [r7, #32]
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d3e6      	bcc.n	8005be4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c16:	8bfb      	ldrh	r3, [r7, #30]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01e      	beq.n	8005c5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c26:	461a      	mov	r2, r3
 8005c28:	f107 0310 	add.w	r3, r7, #16
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	701a      	strb	r2, [r3, #0]
      i++;
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	3301      	adds	r3, #1
 8005c46:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c4e:	8bfb      	ldrh	r3, [r7, #30]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c54:	8bfb      	ldrh	r3, [r7, #30]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1ea      	bne.n	8005c30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	372c      	adds	r7, #44	; 0x2c
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d12c      	bne.n	8005cde <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	db12      	blt.n	8005cbc <USB_EPSetStall+0x54>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00f      	beq.n	8005cbc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e02b      	b.n	8005d36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	db12      	blt.n	8005d16 <USB_EPSetStall+0xae>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00f      	beq.n	8005d16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d128      	bne.n	8005db2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	791b      	ldrb	r3, [r3, #4]
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d003      	beq.n	8005d90 <USB_EPClearStall+0x4c>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	791b      	ldrb	r3, [r3, #4]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d138      	bne.n	8005e02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e027      	b.n	8005e02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	791b      	ldrb	r3, [r3, #4]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d003      	beq.n	8005de2 <USB_EPClearStall+0x9e>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	791b      	ldrb	r3, [r3, #4]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d10f      	bne.n	8005e02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e44:	68f9      	ldr	r1, [r7, #12]
 8005e46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8a:	f023 0302 	bic.w	r3, r3, #2
 8005e8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005eb8:	f023 0303 	bic.w	r3, r3, #3
 8005ebc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	4013      	ands	r3, r2
 8005f28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	0c1b      	lsrs	r3, r3, #16
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	b29b      	uxth	r3, r3
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fcc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fda:	01db      	lsls	r3, r3, #7
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f003 0301 	and.w	r3, r3, #1
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006040:	f023 0307 	bic.w	r3, r3, #7
 8006044:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006058:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	460b      	mov	r3, r1
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	333c      	adds	r3, #60	; 0x3c
 800607e:	3304      	adds	r3, #4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4a26      	ldr	r2, [pc, #152]	; (8006120 <USB_EP0_OutStart+0xb8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d90a      	bls.n	80060a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800609c:	d101      	bne.n	80060a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e037      	b.n	8006112 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a8:	461a      	mov	r2, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d0:	f043 0318 	orr.w	r3, r3, #24
 80060d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80060e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80060ea:	7afb      	ldrb	r3, [r7, #11]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10f      	bne.n	8006110 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	461a      	mov	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800610e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	4f54300a 	.word	0x4f54300a

08006124 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a13      	ldr	r2, [pc, #76]	; (8006188 <USB_CoreReset+0x64>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e01b      	b.n	800617a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	daf2      	bge.n	8006130 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f043 0201 	orr.w	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a09      	ldr	r2, [pc, #36]	; (8006188 <USB_CoreReset+0x64>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d901      	bls.n	800616c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e006      	b.n	800617a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b01      	cmp	r3, #1
 8006176:	d0f0      	beq.n	800615a <USB_CoreReset+0x36>

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	00030d40 	.word	0x00030d40

0800618c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006198:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800619c:	f005 f9b4 	bl	800b508 <USBD_static_malloc>
 80061a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	32b0      	adds	r2, #176	; 0xb0
 80061b2:	2100      	movs	r1, #0
 80061b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80061b8:	2302      	movs	r3, #2
 80061ba:	e0d4      	b.n	8006366 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80061bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80061c0:	2100      	movs	r1, #0
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f005 fa16 	bl	800b5f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	32b0      	adds	r2, #176	; 0xb0
 80061d2:	68f9      	ldr	r1, [r7, #12]
 80061d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	32b0      	adds	r2, #176	; 0xb0
 80061e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	7c1b      	ldrb	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d138      	bne.n	8006266 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061f4:	4b5e      	ldr	r3, [pc, #376]	; (8006370 <USBD_CDC_Init+0x1e4>)
 80061f6:	7819      	ldrb	r1, [r3, #0]
 80061f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061fc:	2202      	movs	r2, #2
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f005 f85f 	bl	800b2c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006204:	4b5a      	ldr	r3, [pc, #360]	; (8006370 <USBD_CDC_Init+0x1e4>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	3324      	adds	r3, #36	; 0x24
 800621a:	2201      	movs	r2, #1
 800621c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800621e:	4b55      	ldr	r3, [pc, #340]	; (8006374 <USBD_CDC_Init+0x1e8>)
 8006220:	7819      	ldrb	r1, [r3, #0]
 8006222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006226:	2202      	movs	r2, #2
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f005 f84a 	bl	800b2c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800622e:	4b51      	ldr	r3, [pc, #324]	; (8006374 <USBD_CDC_Init+0x1e8>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f003 020f 	and.w	r2, r3, #15
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006246:	2201      	movs	r2, #1
 8006248:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800624a:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <USBD_CDC_Init+0x1ec>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	f003 020f 	and.w	r2, r3, #15
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	3326      	adds	r3, #38	; 0x26
 8006260:	2210      	movs	r2, #16
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e035      	b.n	80062d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006266:	4b42      	ldr	r3, [pc, #264]	; (8006370 <USBD_CDC_Init+0x1e4>)
 8006268:	7819      	ldrb	r1, [r3, #0]
 800626a:	2340      	movs	r3, #64	; 0x40
 800626c:	2202      	movs	r2, #2
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f005 f827 	bl	800b2c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006274:	4b3e      	ldr	r3, [pc, #248]	; (8006370 <USBD_CDC_Init+0x1e4>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 020f 	and.w	r2, r3, #15
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	3324      	adds	r3, #36	; 0x24
 800628a:	2201      	movs	r2, #1
 800628c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800628e:	4b39      	ldr	r3, [pc, #228]	; (8006374 <USBD_CDC_Init+0x1e8>)
 8006290:	7819      	ldrb	r1, [r3, #0]
 8006292:	2340      	movs	r3, #64	; 0x40
 8006294:	2202      	movs	r2, #2
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f005 f813 	bl	800b2c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800629c:	4b35      	ldr	r3, [pc, #212]	; (8006374 <USBD_CDC_Init+0x1e8>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f003 020f 	and.w	r2, r3, #15
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	440b      	add	r3, r1
 80062b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062b4:	2201      	movs	r2, #1
 80062b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80062b8:	4b2f      	ldr	r3, [pc, #188]	; (8006378 <USBD_CDC_Init+0x1ec>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	3326      	adds	r3, #38	; 0x26
 80062ce:	2210      	movs	r2, #16
 80062d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062d2:	4b29      	ldr	r3, [pc, #164]	; (8006378 <USBD_CDC_Init+0x1ec>)
 80062d4:	7819      	ldrb	r1, [r3, #0]
 80062d6:	2308      	movs	r3, #8
 80062d8:	2203      	movs	r2, #3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f004 fff1 	bl	800b2c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80062e0:	4b25      	ldr	r3, [pc, #148]	; (8006378 <USBD_CDC_Init+0x1ec>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f003 020f 	and.w	r2, r3, #15
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	3324      	adds	r3, #36	; 0x24
 80062f6:	2201      	movs	r2, #1
 80062f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	33b0      	adds	r3, #176	; 0xb0
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006330:	2302      	movs	r3, #2
 8006332:	e018      	b.n	8006366 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	7c1b      	ldrb	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800633c:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <USBD_CDC_Init+0x1e8>)
 800633e:	7819      	ldrb	r1, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f005 f8a8 	bl	800b4a0 <USBD_LL_PrepareReceive>
 8006350:	e008      	b.n	8006364 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006352:	4b08      	ldr	r3, [pc, #32]	; (8006374 <USBD_CDC_Init+0x1e8>)
 8006354:	7819      	ldrb	r1, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800635c:	2340      	movs	r3, #64	; 0x40
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f005 f89e 	bl	800b4a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000093 	.word	0x20000093
 8006374:	20000094 	.word	0x20000094
 8006378:	20000095 	.word	0x20000095

0800637c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006388:	4b3a      	ldr	r3, [pc, #232]	; (8006474 <USBD_CDC_DeInit+0xf8>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f004 ffbd 	bl	800b30e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006394:	4b37      	ldr	r3, [pc, #220]	; (8006474 <USBD_CDC_DeInit+0xf8>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f003 020f 	and.w	r2, r3, #15
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	3324      	adds	r3, #36	; 0x24
 80063aa:	2200      	movs	r2, #0
 80063ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80063ae:	4b32      	ldr	r3, [pc, #200]	; (8006478 <USBD_CDC_DeInit+0xfc>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f004 ffaa 	bl	800b30e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80063ba:	4b2f      	ldr	r3, [pc, #188]	; (8006478 <USBD_CDC_DeInit+0xfc>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f003 020f 	and.w	r2, r3, #15
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063d2:	2200      	movs	r2, #0
 80063d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80063d6:	4b29      	ldr	r3, [pc, #164]	; (800647c <USBD_CDC_DeInit+0x100>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f004 ff96 	bl	800b30e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80063e2:	4b26      	ldr	r3, [pc, #152]	; (800647c <USBD_CDC_DeInit+0x100>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	f003 020f 	and.w	r2, r3, #15
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	2200      	movs	r2, #0
 80063fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80063fc:	4b1f      	ldr	r3, [pc, #124]	; (800647c <USBD_CDC_DeInit+0x100>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f003 020f 	and.w	r2, r3, #15
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	3326      	adds	r3, #38	; 0x26
 8006412:	2200      	movs	r2, #0
 8006414:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	32b0      	adds	r2, #176	; 0xb0
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01f      	beq.n	8006468 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	33b0      	adds	r3, #176	; 0xb0
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	32b0      	adds	r2, #176	; 0xb0
 8006446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644a:	4618      	mov	r0, r3
 800644c:	f005 f86a 	bl	800b524 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	32b0      	adds	r2, #176	; 0xb0
 800645a:	2100      	movs	r1, #0
 800645c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000093 	.word	0x20000093
 8006478:	20000094 	.word	0x20000094
 800647c:	20000095 	.word	0x20000095

08006480 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	32b0      	adds	r2, #176	; 0xb0
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e0bf      	b.n	8006630 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d050      	beq.n	800655e <USBD_CDC_Setup+0xde>
 80064bc:	2b20      	cmp	r3, #32
 80064be:	f040 80af 	bne.w	8006620 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	88db      	ldrh	r3, [r3, #6]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d03a      	beq.n	8006540 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	b25b      	sxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	da1b      	bge.n	800650c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	33b0      	adds	r3, #176	; 0xb0
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80064ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	88d2      	ldrh	r2, [r2, #6]
 80064f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	88db      	ldrh	r3, [r3, #6]
 80064f6:	2b07      	cmp	r3, #7
 80064f8:	bf28      	it	cs
 80064fa:	2307      	movcs	r3, #7
 80064fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	89fa      	ldrh	r2, [r7, #14]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fd43 	bl	8007f90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800650a:	e090      	b.n	800662e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	785a      	ldrb	r2, [r3, #1]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	88db      	ldrh	r3, [r3, #6]
 800651a:	2b3f      	cmp	r3, #63	; 0x3f
 800651c:	d803      	bhi.n	8006526 <USBD_CDC_Setup+0xa6>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	88db      	ldrh	r3, [r3, #6]
 8006522:	b2da      	uxtb	r2, r3
 8006524:	e000      	b.n	8006528 <USBD_CDC_Setup+0xa8>
 8006526:	2240      	movs	r2, #64	; 0x40
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800652e:	6939      	ldr	r1, [r7, #16]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006536:	461a      	mov	r2, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fd55 	bl	8007fe8 <USBD_CtlPrepareRx>
      break;
 800653e:	e076      	b.n	800662e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	33b0      	adds	r3, #176	; 0xb0
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	7850      	ldrb	r0, [r2, #1]
 8006556:	2200      	movs	r2, #0
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	4798      	blx	r3
      break;
 800655c:	e067      	b.n	800662e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	785b      	ldrb	r3, [r3, #1]
 8006562:	2b0b      	cmp	r3, #11
 8006564:	d851      	bhi.n	800660a <USBD_CDC_Setup+0x18a>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <USBD_CDC_Setup+0xec>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	0800659d 	.word	0x0800659d
 8006570:	08006619 	.word	0x08006619
 8006574:	0800660b 	.word	0x0800660b
 8006578:	0800660b 	.word	0x0800660b
 800657c:	0800660b 	.word	0x0800660b
 8006580:	0800660b 	.word	0x0800660b
 8006584:	0800660b 	.word	0x0800660b
 8006588:	0800660b 	.word	0x0800660b
 800658c:	0800660b 	.word	0x0800660b
 8006590:	0800660b 	.word	0x0800660b
 8006594:	080065c7 	.word	0x080065c7
 8006598:	080065f1 	.word	0x080065f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d107      	bne.n	80065b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065a8:	f107 030a 	add.w	r3, r7, #10
 80065ac:	2202      	movs	r2, #2
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 fced 	bl	8007f90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065b6:	e032      	b.n	800661e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fc77 	bl	8007eae <USBD_CtlError>
            ret = USBD_FAIL;
 80065c0:	2303      	movs	r3, #3
 80065c2:	75fb      	strb	r3, [r7, #23]
          break;
 80065c4:	e02b      	b.n	800661e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d107      	bne.n	80065e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80065d2:	f107 030d 	add.w	r3, r7, #13
 80065d6:	2201      	movs	r2, #1
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f001 fcd8 	bl	8007f90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065e0:	e01d      	b.n	800661e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 fc62 	bl	8007eae <USBD_CtlError>
            ret = USBD_FAIL;
 80065ea:	2303      	movs	r3, #3
 80065ec:	75fb      	strb	r3, [r7, #23]
          break;
 80065ee:	e016      	b.n	800661e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d00f      	beq.n	800661c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fc55 	bl	8007eae <USBD_CtlError>
            ret = USBD_FAIL;
 8006604:	2303      	movs	r3, #3
 8006606:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006608:	e008      	b.n	800661c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 fc4e 	bl	8007eae <USBD_CtlError>
          ret = USBD_FAIL;
 8006612:	2303      	movs	r3, #3
 8006614:	75fb      	strb	r3, [r7, #23]
          break;
 8006616:	e002      	b.n	800661e <USBD_CDC_Setup+0x19e>
          break;
 8006618:	bf00      	nop
 800661a:	e008      	b.n	800662e <USBD_CDC_Setup+0x1ae>
          break;
 800661c:	bf00      	nop
      }
      break;
 800661e:	e006      	b.n	800662e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 fc43 	bl	8007eae <USBD_CtlError>
      ret = USBD_FAIL;
 8006628:	2303      	movs	r3, #3
 800662a:	75fb      	strb	r3, [r7, #23]
      break;
 800662c:	bf00      	nop
  }

  return (uint8_t)ret;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800664a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32b0      	adds	r2, #176	; 0xb0
 8006656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800665e:	2303      	movs	r3, #3
 8006660:	e065      	b.n	800672e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	32b0      	adds	r2, #176	; 0xb0
 800666c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006670:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	3318      	adds	r3, #24
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d02f      	beq.n	80066ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	f003 020f 	and.w	r2, r3, #15
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	3318      	adds	r3, #24
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	f003 010f 	and.w	r1, r3, #15
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	460b      	mov	r3, r1
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	440b      	add	r3, r1
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4403      	add	r3, r0
 80066b4:	3348      	adds	r3, #72	; 0x48
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d112      	bne.n	80066ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	3318      	adds	r3, #24
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066de:	78f9      	ldrb	r1, [r7, #3]
 80066e0:	2300      	movs	r3, #0
 80066e2:	2200      	movs	r2, #0
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f004 feba 	bl	800b45e <USBD_LL_Transmit>
 80066ea:	e01f      	b.n	800672c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	33b0      	adds	r3, #176	; 0xb0
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d010      	beq.n	800672c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	33b0      	adds	r3, #176	; 0xb0
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	32b0      	adds	r2, #176	; 0xb0
 800674c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006750:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	32b0      	adds	r2, #176	; 0xb0
 800675c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	e01a      	b.n	800679e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f004 feb8 	bl	800b4e2 <USBD_LL_GetRxDataSize>
 8006772:	4602      	mov	r2, r0
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	33b0      	adds	r3, #176	; 0xb0
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006798:	4611      	mov	r1, r2
 800679a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	32b0      	adds	r2, #176	; 0xb0
 80067b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e025      	b.n	8006814 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	33b0      	adds	r3, #176	; 0xb0
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01a      	beq.n	8006812 <USBD_CDC_EP0_RxReady+0x6c>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80067e2:	2bff      	cmp	r3, #255	; 0xff
 80067e4:	d015      	beq.n	8006812 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	33b0      	adds	r3, #176	; 0xb0
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80067fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006806:	b292      	uxth	r2, r2
 8006808:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	22ff      	movs	r2, #255	; 0xff
 800680e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006824:	2182      	movs	r1, #130	; 0x82
 8006826:	4818      	ldr	r0, [pc, #96]	; (8006888 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006828:	f000 fd09 	bl	800723e <USBD_GetEpDesc>
 800682c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800682e:	2101      	movs	r1, #1
 8006830:	4815      	ldr	r0, [pc, #84]	; (8006888 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006832:	f000 fd04 	bl	800723e <USBD_GetEpDesc>
 8006836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006838:	2181      	movs	r1, #129	; 0x81
 800683a:	4813      	ldr	r0, [pc, #76]	; (8006888 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800683c:	f000 fcff 	bl	800723e <USBD_GetEpDesc>
 8006840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2210      	movs	r2, #16
 800684c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2200      	movs	r2, #0
 8006858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800685c:	711a      	strb	r2, [r3, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006870:	711a      	strb	r2, [r3, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2243      	movs	r2, #67	; 0x43
 800687a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800687c:	4b02      	ldr	r3, [pc, #8]	; (8006888 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000050 	.word	0x20000050

0800688c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006894:	2182      	movs	r1, #130	; 0x82
 8006896:	4818      	ldr	r0, [pc, #96]	; (80068f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006898:	f000 fcd1 	bl	800723e <USBD_GetEpDesc>
 800689c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800689e:	2101      	movs	r1, #1
 80068a0:	4815      	ldr	r0, [pc, #84]	; (80068f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068a2:	f000 fccc 	bl	800723e <USBD_GetEpDesc>
 80068a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068a8:	2181      	movs	r1, #129	; 0x81
 80068aa:	4813      	ldr	r0, [pc, #76]	; (80068f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068ac:	f000 fcc7 	bl	800723e <USBD_GetEpDesc>
 80068b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2210      	movs	r2, #16
 80068bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2200      	movs	r2, #0
 80068c8:	711a      	strb	r2, [r3, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f042 0202 	orr.w	r2, r2, #2
 80068d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d006      	beq.n	80068e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	711a      	strb	r2, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f042 0202 	orr.w	r2, r2, #2
 80068e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2243      	movs	r2, #67	; 0x43
 80068ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068ec:	4b02      	ldr	r3, [pc, #8]	; (80068f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000050 	.word	0x20000050

080068fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006904:	2182      	movs	r1, #130	; 0x82
 8006906:	4818      	ldr	r0, [pc, #96]	; (8006968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006908:	f000 fc99 	bl	800723e <USBD_GetEpDesc>
 800690c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800690e:	2101      	movs	r1, #1
 8006910:	4815      	ldr	r0, [pc, #84]	; (8006968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006912:	f000 fc94 	bl	800723e <USBD_GetEpDesc>
 8006916:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006918:	2181      	movs	r1, #129	; 0x81
 800691a:	4813      	ldr	r0, [pc, #76]	; (8006968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800691c:	f000 fc8f 	bl	800723e <USBD_GetEpDesc>
 8006920:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2210      	movs	r2, #16
 800692c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d006      	beq.n	8006942 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2200      	movs	r2, #0
 8006938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693c:	711a      	strb	r2, [r3, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d006      	beq.n	8006956 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006950:	711a      	strb	r2, [r3, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2243      	movs	r2, #67	; 0x43
 800695a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000050 	.word	0x20000050

0800696c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	220a      	movs	r2, #10
 8006978:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800697a:	4b03      	ldr	r3, [pc, #12]	; (8006988 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	2000000c 	.word	0x2000000c

0800698c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800699c:	2303      	movs	r3, #3
 800699e:	e009      	b.n	80069b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	33b0      	adds	r3, #176	; 0xb0
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	32b0      	adds	r2, #176	; 0xb0
 80069d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069da:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e008      	b.n	80069f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	32b0      	adds	r2, #176	; 0xb0
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e004      	b.n	8006a32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	32b0      	adds	r2, #176	; 0xb0
 8006a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32b0      	adds	r2, #176	; 0xb0
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e018      	b.n	8006aa0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7c1b      	ldrb	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <USBD_CDC_ReceivePacket+0x68>)
 8006a78:	7819      	ldrb	r1, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f004 fd0b 	bl	800b4a0 <USBD_LL_PrepareReceive>
 8006a8a:	e008      	b.n	8006a9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <USBD_CDC_ReceivePacket+0x68>)
 8006a8e:	7819      	ldrb	r1, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f004 fd01 	bl	800b4a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000094 	.word	0x20000094

08006aac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e01f      	b.n	8006b04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	79fa      	ldrb	r2, [r7, #7]
 8006af6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f004 fb7b 	bl	800b1f4 <USBD_LL_Init>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e025      	b.n	8006b70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32ae      	adds	r2, #174	; 0xae
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	32ae      	adds	r2, #174	; 0xae
 8006b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	f107 020e 	add.w	r2, r7, #14
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
 8006b58:	4602      	mov	r2, r0
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f004 fb83 	bl	800b28c <USBD_LL_Start>
 8006b86:	4603      	mov	r3, r0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d009      	beq.n	8006bd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	78fa      	ldrb	r2, [r7, #3]
 8006bca:	4611      	mov	r1, r2
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006c04:	2303      	movs	r3, #3
 8006c06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 f908 	bl	8007e3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d01a      	beq.n	8006c84 <USBD_LL_SetupStage+0x72>
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d822      	bhi.n	8006c98 <USBD_LL_SetupStage+0x86>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <USBD_LL_SetupStage+0x4a>
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d00a      	beq.n	8006c70 <USBD_LL_SetupStage+0x5e>
 8006c5a:	e01d      	b.n	8006c98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fb5f 	bl	8007328 <USBD_StdDevReq>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6e:	e020      	b.n	8006cb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fbc7 	bl	800740c <USBD_StdItfReq>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73fb      	strb	r3, [r7, #15]
      break;
 8006c82:	e016      	b.n	8006cb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc29 	bl	80074e4 <USBD_StdEPReq>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]
      break;
 8006c96:	e00c      	b.n	8006cb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f004 fb50 	bl	800b34c <USBD_LL_StallEP>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb0:	bf00      	nop
  }

  return ret;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006cce:	7afb      	ldrb	r3, [r7, #11]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d16e      	bne.n	8006db2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	f040 8098 	bne.w	8006e18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d913      	bls.n	8006d1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	1ad2      	subs	r2, r2, r3
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	bf28      	it	cs
 8006d0e:	4613      	movcs	r3, r2
 8006d10:	461a      	mov	r2, r3
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f001 f984 	bl	8008022 <USBD_CtlContinueRx>
 8006d1a:	e07d      	b.n	8006e18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d014      	beq.n	8006d54 <USBD_LL_DataOutStage+0x98>
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d81d      	bhi.n	8006d6a <USBD_LL_DataOutStage+0xae>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <USBD_LL_DataOutStage+0x7c>
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d003      	beq.n	8006d3e <USBD_LL_DataOutStage+0x82>
 8006d36:	e018      	b.n	8006d6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75bb      	strb	r3, [r7, #22]
            break;
 8006d3c:	e018      	b.n	8006d70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fa5e 	bl	800720a <USBD_CoreFindIF>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	75bb      	strb	r3, [r7, #22]
            break;
 8006d52:	e00d      	b.n	8006d70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fa60 	bl	8007224 <USBD_CoreFindEP>
 8006d64:	4603      	mov	r3, r0
 8006d66:	75bb      	strb	r3, [r7, #22]
            break;
 8006d68:	e002      	b.n	8006d70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	75bb      	strb	r3, [r7, #22]
            break;
 8006d6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006d70:	7dbb      	ldrb	r3, [r7, #22]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d119      	bne.n	8006daa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d113      	bne.n	8006daa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006d82:	7dba      	ldrb	r2, [r7, #22]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	32ae      	adds	r2, #174	; 0xae
 8006d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006d92:	7dba      	ldrb	r2, [r7, #22]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d9a:	7dba      	ldrb	r2, [r7, #22]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	32ae      	adds	r2, #174	; 0xae
 8006da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f001 f94a 	bl	8008044 <USBD_CtlSendStatus>
 8006db0:	e032      	b.n	8006e18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fa31 	bl	8007224 <USBD_CoreFindEP>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dc6:	7dbb      	ldrb	r3, [r7, #22]
 8006dc8:	2bff      	cmp	r3, #255	; 0xff
 8006dca:	d025      	beq.n	8006e18 <USBD_LL_DataOutStage+0x15c>
 8006dcc:	7dbb      	ldrb	r3, [r7, #22]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d122      	bne.n	8006e18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d117      	bne.n	8006e0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006dde:	7dba      	ldrb	r2, [r7, #22]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	32ae      	adds	r2, #174	; 0xae
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00f      	beq.n	8006e0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006dee:	7dba      	ldrb	r2, [r7, #22]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006df6:	7dba      	ldrb	r2, [r7, #22]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	32ae      	adds	r2, #174	; 0xae
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	7afa      	ldrb	r2, [r7, #11]
 8006e04:	4611      	mov	r1, r2
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	e000      	b.n	8006e1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d16f      	bne.n	8006f16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d15a      	bne.n	8006efc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d914      	bls.n	8006e7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	1ad2      	subs	r2, r2, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f001 f8ac 	bl	8007fc6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2200      	movs	r2, #0
 8006e72:	2100      	movs	r1, #0
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f004 fb13 	bl	800b4a0 <USBD_LL_PrepareReceive>
 8006e7a:	e03f      	b.n	8006efc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d11c      	bne.n	8006ec2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d316      	bcc.n	8006ec2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d20f      	bcs.n	8006ec2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f001 f88d 	bl	8007fc6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2100      	movs	r1, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f004 faf0 	bl	800b4a0 <USBD_LL_PrepareReceive>
 8006ec0:	e01c      	b.n	8006efc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d10f      	bne.n	8006eee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eee:	2180      	movs	r1, #128	; 0x80
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f004 fa2b 	bl	800b34c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f001 f8b7 	bl	800806a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d03a      	beq.n	8006f7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff fe42 	bl	8006b90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f14:	e032      	b.n	8006f7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f97f 	bl	8007224 <USBD_CoreFindEP>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2bff      	cmp	r3, #255	; 0xff
 8006f2e:	d025      	beq.n	8006f7c <USBD_LL_DataInStage+0x15a>
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d122      	bne.n	8006f7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d11c      	bne.n	8006f7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006f42:	7dfa      	ldrb	r2, [r7, #23]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	32ae      	adds	r2, #174	; 0xae
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d014      	beq.n	8006f7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006f52:	7dfa      	ldrb	r2, [r7, #23]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006f5a:	7dfa      	ldrb	r2, [r7, #23]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	32ae      	adds	r2, #174	; 0xae
 8006f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	7afa      	ldrb	r2, [r7, #11]
 8006f68:	4611      	mov	r1, r2
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	4798      	blx	r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006f72:	7dbb      	ldrb	r3, [r7, #22]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006f78:	7dbb      	ldrb	r3, [r7, #22]
 8006f7a:	e000      	b.n	8006f7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d014      	beq.n	8006fec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00e      	beq.n	8006fec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6852      	ldr	r2, [r2, #4]
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	4611      	mov	r1, r2
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fec:	2340      	movs	r3, #64	; 0x40
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f004 f965 	bl	800b2c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2240      	movs	r2, #64	; 0x40
 8007004:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	2200      	movs	r2, #0
 800700c:	2180      	movs	r1, #128	; 0x80
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f004 f957 	bl	800b2c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2240      	movs	r2, #64	; 0x40
 800701e:	621a      	str	r2, [r3, #32]

  return ret;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007058:	b2da      	uxtb	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2204      	movs	r2, #4
 8007064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b04      	cmp	r3, #4
 8007088:	d106      	bne.n	8007098 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d110      	bne.n	80070dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	32ae      	adds	r2, #174	; 0xae
 80070fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	e01c      	b.n	8007142 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b03      	cmp	r3, #3
 8007112:	d115      	bne.n	8007140 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	32ae      	adds	r2, #174	; 0xae
 800711e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32ae      	adds	r2, #174	; 0xae
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	78fa      	ldrb	r2, [r7, #3]
 800713a:	4611      	mov	r1, r2
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	32ae      	adds	r2, #174	; 0xae
 8007160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	e01c      	b.n	80071a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b03      	cmp	r3, #3
 8007176:	d115      	bne.n	80071a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	32ae      	adds	r2, #174	; 0xae
 8007182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	32ae      	adds	r2, #174	; 0xae
 8007196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	78fa      	ldrb	r2, [r7, #3]
 800719e:	4611      	mov	r1, r2
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00e      	beq.n	8007200 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6852      	ldr	r2, [r2, #4]
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	4611      	mov	r1, r2
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	460b      	mov	r3, r1
 8007214:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007216:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007230:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b086      	sub	sp, #24
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	429a      	cmp	r2, r3
 8007264:	d920      	bls.n	80072a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800726e:	e013      	b.n	8007298 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007270:	f107 030a 	add.w	r3, r7, #10
 8007274:	4619      	mov	r1, r3
 8007276:	6978      	ldr	r0, [r7, #20]
 8007278:	f000 f81b 	bl	80072b2 <USBD_GetNextDesc>
 800727c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	2b05      	cmp	r3, #5
 8007284:	d108      	bne.n	8007298 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	789b      	ldrb	r3, [r3, #2]
 800728e:	78fa      	ldrb	r2, [r7, #3]
 8007290:	429a      	cmp	r2, r3
 8007292:	d008      	beq.n	80072a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	885b      	ldrh	r3, [r3, #2]
 800729c:	b29a      	uxth	r2, r3
 800729e:	897b      	ldrh	r3, [r7, #10]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d8e5      	bhi.n	8007270 <USBD_GetEpDesc+0x32>
 80072a4:	e000      	b.n	80072a8 <USBD_GetEpDesc+0x6a>
          break;
 80072a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80072a8:	693b      	ldr	r3, [r7, #16]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	881a      	ldrh	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80072de:	68fb      	ldr	r3, [r7, #12]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3301      	adds	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800730a:	8a3b      	ldrh	r3, [r7, #16]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	b21a      	sxth	r2, r3
 8007310:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007314:	4313      	orrs	r3, r2
 8007316:	b21b      	sxth	r3, r3
 8007318:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800731a:	89fb      	ldrh	r3, [r7, #14]
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d005      	beq.n	800734e <USBD_StdDevReq+0x26>
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d857      	bhi.n	80073f6 <USBD_StdDevReq+0xce>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00f      	beq.n	800736a <USBD_StdDevReq+0x42>
 800734a:	2b20      	cmp	r3, #32
 800734c:	d153      	bne.n	80073f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	32ae      	adds	r2, #174	; 0xae
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
      break;
 8007368:	e04a      	b.n	8007400 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b09      	cmp	r3, #9
 8007370:	d83b      	bhi.n	80073ea <USBD_StdDevReq+0xc2>
 8007372:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <USBD_StdDevReq+0x50>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	080073cd 	.word	0x080073cd
 800737c:	080073e1 	.word	0x080073e1
 8007380:	080073eb 	.word	0x080073eb
 8007384:	080073d7 	.word	0x080073d7
 8007388:	080073eb 	.word	0x080073eb
 800738c:	080073ab 	.word	0x080073ab
 8007390:	080073a1 	.word	0x080073a1
 8007394:	080073eb 	.word	0x080073eb
 8007398:	080073c3 	.word	0x080073c3
 800739c:	080073b5 	.word	0x080073b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa3c 	bl	8007820 <USBD_GetDescriptor>
          break;
 80073a8:	e024      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fba1 	bl	8007af4 <USBD_SetAddress>
          break;
 80073b2:	e01f      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fbe0 	bl	8007b7c <USBD_SetConfig>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
          break;
 80073c0:	e018      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc83 	bl	8007cd0 <USBD_GetConfig>
          break;
 80073ca:	e013      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fcb4 	bl	8007d3c <USBD_GetStatus>
          break;
 80073d4:	e00e      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fce3 	bl	8007da4 <USBD_SetFeature>
          break;
 80073de:	e009      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fd07 	bl	8007df6 <USBD_ClrFeature>
          break;
 80073e8:	e004      	b.n	80073f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fd5e 	bl	8007eae <USBD_CtlError>
          break;
 80073f2:	bf00      	nop
      }
      break;
 80073f4:	e004      	b.n	8007400 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fd58 	bl	8007eae <USBD_CtlError>
      break;
 80073fe:	bf00      	nop
  }

  return ret;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop

0800740c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d005      	beq.n	8007432 <USBD_StdItfReq+0x26>
 8007426:	2b40      	cmp	r3, #64	; 0x40
 8007428:	d852      	bhi.n	80074d0 <USBD_StdItfReq+0xc4>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <USBD_StdItfReq+0x26>
 800742e:	2b20      	cmp	r3, #32
 8007430:	d14e      	bne.n	80074d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007438:	b2db      	uxtb	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	2b02      	cmp	r3, #2
 800743e:	d840      	bhi.n	80074c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	889b      	ldrh	r3, [r3, #4]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	d836      	bhi.n	80074b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	889b      	ldrh	r3, [r3, #4]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff fed9 	bl	800720a <USBD_CoreFindIF>
 8007458:	4603      	mov	r3, r0
 800745a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	2bff      	cmp	r3, #255	; 0xff
 8007460:	d01d      	beq.n	800749e <USBD_StdItfReq+0x92>
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d11a      	bne.n	800749e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007468:	7bba      	ldrb	r2, [r7, #14]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	32ae      	adds	r2, #174	; 0xae
 800746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00f      	beq.n	8007498 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007478:	7bba      	ldrb	r2, [r7, #14]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007480:	7bba      	ldrb	r2, [r7, #14]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	32ae      	adds	r2, #174	; 0xae
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	4798      	blx	r3
 8007492:	4603      	mov	r3, r0
 8007494:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007496:	e004      	b.n	80074a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007498:	2303      	movs	r3, #3
 800749a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800749c:	e001      	b.n	80074a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800749e:	2303      	movs	r3, #3
 80074a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d110      	bne.n	80074cc <USBD_StdItfReq+0xc0>
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10d      	bne.n	80074cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fdc7 	bl	8008044 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074b6:	e009      	b.n	80074cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fcf7 	bl	8007eae <USBD_CtlError>
          break;
 80074c0:	e004      	b.n	80074cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fcf2 	bl	8007eae <USBD_CtlError>
          break;
 80074ca:	e000      	b.n	80074ce <USBD_StdItfReq+0xc2>
          break;
 80074cc:	bf00      	nop
      }
      break;
 80074ce:	e004      	b.n	80074da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fceb 	bl	8007eae <USBD_CtlError>
      break;
 80074d8:	bf00      	nop
  }

  return ret;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	889b      	ldrh	r3, [r3, #4]
 80074f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	d007      	beq.n	8007514 <USBD_StdEPReq+0x30>
 8007504:	2b40      	cmp	r3, #64	; 0x40
 8007506:	f200 817f 	bhi.w	8007808 <USBD_StdEPReq+0x324>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d02a      	beq.n	8007564 <USBD_StdEPReq+0x80>
 800750e:	2b20      	cmp	r3, #32
 8007510:	f040 817a 	bne.w	8007808 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff fe83 	bl	8007224 <USBD_CoreFindEP>
 800751e:	4603      	mov	r3, r0
 8007520:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007522:	7b7b      	ldrb	r3, [r7, #13]
 8007524:	2bff      	cmp	r3, #255	; 0xff
 8007526:	f000 8174 	beq.w	8007812 <USBD_StdEPReq+0x32e>
 800752a:	7b7b      	ldrb	r3, [r7, #13]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 8170 	bne.w	8007812 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007532:	7b7a      	ldrb	r2, [r7, #13]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800753a:	7b7a      	ldrb	r2, [r7, #13]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	32ae      	adds	r2, #174	; 0xae
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 8163 	beq.w	8007812 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800754c:	7b7a      	ldrb	r2, [r7, #13]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	32ae      	adds	r2, #174	; 0xae
 8007552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007562:	e156      	b.n	8007812 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	2b03      	cmp	r3, #3
 800756a:	d008      	beq.n	800757e <USBD_StdEPReq+0x9a>
 800756c:	2b03      	cmp	r3, #3
 800756e:	f300 8145 	bgt.w	80077fc <USBD_StdEPReq+0x318>
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 809b 	beq.w	80076ae <USBD_StdEPReq+0x1ca>
 8007578:	2b01      	cmp	r3, #1
 800757a:	d03c      	beq.n	80075f6 <USBD_StdEPReq+0x112>
 800757c:	e13e      	b.n	80077fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d002      	beq.n	8007590 <USBD_StdEPReq+0xac>
 800758a:	2b03      	cmp	r3, #3
 800758c:	d016      	beq.n	80075bc <USBD_StdEPReq+0xd8>
 800758e:	e02c      	b.n	80075ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00d      	beq.n	80075b2 <USBD_StdEPReq+0xce>
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	2b80      	cmp	r3, #128	; 0x80
 800759a:	d00a      	beq.n	80075b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f003 fed3 	bl	800b34c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075a6:	2180      	movs	r1, #128	; 0x80
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f003 fecf 	bl	800b34c <USBD_LL_StallEP>
 80075ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075b0:	e020      	b.n	80075f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fc7a 	bl	8007eae <USBD_CtlError>
              break;
 80075ba:	e01b      	b.n	80075f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	885b      	ldrh	r3, [r3, #2]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10e      	bne.n	80075e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <USBD_StdEPReq+0xfe>
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b80      	cmp	r3, #128	; 0x80
 80075ce:	d008      	beq.n	80075e2 <USBD_StdEPReq+0xfe>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	88db      	ldrh	r3, [r3, #6]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f003 feb5 	bl	800b34c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fd2e 	bl	8008044 <USBD_CtlSendStatus>

              break;
 80075e8:	e004      	b.n	80075f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fc5e 	bl	8007eae <USBD_CtlError>
              break;
 80075f2:	bf00      	nop
          }
          break;
 80075f4:	e107      	b.n	8007806 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d002      	beq.n	8007608 <USBD_StdEPReq+0x124>
 8007602:	2b03      	cmp	r3, #3
 8007604:	d016      	beq.n	8007634 <USBD_StdEPReq+0x150>
 8007606:	e04b      	b.n	80076a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00d      	beq.n	800762a <USBD_StdEPReq+0x146>
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d00a      	beq.n	800762a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f003 fe97 	bl	800b34c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800761e:	2180      	movs	r1, #128	; 0x80
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f003 fe93 	bl	800b34c <USBD_LL_StallEP>
 8007626:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007628:	e040      	b.n	80076ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fc3e 	bl	8007eae <USBD_CtlError>
              break;
 8007632:	e03b      	b.n	80076ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d136      	bne.n	80076aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f003 fe9d 	bl	800b38a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fcf7 	bl	8008044 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fde2 	bl	8007224 <USBD_CoreFindEP>
 8007660:	4603      	mov	r3, r0
 8007662:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007664:	7b7b      	ldrb	r3, [r7, #13]
 8007666:	2bff      	cmp	r3, #255	; 0xff
 8007668:	d01f      	beq.n	80076aa <USBD_StdEPReq+0x1c6>
 800766a:	7b7b      	ldrb	r3, [r7, #13]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d11c      	bne.n	80076aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007670:	7b7a      	ldrb	r2, [r7, #13]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007678:	7b7a      	ldrb	r2, [r7, #13]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	32ae      	adds	r2, #174	; 0xae
 800767e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d010      	beq.n	80076aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007688:	7b7a      	ldrb	r2, [r7, #13]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32ae      	adds	r2, #174	; 0xae
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800769e:	e004      	b.n	80076aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fc03 	bl	8007eae <USBD_CtlError>
              break;
 80076a8:	e000      	b.n	80076ac <USBD_StdEPReq+0x1c8>
              break;
 80076aa:	bf00      	nop
          }
          break;
 80076ac:	e0ab      	b.n	8007806 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d002      	beq.n	80076c0 <USBD_StdEPReq+0x1dc>
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d032      	beq.n	8007724 <USBD_StdEPReq+0x240>
 80076be:	e097      	b.n	80077f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d007      	beq.n	80076d6 <USBD_StdEPReq+0x1f2>
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b80      	cmp	r3, #128	; 0x80
 80076ca:	d004      	beq.n	80076d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fbed 	bl	8007eae <USBD_CtlError>
                break;
 80076d4:	e091      	b.n	80077fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da0b      	bge.n	80076f6 <USBD_StdEPReq+0x212>
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	3310      	adds	r3, #16
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	3304      	adds	r3, #4
 80076f4:	e00b      	b.n	800770e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	4413      	add	r3, r2
 800770c:	3304      	adds	r3, #4
 800770e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2202      	movs	r2, #2
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fc37 	bl	8007f90 <USBD_CtlSendData>
              break;
 8007722:	e06a      	b.n	80077fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	da11      	bge.n	8007750 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	f003 020f 	and.w	r2, r3, #15
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	440b      	add	r3, r1
 800773e:	3324      	adds	r3, #36	; 0x24
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d117      	bne.n	8007776 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fbb0 	bl	8007eae <USBD_CtlError>
                  break;
 800774e:	e054      	b.n	80077fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	f003 020f 	and.w	r2, r3, #15
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d104      	bne.n	8007776 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb9d 	bl	8007eae <USBD_CtlError>
                  break;
 8007774:	e041      	b.n	80077fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800777a:	2b00      	cmp	r3, #0
 800777c:	da0b      	bge.n	8007796 <USBD_StdEPReq+0x2b2>
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	3310      	adds	r3, #16
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	3304      	adds	r3, #4
 8007794:	e00b      	b.n	80077ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	3304      	adds	r3, #4
 80077ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <USBD_StdEPReq+0x2d8>
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b80      	cmp	r3, #128	; 0x80
 80077ba:	d103      	bne.n	80077c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	e00e      	b.n	80077e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f003 fdfd 	bl	800b3c8 <USBD_LL_IsStallEP>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2201      	movs	r2, #1
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	e002      	b.n	80077e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2202      	movs	r2, #2
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fbd1 	bl	8007f90 <USBD_CtlSendData>
              break;
 80077ee:	e004      	b.n	80077fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fb5b 	bl	8007eae <USBD_CtlError>
              break;
 80077f8:	bf00      	nop
          }
          break;
 80077fa:	e004      	b.n	8007806 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fb55 	bl	8007eae <USBD_CtlError>
          break;
 8007804:	bf00      	nop
      }
      break;
 8007806:	e005      	b.n	8007814 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fb4f 	bl	8007eae <USBD_CtlError>
      break;
 8007810:	e000      	b.n	8007814 <USBD_StdEPReq+0x330>
      break;
 8007812:	bf00      	nop
  }

  return ret;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	885b      	ldrh	r3, [r3, #2]
 800783a:	0a1b      	lsrs	r3, r3, #8
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	2b06      	cmp	r3, #6
 8007842:	f200 8128 	bhi.w	8007a96 <USBD_GetDescriptor+0x276>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <USBD_GetDescriptor+0x2c>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007869 	.word	0x08007869
 8007850:	08007881 	.word	0x08007881
 8007854:	080078c1 	.word	0x080078c1
 8007858:	08007a97 	.word	0x08007a97
 800785c:	08007a97 	.word	0x08007a97
 8007860:	08007a37 	.word	0x08007a37
 8007864:	08007a63 	.word	0x08007a63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
      break;
 800787e:	e112      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	7c1b      	ldrb	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10d      	bne.n	80078a4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	f107 0208 	add.w	r2, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3301      	adds	r3, #1
 800789e:	2202      	movs	r2, #2
 80078a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078a2:	e100      	b.n	8007aa6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	f107 0208 	add.w	r2, r7, #8
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	2202      	movs	r2, #2
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	e0f2      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	885b      	ldrh	r3, [r3, #2]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	f200 80ac 	bhi.w	8007a24 <USBD_GetDescriptor+0x204>
 80078cc:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <USBD_GetDescriptor+0xb4>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	080078ed 	.word	0x080078ed
 80078d8:	08007921 	.word	0x08007921
 80078dc:	08007955 	.word	0x08007955
 80078e0:	08007989 	.word	0x08007989
 80078e4:	080079bd 	.word	0x080079bd
 80078e8:	080079f1 	.word	0x080079f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	7c12      	ldrb	r2, [r2, #16]
 8007904:	f107 0108 	add.w	r1, r7, #8
 8007908:	4610      	mov	r0, r2
 800790a:	4798      	blx	r3
 800790c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800790e:	e091      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 facb 	bl	8007eae <USBD_CtlError>
            err++;
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	3301      	adds	r3, #1
 800791c:	72fb      	strb	r3, [r7, #11]
          break;
 800791e:	e089      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	7c12      	ldrb	r2, [r2, #16]
 8007938:	f107 0108 	add.w	r1, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007942:	e077      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fab1 	bl	8007eae <USBD_CtlError>
            err++;
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	3301      	adds	r3, #1
 8007950:	72fb      	strb	r3, [r7, #11]
          break;
 8007952:	e06f      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	7c12      	ldrb	r2, [r2, #16]
 800796c:	f107 0108 	add.w	r1, r7, #8
 8007970:	4610      	mov	r0, r2
 8007972:	4798      	blx	r3
 8007974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007976:	e05d      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa97 	bl	8007eae <USBD_CtlError>
            err++;
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	3301      	adds	r3, #1
 8007984:	72fb      	strb	r3, [r7, #11]
          break;
 8007986:	e055      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	7c12      	ldrb	r2, [r2, #16]
 80079a0:	f107 0108 	add.w	r1, r7, #8
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079aa:	e043      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa7d 	bl	8007eae <USBD_CtlError>
            err++;
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	3301      	adds	r3, #1
 80079b8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ba:	e03b      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	7c12      	ldrb	r2, [r2, #16]
 80079d4:	f107 0108 	add.w	r1, r7, #8
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
 80079dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079de:	e029      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa63 	bl	8007eae <USBD_CtlError>
            err++;
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	3301      	adds	r3, #1
 80079ec:	72fb      	strb	r3, [r7, #11]
          break;
 80079ee:	e021      	b.n	8007a34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a12:	e00f      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa49 	bl	8007eae <USBD_CtlError>
            err++;
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	72fb      	strb	r3, [r7, #11]
          break;
 8007a22:	e007      	b.n	8007a34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa41 	bl	8007eae <USBD_CtlError>
          err++;
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007a32:	bf00      	nop
      }
      break;
 8007a34:	e037      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7c1b      	ldrb	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	f107 0208 	add.w	r2, r7, #8
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4798      	blx	r3
 8007a4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a50:	e029      	b.n	8007aa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fa2a 	bl	8007eae <USBD_CtlError>
        err++;
 8007a5a:	7afb      	ldrb	r3, [r7, #11]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a60:	e021      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7c1b      	ldrb	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10d      	bne.n	8007a86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a72:	f107 0208 	add.w	r2, r7, #8
 8007a76:	4610      	mov	r0, r2
 8007a78:	4798      	blx	r3
 8007a7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	2207      	movs	r2, #7
 8007a82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a84:	e00f      	b.n	8007aa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa10 	bl	8007eae <USBD_CtlError>
        err++;
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	3301      	adds	r3, #1
 8007a92:	72fb      	strb	r3, [r7, #11]
      break;
 8007a94:	e007      	b.n	8007aa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fa08 	bl	8007eae <USBD_CtlError>
      err++;
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	72fb      	strb	r3, [r7, #11]
      break;
 8007aa4:	bf00      	nop
  }

  if (err != 0U)
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d11e      	bne.n	8007aea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	88db      	ldrh	r3, [r3, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d016      	beq.n	8007ae2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ab4:	893b      	ldrh	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00e      	beq.n	8007ad8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88da      	ldrh	r2, [r3, #6]
 8007abe:	893b      	ldrh	r3, [r7, #8]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	bf28      	it	cs
 8007ac4:	4613      	movcs	r3, r2
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007aca:	893b      	ldrh	r3, [r7, #8]
 8007acc:	461a      	mov	r2, r3
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fa5d 	bl	8007f90 <USBD_CtlSendData>
 8007ad6:	e009      	b.n	8007aec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f9e7 	bl	8007eae <USBD_CtlError>
 8007ae0:	e004      	b.n	8007aec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 faae 	bl	8008044 <USBD_CtlSendStatus>
 8007ae8:	e000      	b.n	8007aec <USBD_GetDescriptor+0x2cc>
    return;
 8007aea:	bf00      	nop
  }
}
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	889b      	ldrh	r3, [r3, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d131      	bne.n	8007b6a <USBD_SetAddress+0x76>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	88db      	ldrh	r3, [r3, #6]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d12d      	bne.n	8007b6a <USBD_SetAddress+0x76>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	885b      	ldrh	r3, [r3, #2]
 8007b12:	2b7f      	cmp	r3, #127	; 0x7f
 8007b14:	d829      	bhi.n	8007b6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	885b      	ldrh	r3, [r3, #2]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d104      	bne.n	8007b38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f9bc 	bl	8007eae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b36:	e01d      	b.n	8007b74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	7bfa      	ldrb	r2, [r7, #15]
 8007b3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f003 fc6b 	bl	800b420 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa7a 	bl	8008044 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5e:	e009      	b.n	8007b74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b68:	e004      	b.n	8007b74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f99e 	bl	8007eae <USBD_CtlError>
  }
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	885b      	ldrh	r3, [r3, #2]
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	4b4e      	ldr	r3, [pc, #312]	; (8007ccc <USBD_SetConfig+0x150>)
 8007b92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b94:	4b4d      	ldr	r3, [pc, #308]	; (8007ccc <USBD_SetConfig+0x150>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d905      	bls.n	8007ba8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f985 	bl	8007eae <USBD_CtlError>
    return USBD_FAIL;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e08c      	b.n	8007cc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d002      	beq.n	8007bba <USBD_SetConfig+0x3e>
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d029      	beq.n	8007c0c <USBD_SetConfig+0x90>
 8007bb8:	e075      	b.n	8007ca6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007bba:	4b44      	ldr	r3, [pc, #272]	; (8007ccc <USBD_SetConfig+0x150>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d020      	beq.n	8007c04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007bc2:	4b42      	ldr	r3, [pc, #264]	; (8007ccc <USBD_SetConfig+0x150>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ccc <USBD_SetConfig+0x150>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fe ffe7 	bl	8006ba6 <USBD_SetClassConfig>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d008      	beq.n	8007bf4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f962 	bl	8007eae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bf2:	e065      	b.n	8007cc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fa25 	bl	8008044 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c02:	e05d      	b.n	8007cc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa1d 	bl	8008044 <USBD_CtlSendStatus>
      break;
 8007c0a:	e059      	b.n	8007cc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c0c:	4b2f      	ldr	r3, [pc, #188]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d112      	bne.n	8007c3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c1c:	4b2b      	ldr	r3, [pc, #172]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c26:	4b29      	ldr	r3, [pc, #164]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7fe ffd6 	bl	8006bde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa06 	bl	8008044 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c38:	e042      	b.n	8007cc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007c3a:	4b24      	ldr	r3, [pc, #144]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d02a      	beq.n	8007c9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7fe ffc4 	bl	8006bde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c56:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c60:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <USBD_SetConfig+0x150>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fe ff9d 	bl	8006ba6 <USBD_SetClassConfig>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00f      	beq.n	8007c96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f918 	bl	8007eae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7fe ffa9 	bl	8006bde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c94:	e014      	b.n	8007cc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f9d4 	bl	8008044 <USBD_CtlSendStatus>
      break;
 8007c9c:	e010      	b.n	8007cc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9d0 	bl	8008044 <USBD_CtlSendStatus>
      break;
 8007ca4:	e00c      	b.n	8007cc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f900 	bl	8007eae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <USBD_SetConfig+0x150>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7fe ff92 	bl	8006bde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbe:	bf00      	nop
  }

  return ret;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20000308 	.word	0x20000308

08007cd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	88db      	ldrh	r3, [r3, #6]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d004      	beq.n	8007cec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f8e2 	bl	8007eae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cea:	e023      	b.n	8007d34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	dc02      	bgt.n	8007cfe <USBD_GetConfig+0x2e>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dc03      	bgt.n	8007d04 <USBD_GetConfig+0x34>
 8007cfc:	e015      	b.n	8007d2a <USBD_GetConfig+0x5a>
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d00b      	beq.n	8007d1a <USBD_GetConfig+0x4a>
 8007d02:	e012      	b.n	8007d2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3308      	adds	r3, #8
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f93c 	bl	8007f90 <USBD_CtlSendData>
        break;
 8007d18:	e00c      	b.n	8007d34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f934 	bl	8007f90 <USBD_CtlSendData>
        break;
 8007d28:	e004      	b.n	8007d34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8be 	bl	8007eae <USBD_CtlError>
        break;
 8007d32:	bf00      	nop
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d81e      	bhi.n	8007d92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	88db      	ldrh	r3, [r3, #6]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d004      	beq.n	8007d66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8a5 	bl	8007eae <USBD_CtlError>
        break;
 8007d64:	e01a      	b.n	8007d9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f043 0202 	orr.w	r2, r3, #2
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	330c      	adds	r3, #12
 8007d86:	2202      	movs	r2, #2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f900 	bl	8007f90 <USBD_CtlSendData>
      break;
 8007d90:	e004      	b.n	8007d9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f88a 	bl	8007eae <USBD_CtlError>
      break;
 8007d9a:	bf00      	nop
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	885b      	ldrh	r3, [r3, #2]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d107      	bne.n	8007dc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f940 	bl	8008044 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007dc4:	e013      	b.n	8007dee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	885b      	ldrh	r3, [r3, #2]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d10b      	bne.n	8007de6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	889b      	ldrh	r3, [r3, #4]
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f930 	bl	8008044 <USBD_CtlSendStatus>
}
 8007de4:	e003      	b.n	8007dee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f860 	bl	8007eae <USBD_CtlError>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d80b      	bhi.n	8007e26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	885b      	ldrh	r3, [r3, #2]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d10c      	bne.n	8007e30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f910 	bl	8008044 <USBD_CtlSendStatus>
      }
      break;
 8007e24:	e004      	b.n	8007e30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f840 	bl	8007eae <USBD_CtlError>
      break;
 8007e2e:	e000      	b.n	8007e32 <USBD_ClrFeature+0x3c>
      break;
 8007e30:	bf00      	nop
  }
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff fa41 	bl	80072ec <SWAPBYTE>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff fa34 	bl	80072ec <SWAPBYTE>
 8007e84:	4603      	mov	r3, r0
 8007e86:	461a      	mov	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fa27 	bl	80072ec <SWAPBYTE>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	80da      	strh	r2, [r3, #6]
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eb8:	2180      	movs	r1, #128	; 0x80
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f003 fa46 	bl	800b34c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f003 fa42 	bl	800b34c <USBD_LL_StallEP>
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d036      	beq.n	8007f54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007eea:	6938      	ldr	r0, [r7, #16]
 8007eec:	f000 f836 	bl	8007f5c <USBD_GetLen>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	4413      	add	r3, r2
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	7812      	ldrb	r2, [r2, #0]
 8007f08:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	2203      	movs	r2, #3
 8007f18:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f20:	e013      	b.n	8007f4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	4413      	add	r3, r2
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	7812      	ldrb	r2, [r2, #0]
 8007f2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	3301      	adds	r3, #1
 8007f32:	613b      	str	r3, [r7, #16]
    idx++;
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	3301      	adds	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	4413      	add	r3, r2
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	3301      	adds	r3, #1
 8007f48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e7      	bne.n	8007f22 <USBD_GetString+0x52>
 8007f52:	e000      	b.n	8007f56 <USBD_GetString+0x86>
    return;
 8007f54:	bf00      	nop
  }
}
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f6c:	e005      	b.n	8007f7a <USBD_GetLen+0x1e>
  {
    len++;
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	3301      	adds	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1f5      	bne.n	8007f6e <USBD_GetLen+0x12>
  }

  return len;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f003 fa51 	bl	800b45e <USBD_LL_Transmit>

  return USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f003 fa40 	bl	800b45e <USBD_LL_Transmit>

  return USBD_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2203      	movs	r2, #3
 8007ff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	2100      	movs	r1, #0
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f003 fa44 	bl	800b4a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	2100      	movs	r1, #0
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f003 fa33 	bl	800b4a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2204      	movs	r2, #4
 8008050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008054:	2300      	movs	r3, #0
 8008056:	2200      	movs	r2, #0
 8008058:	2100      	movs	r1, #0
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f003 f9ff 	bl	800b45e <USBD_LL_Transmit>

  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2205      	movs	r2, #5
 8008076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800807a:	2300      	movs	r3, #0
 800807c:	2200      	movs	r2, #0
 800807e:	2100      	movs	r1, #0
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f003 fa0d 	bl	800b4a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <__NVIC_SetPriority>:
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800809c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db0a      	blt.n	80080ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	490c      	ldr	r1, [pc, #48]	; (80080dc <__NVIC_SetPriority+0x4c>)
 80080aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ae:	0112      	lsls	r2, r2, #4
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	440b      	add	r3, r1
 80080b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80080b8:	e00a      	b.n	80080d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	4908      	ldr	r1, [pc, #32]	; (80080e0 <__NVIC_SetPriority+0x50>)
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	3b04      	subs	r3, #4
 80080c8:	0112      	lsls	r2, r2, #4
 80080ca:	b2d2      	uxtb	r2, r2
 80080cc:	440b      	add	r3, r1
 80080ce:	761a      	strb	r2, [r3, #24]
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	e000e100 	.word	0xe000e100
 80080e0:	e000ed00 	.word	0xe000ed00

080080e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <SysTick_Handler+0x1c>)
 80080ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80080ec:	f001 fcfe 	bl	8009aec <xTaskGetSchedulerState>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d001      	beq.n	80080fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80080f6:	f002 fae7 	bl	800a6c8 <xPortSysTickHandler>
  }
}
 80080fa:	bf00      	nop
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	e000e010 	.word	0xe000e010

08008104 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008108:	2100      	movs	r1, #0
 800810a:	f06f 0004 	mvn.w	r0, #4
 800810e:	f7ff ffbf 	bl	8008090 <__NVIC_SetPriority>
#endif
}
 8008112:	bf00      	nop
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800811e:	f3ef 8305 	mrs	r3, IPSR
 8008122:	603b      	str	r3, [r7, #0]
  return(result);
 8008124:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800812a:	f06f 0305 	mvn.w	r3, #5
 800812e:	607b      	str	r3, [r7, #4]
 8008130:	e00c      	b.n	800814c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008132:	4b0a      	ldr	r3, [pc, #40]	; (800815c <osKernelInitialize+0x44>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800813a:	4b08      	ldr	r3, [pc, #32]	; (800815c <osKernelInitialize+0x44>)
 800813c:	2201      	movs	r2, #1
 800813e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008140:	2300      	movs	r3, #0
 8008142:	607b      	str	r3, [r7, #4]
 8008144:	e002      	b.n	800814c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008146:	f04f 33ff 	mov.w	r3, #4294967295
 800814a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800814c:	687b      	ldr	r3, [r7, #4]
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	2000030c 	.word	0x2000030c

08008160 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008166:	f3ef 8305 	mrs	r3, IPSR
 800816a:	603b      	str	r3, [r7, #0]
  return(result);
 800816c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008172:	f06f 0305 	mvn.w	r3, #5
 8008176:	607b      	str	r3, [r7, #4]
 8008178:	e010      	b.n	800819c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800817a:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <osKernelStart+0x48>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d109      	bne.n	8008196 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008182:	f7ff ffbf 	bl	8008104 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008186:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <osKernelStart+0x48>)
 8008188:	2202      	movs	r2, #2
 800818a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800818c:	f001 f866 	bl	800925c <vTaskStartScheduler>
      stat = osOK;
 8008190:	2300      	movs	r3, #0
 8008192:	607b      	str	r3, [r7, #4]
 8008194:	e002      	b.n	800819c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008196:	f04f 33ff 	mov.w	r3, #4294967295
 800819a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800819c:	687b      	ldr	r3, [r7, #4]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	2000030c 	.word	0x2000030c

080081ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08e      	sub	sp, #56	; 0x38
 80081b0:	af04      	add	r7, sp, #16
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081bc:	f3ef 8305 	mrs	r3, IPSR
 80081c0:	617b      	str	r3, [r7, #20]
  return(result);
 80081c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d17e      	bne.n	80082c6 <osThreadNew+0x11a>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d07b      	beq.n	80082c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80081ce:	2380      	movs	r3, #128	; 0x80
 80081d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80081d2:	2318      	movs	r3, #24
 80081d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80081da:	f04f 33ff 	mov.w	r3, #4294967295
 80081de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d045      	beq.n	8008272 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <osThreadNew+0x48>
        name = attr->name;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d008      	beq.n	800821a <osThreadNew+0x6e>
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	2b38      	cmp	r3, #56	; 0x38
 800820c:	d805      	bhi.n	800821a <osThreadNew+0x6e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <osThreadNew+0x72>
        return (NULL);
 800821a:	2300      	movs	r3, #0
 800821c:	e054      	b.n	80082c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	089b      	lsrs	r3, r3, #2
 800822c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00e      	beq.n	8008254 <osThreadNew+0xa8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	2b5b      	cmp	r3, #91	; 0x5b
 800823c:	d90a      	bls.n	8008254 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008242:	2b00      	cmp	r3, #0
 8008244:	d006      	beq.n	8008254 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <osThreadNew+0xa8>
        mem = 1;
 800824e:	2301      	movs	r3, #1
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	e010      	b.n	8008276 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10c      	bne.n	8008276 <osThreadNew+0xca>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d108      	bne.n	8008276 <osThreadNew+0xca>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <osThreadNew+0xca>
          mem = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	61bb      	str	r3, [r7, #24]
 8008270:	e001      	b.n	8008276 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d110      	bne.n	800829e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008284:	9202      	str	r2, [sp, #8]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	6a3a      	ldr	r2, [r7, #32]
 8008290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fe0c 	bl	8008eb0 <xTaskCreateStatic>
 8008298:	4603      	mov	r3, r0
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	e013      	b.n	80082c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d110      	bne.n	80082c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 fe57 	bl	8008f6a <xTaskCreate>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d001      	beq.n	80082c6 <osThreadNew+0x11a>
            hTask = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80082c6:	693b      	ldr	r3, [r7, #16]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3728      	adds	r7, #40	; 0x28
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082d8:	f3ef 8305 	mrs	r3, IPSR
 80082dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80082de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <osDelay+0x1c>
    stat = osErrorISR;
 80082e4:	f06f 0305 	mvn.w	r3, #5
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	e007      	b.n	80082fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 ff7c 	bl	80091f4 <vTaskDelay>
    }
  }

  return (stat);
 80082fc:	68fb      	ldr	r3, [r7, #12]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4a07      	ldr	r2, [pc, #28]	; (8008334 <vApplicationGetIdleTaskMemory+0x2c>)
 8008318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4a06      	ldr	r2, [pc, #24]	; (8008338 <vApplicationGetIdleTaskMemory+0x30>)
 800831e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2280      	movs	r2, #128	; 0x80
 8008324:	601a      	str	r2, [r3, #0]
}
 8008326:	bf00      	nop
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	20000310 	.word	0x20000310
 8008338:	2000036c 	.word	0x2000036c

0800833c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4a07      	ldr	r2, [pc, #28]	; (8008368 <vApplicationGetTimerTaskMemory+0x2c>)
 800834c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	4a06      	ldr	r2, [pc, #24]	; (800836c <vApplicationGetTimerTaskMemory+0x30>)
 8008352:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800835a:	601a      	str	r2, [r3, #0]
}
 800835c:	bf00      	nop
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	2000056c 	.word	0x2000056c
 800836c:	200005c8 	.word	0x200005c8

08008370 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f103 0208 	add.w	r2, r3, #8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f04f 32ff 	mov.w	r2, #4294967295
 8008388:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f103 0208 	add.w	r2, r3, #8
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f103 0208 	add.w	r2, r3, #8
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	601a      	str	r2, [r3, #0]
}
 8008406:	bf00      	nop
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008428:	d103      	bne.n	8008432 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	e00c      	b.n	800844c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3308      	adds	r3, #8
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e002      	b.n	8008440 <vListInsert+0x2e>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	429a      	cmp	r2, r3
 800844a:	d2f6      	bcs.n	800843a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]
}
 8008478:	bf00      	nop
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	6892      	ldr	r2, [r2, #8]
 800849a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	6852      	ldr	r2, [r2, #4]
 80084a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d103      	bne.n	80084b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	1e5a      	subs	r2, r3, #1
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10a      	bne.n	8008502 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008502:	f002 f84f 	bl	800a5a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008512:	fb01 f303 	mul.w	r3, r1, r3
 8008516:	441a      	add	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	3b01      	subs	r3, #1
 8008534:	68f9      	ldr	r1, [r7, #12]
 8008536:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008538:	fb01 f303 	mul.w	r3, r1, r3
 800853c:	441a      	add	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	22ff      	movs	r2, #255	; 0xff
 8008546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	22ff      	movs	r2, #255	; 0xff
 800854e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d114      	bne.n	8008582 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01a      	beq.n	8008596 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3310      	adds	r3, #16
 8008564:	4618      	mov	r0, r3
 8008566:	f001 f903 	bl	8009770 <xTaskRemoveFromEventList>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d012      	beq.n	8008596 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008570:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <xQueueGenericReset+0xcc>)
 8008572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	e009      	b.n	8008596 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3310      	adds	r3, #16
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff fef2 	bl	8008370 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3324      	adds	r3, #36	; 0x24
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff feed 	bl	8008370 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008596:	f002 f835 	bl	800a604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800859a:	2301      	movs	r3, #1
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	e000ed04 	.word	0xe000ed04

080085a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08e      	sub	sp, #56	; 0x38
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085ea:	bf00      	nop
 80085ec:	e7fe      	b.n	80085ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <xQueueGenericCreateStatic+0x52>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <xQueueGenericCreateStatic+0x56>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <xQueueGenericCreateStatic+0x58>
 80085fe:	2300      	movs	r3, #0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	623b      	str	r3, [r7, #32]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <xQueueGenericCreateStatic+0x7e>
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <xQueueGenericCreateStatic+0x82>
 8008626:	2301      	movs	r3, #1
 8008628:	e000      	b.n	800862c <xQueueGenericCreateStatic+0x84>
 800862a:	2300      	movs	r3, #0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	61fb      	str	r3, [r7, #28]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008646:	2350      	movs	r3, #80	; 0x50
 8008648:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b50      	cmp	r3, #80	; 0x50
 800864e:	d00a      	beq.n	8008666 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	61bb      	str	r3, [r7, #24]
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008666:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00d      	beq.n	800868e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800867a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	4613      	mov	r3, r2
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 f805 	bl	8008698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008690:	4618      	mov	r0, r3
 8008692:	3730      	adds	r7, #48	; 0x30
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
 80086a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d103      	bne.n	80086b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	e002      	b.n	80086ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086c6:	2101      	movs	r1, #1
 80086c8:	69b8      	ldr	r0, [r7, #24]
 80086ca:	f7ff ff05 	bl	80084d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08e      	sub	sp, #56	; 0x38
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80086ee:	2300      	movs	r3, #0
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <xQueueGenericSend+0x32>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800870e:	bf00      	nop
 8008710:	e7fe      	b.n	8008710 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d103      	bne.n	8008720 <xQueueGenericSend+0x40>
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <xQueueGenericSend+0x44>
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <xQueueGenericSend+0x46>
 8008724:	2300      	movs	r3, #0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10a      	bne.n	8008740 <xQueueGenericSend+0x60>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	2b02      	cmp	r3, #2
 8008744:	d103      	bne.n	800874e <xQueueGenericSend+0x6e>
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <xQueueGenericSend+0x72>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <xQueueGenericSend+0x74>
 8008752:	2300      	movs	r3, #0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <xQueueGenericSend+0x8e>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	623b      	str	r3, [r7, #32]
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800876e:	f001 f9bd 	bl	8009aec <xTaskGetSchedulerState>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <xQueueGenericSend+0x9e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <xQueueGenericSend+0xa2>
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <xQueueGenericSend+0xa4>
 8008782:	2300      	movs	r3, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <xQueueGenericSend+0xbe>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	61fb      	str	r3, [r7, #28]
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800879e:	f001 ff01 	bl	800a5a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d302      	bcc.n	80087b4 <xQueueGenericSend+0xd4>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d129      	bne.n	8008808 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ba:	f000 fa0b 	bl	8008bd4 <prvCopyDataToQueue>
 80087be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d010      	beq.n	80087ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ca:	3324      	adds	r3, #36	; 0x24
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 ffcf 	bl	8009770 <xTaskRemoveFromEventList>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d013      	beq.n	8008800 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80087d8:	4b3f      	ldr	r3, [pc, #252]	; (80088d8 <xQueueGenericSend+0x1f8>)
 80087da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	e00a      	b.n	8008800 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80087f0:	4b39      	ldr	r3, [pc, #228]	; (80088d8 <xQueueGenericSend+0x1f8>)
 80087f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008800:	f001 ff00 	bl	800a604 <vPortExitCritical>
				return pdPASS;
 8008804:	2301      	movs	r3, #1
 8008806:	e063      	b.n	80088d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d103      	bne.n	8008816 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800880e:	f001 fef9 	bl	800a604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008812:	2300      	movs	r3, #0
 8008814:	e05c      	b.n	80088d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800881c:	f107 0314 	add.w	r3, r7, #20
 8008820:	4618      	mov	r0, r3
 8008822:	f001 f809 	bl	8009838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008826:	2301      	movs	r3, #1
 8008828:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800882a:	f001 feeb 	bl	800a604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800882e:	f000 fd7b 	bl	8009328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008832:	f001 feb7 	bl	800a5a4 <vPortEnterCritical>
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800883c:	b25b      	sxtb	r3, r3
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d103      	bne.n	800884c <xQueueGenericSend+0x16c>
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008852:	b25b      	sxtb	r3, r3
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d103      	bne.n	8008862 <xQueueGenericSend+0x182>
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008862:	f001 fecf 	bl	800a604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008866:	1d3a      	adds	r2, r7, #4
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fff8 	bl	8009864 <xTaskCheckForTimeOut>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d124      	bne.n	80088c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800887a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800887c:	f000 faa2 	bl	8008dc4 <prvIsQueueFull>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	3310      	adds	r3, #16
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	4611      	mov	r1, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f000 ff1e 	bl	80096d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008896:	f000 fa2d 	bl	8008cf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800889a:	f000 fd53 	bl	8009344 <xTaskResumeAll>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f47f af7c 	bne.w	800879e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <xQueueGenericSend+0x1f8>)
 80088a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	e772      	b.n	800879e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ba:	f000 fa1b 	bl	8008cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088be:	f000 fd41 	bl	8009344 <xTaskResumeAll>
 80088c2:	e76c      	b.n	800879e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c6:	f000 fa15 	bl	8008cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088ca:	f000 fd3b 	bl	8009344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3738      	adds	r7, #56	; 0x38
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	e000ed04 	.word	0xe000ed04

080088dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b090      	sub	sp, #64	; 0x40
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10a      	bne.n	800890a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008906:	bf00      	nop
 8008908:	e7fe      	b.n	8008908 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d103      	bne.n	8008918 <xQueueGenericSendFromISR+0x3c>
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <xQueueGenericSendFromISR+0x40>
 8008918:	2301      	movs	r3, #1
 800891a:	e000      	b.n	800891e <xQueueGenericSendFromISR+0x42>
 800891c:	2300      	movs	r3, #0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d103      	bne.n	8008946 <xQueueGenericSendFromISR+0x6a>
 800893e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <xQueueGenericSendFromISR+0x6e>
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <xQueueGenericSendFromISR+0x70>
 800894a:	2300      	movs	r3, #0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	623b      	str	r3, [r7, #32]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008966:	f001 feff 	bl	800a768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800896a:	f3ef 8211 	mrs	r2, BASEPRI
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	61fa      	str	r2, [r7, #28]
 8008980:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008982:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008984:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898e:	429a      	cmp	r2, r3
 8008990:	d302      	bcc.n	8008998 <xQueueGenericSendFromISR+0xbc>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d12f      	bne.n	80089f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800899e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089ae:	f000 f911 	bl	8008bd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ba:	d112      	bne.n	80089e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d016      	beq.n	80089f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	3324      	adds	r3, #36	; 0x24
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fed1 	bl	8009770 <xTaskRemoveFromEventList>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00e      	beq.n	80089f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00b      	beq.n	80089f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e007      	b.n	80089f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089e6:	3301      	adds	r3, #1
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	b25a      	sxtb	r2, r3
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089f2:	2301      	movs	r3, #1
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80089f6:	e001      	b.n	80089fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3740      	adds	r7, #64	; 0x40
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08c      	sub	sp, #48	; 0x30
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a20:	2300      	movs	r3, #0
 8008a22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <xQueueReceive+0x30>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	623b      	str	r3, [r7, #32]
}
 8008a40:	bf00      	nop
 8008a42:	e7fe      	b.n	8008a42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d103      	bne.n	8008a52 <xQueueReceive+0x3e>
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <xQueueReceive+0x42>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e000      	b.n	8008a58 <xQueueReceive+0x44>
 8008a56:	2300      	movs	r3, #0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <xQueueReceive+0x5e>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	61fb      	str	r3, [r7, #28]
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a72:	f001 f83b 	bl	8009aec <xTaskGetSchedulerState>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <xQueueReceive+0x6e>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <xQueueReceive+0x72>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e000      	b.n	8008a88 <xQueueReceive+0x74>
 8008a86:	2300      	movs	r3, #0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10a      	bne.n	8008aa2 <xQueueReceive+0x8e>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	61bb      	str	r3, [r7, #24]
}
 8008a9e:	bf00      	nop
 8008aa0:	e7fe      	b.n	8008aa0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aa2:	f001 fd7f 	bl	800a5a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01f      	beq.n	8008af2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ab6:	f000 f8f7 	bl	8008ca8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	1e5a      	subs	r2, r3, #1
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00f      	beq.n	8008aea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	3310      	adds	r3, #16
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fe4e 	bl	8009770 <xTaskRemoveFromEventList>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ada:	4b3d      	ldr	r3, [pc, #244]	; (8008bd0 <xQueueReceive+0x1bc>)
 8008adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008aea:	f001 fd8b 	bl	800a604 <vPortExitCritical>
				return pdPASS;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e069      	b.n	8008bc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d103      	bne.n	8008b00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008af8:	f001 fd84 	bl	800a604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008afc:	2300      	movs	r3, #0
 8008afe:	e062      	b.n	8008bc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b06:	f107 0310 	add.w	r3, r7, #16
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fe94 	bl	8009838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b10:	2301      	movs	r3, #1
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b14:	f001 fd76 	bl	800a604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b18:	f000 fc06 	bl	8009328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b1c:	f001 fd42 	bl	800a5a4 <vPortEnterCritical>
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b26:	b25b      	sxtb	r3, r3
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2c:	d103      	bne.n	8008b36 <xQueueReceive+0x122>
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b3c:	b25b      	sxtb	r3, r3
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b42:	d103      	bne.n	8008b4c <xQueueReceive+0x138>
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b4c:	f001 fd5a 	bl	800a604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b50:	1d3a      	adds	r2, r7, #4
 8008b52:	f107 0310 	add.w	r3, r7, #16
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fe83 	bl	8009864 <xTaskCheckForTimeOut>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d123      	bne.n	8008bac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b66:	f000 f917 	bl	8008d98 <prvIsQueueEmpty>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d017      	beq.n	8008ba0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	3324      	adds	r3, #36	; 0x24
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	4611      	mov	r1, r2
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fda9 	bl	80096d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b80:	f000 f8b8 	bl	8008cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b84:	f000 fbde 	bl	8009344 <xTaskResumeAll>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d189      	bne.n	8008aa2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b8e:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <xQueueReceive+0x1bc>)
 8008b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	e780      	b.n	8008aa2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba2:	f000 f8a7 	bl	8008cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ba6:	f000 fbcd 	bl	8009344 <xTaskResumeAll>
 8008baa:	e77a      	b.n	8008aa2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bae:	f000 f8a1 	bl	8008cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bb2:	f000 fbc7 	bl	8009344 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb8:	f000 f8ee 	bl	8008d98 <prvIsQueueEmpty>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f43f af6f 	beq.w	8008aa2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3730      	adds	r7, #48	; 0x30
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10d      	bne.n	8008c0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d14d      	bne.n	8008c96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 ff92 	bl	8009b28 <xTaskPriorityDisinherit>
 8008c04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	609a      	str	r2, [r3, #8]
 8008c0c:	e043      	b.n	8008c96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d119      	bne.n	8008c48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6858      	ldr	r0, [r3, #4]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	68b9      	ldr	r1, [r7, #8]
 8008c20:	f002 fcda 	bl	800b5d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	441a      	add	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d32b      	bcc.n	8008c96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	605a      	str	r2, [r3, #4]
 8008c46:	e026      	b.n	8008c96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	68d8      	ldr	r0, [r3, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c50:	461a      	mov	r2, r3
 8008c52:	68b9      	ldr	r1, [r7, #8]
 8008c54:	f002 fcc0 	bl	800b5d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c60:	425b      	negs	r3, r3
 8008c62:	441a      	add	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d207      	bcs.n	8008c84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	425b      	negs	r3, r3
 8008c7e:	441a      	add	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d105      	bne.n	8008c96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c9e:	697b      	ldr	r3, [r7, #20]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d018      	beq.n	8008cec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	441a      	add	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d303      	bcc.n	8008cdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68d9      	ldr	r1, [r3, #12]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6838      	ldr	r0, [r7, #0]
 8008ce8:	f002 fc76 	bl	800b5d8 <memcpy>
	}
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cfc:	f001 fc52 	bl	800a5a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d08:	e011      	b.n	8008d2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d012      	beq.n	8008d38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3324      	adds	r3, #36	; 0x24
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fd2a 	bl	8009770 <xTaskRemoveFromEventList>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d22:	f000 fe01 	bl	8009928 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	dce9      	bgt.n	8008d0a <prvUnlockQueue+0x16>
 8008d36:	e000      	b.n	8008d3a <prvUnlockQueue+0x46>
					break;
 8008d38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	22ff      	movs	r2, #255	; 0xff
 8008d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d42:	f001 fc5f 	bl	800a604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d46:	f001 fc2d 	bl	800a5a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d52:	e011      	b.n	8008d78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d012      	beq.n	8008d82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	3310      	adds	r3, #16
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 fd05 	bl	8009770 <xTaskRemoveFromEventList>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d6c:	f000 fddc 	bl	8009928 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dce9      	bgt.n	8008d54 <prvUnlockQueue+0x60>
 8008d80:	e000      	b.n	8008d84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	22ff      	movs	r2, #255	; 0xff
 8008d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d8c:	f001 fc3a 	bl	800a604 <vPortExitCritical>
}
 8008d90:	bf00      	nop
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008da0:	f001 fc00 	bl	800a5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d102      	bne.n	8008db2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008dac:	2301      	movs	r3, #1
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	e001      	b.n	8008db6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008db6:	f001 fc25 	bl	800a604 <vPortExitCritical>

	return xReturn;
 8008dba:	68fb      	ldr	r3, [r7, #12]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dcc:	f001 fbea 	bl	800a5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d102      	bne.n	8008de2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	e001      	b.n	8008de6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008de6:	f001 fc0d 	bl	800a604 <vPortExitCritical>

	return xReturn;
 8008dea:	68fb      	ldr	r3, [r7, #12]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
 8008e02:	e014      	b.n	8008e2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e04:	4a0f      	ldr	r2, [pc, #60]	; (8008e44 <vQueueAddToRegistry+0x50>)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10b      	bne.n	8008e28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e10:	490c      	ldr	r1, [pc, #48]	; (8008e44 <vQueueAddToRegistry+0x50>)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e1a:	4a0a      	ldr	r2, [pc, #40]	; (8008e44 <vQueueAddToRegistry+0x50>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	4413      	add	r3, r2
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e26:	e006      	b.n	8008e36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b07      	cmp	r3, #7
 8008e32:	d9e7      	bls.n	8008e04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	200009c8 	.word	0x200009c8

08008e48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e58:	f001 fba4 	bl	800a5a4 <vPortEnterCritical>
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e62:	b25b      	sxtb	r3, r3
 8008e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e68:	d103      	bne.n	8008e72 <vQueueWaitForMessageRestricted+0x2a>
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e78:	b25b      	sxtb	r3, r3
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d103      	bne.n	8008e88 <vQueueWaitForMessageRestricted+0x40>
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e88:	f001 fbbc 	bl	800a604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d106      	bne.n	8008ea2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	3324      	adds	r3, #36	; 0x24
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	68b9      	ldr	r1, [r7, #8]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fc3b 	bl	8009718 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ea2:	6978      	ldr	r0, [r7, #20]
 8008ea4:	f7ff ff26 	bl	8008cf4 <prvUnlockQueue>
	}
 8008ea8:	bf00      	nop
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08e      	sub	sp, #56	; 0x38
 8008eb4:	af04      	add	r7, sp, #16
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	623b      	str	r3, [r7, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10a      	bne.n	8008ef6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	61fb      	str	r3, [r7, #28]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ef6:	235c      	movs	r3, #92	; 0x5c
 8008ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b5c      	cmp	r3, #92	; 0x5c
 8008efe:	d00a      	beq.n	8008f16 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	61bb      	str	r3, [r7, #24]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d01e      	beq.n	8008f5c <xTaskCreateStatic+0xac>
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01b      	beq.n	8008f5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	2202      	movs	r2, #2
 8008f32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f36:	2300      	movs	r3, #0
 8008f38:	9303      	str	r3, [sp, #12]
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	9302      	str	r3, [sp, #8]
 8008f3e:	f107 0314 	add.w	r3, r7, #20
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	68b9      	ldr	r1, [r7, #8]
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 f850 	bl	8008ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f56:	f000 f8dd 	bl	8009114 <prvAddNewTaskToReadyList>
 8008f5a:	e001      	b.n	8008f60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f60:	697b      	ldr	r3, [r7, #20]
	}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3728      	adds	r7, #40	; 0x28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b08c      	sub	sp, #48	; 0x30
 8008f6e:	af04      	add	r7, sp, #16
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	603b      	str	r3, [r7, #0]
 8008f76:	4613      	mov	r3, r2
 8008f78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f7a:	88fb      	ldrh	r3, [r7, #6]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 fc32 	bl	800a7e8 <pvPortMalloc>
 8008f84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00e      	beq.n	8008faa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f8c:	205c      	movs	r0, #92	; 0x5c
 8008f8e:	f001 fc2b 	bl	800a7e8 <pvPortMalloc>
 8008f92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8008fa0:	e005      	b.n	8008fae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008fa2:	6978      	ldr	r0, [r7, #20]
 8008fa4:	f001 fcec 	bl	800a980 <vPortFree>
 8008fa8:	e001      	b.n	8008fae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d017      	beq.n	8008fe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fbc:	88fa      	ldrh	r2, [r7, #6]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	9302      	str	r3, [sp, #8]
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	68b9      	ldr	r1, [r7, #8]
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 f80e 	bl	8008ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fd8:	69f8      	ldr	r0, [r7, #28]
 8008fda:	f000 f89b 	bl	8009114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	61bb      	str	r3, [r7, #24]
 8008fe2:	e002      	b.n	8008fea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fea:	69bb      	ldr	r3, [r7, #24]
	}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3720      	adds	r7, #32
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	461a      	mov	r2, r3
 800900c:	21a5      	movs	r1, #165	; 0xa5
 800900e:	f002 faf1 	bl	800b5f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800901c:	3b01      	subs	r3, #1
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	f023 0307 	bic.w	r3, r3, #7
 800902a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	617b      	str	r3, [r7, #20]
}
 8009048:	bf00      	nop
 800904a:	e7fe      	b.n	800904a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01f      	beq.n	8009092 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009052:	2300      	movs	r3, #0
 8009054:	61fb      	str	r3, [r7, #28]
 8009056:	e012      	b.n	800907e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	4413      	add	r3, r2
 800905e:	7819      	ldrb	r1, [r3, #0]
 8009060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	4413      	add	r3, r2
 8009066:	3334      	adds	r3, #52	; 0x34
 8009068:	460a      	mov	r2, r1
 800906a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	4413      	add	r3, r2
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d006      	beq.n	8009086 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	3301      	adds	r3, #1
 800907c:	61fb      	str	r3, [r7, #28]
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	2b0f      	cmp	r3, #15
 8009082:	d9e9      	bls.n	8009058 <prvInitialiseNewTask+0x64>
 8009084:	e000      	b.n	8009088 <prvInitialiseNewTask+0x94>
			{
				break;
 8009086:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009090:	e003      	b.n	800909a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	2b37      	cmp	r3, #55	; 0x37
 800909e:	d901      	bls.n	80090a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090a0:	2337      	movs	r3, #55	; 0x37
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	2200      	movs	r2, #0
 80090b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	3304      	adds	r3, #4
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff f978 	bl	80083b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	3318      	adds	r3, #24
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7ff f973 	bl	80083b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e2:	2200      	movs	r2, #0
 80090e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	68f9      	ldr	r1, [r7, #12]
 80090f2:	69b8      	ldr	r0, [r7, #24]
 80090f4:	f001 f928 	bl	800a348 <pxPortInitialiseStack>
 80090f8:	4602      	mov	r2, r0
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800910a:	bf00      	nop
 800910c:	3720      	adds	r7, #32
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800911c:	f001 fa42 	bl	800a5a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009120:	4b2d      	ldr	r3, [pc, #180]	; (80091d8 <prvAddNewTaskToReadyList+0xc4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3301      	adds	r3, #1
 8009126:	4a2c      	ldr	r2, [pc, #176]	; (80091d8 <prvAddNewTaskToReadyList+0xc4>)
 8009128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800912a:	4b2c      	ldr	r3, [pc, #176]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009132:	4a2a      	ldr	r2, [pc, #168]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009138:	4b27      	ldr	r3, [pc, #156]	; (80091d8 <prvAddNewTaskToReadyList+0xc4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d110      	bne.n	8009162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009140:	f000 fc16 	bl	8009970 <prvInitialiseTaskLists>
 8009144:	e00d      	b.n	8009162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009146:	4b26      	ldr	r3, [pc, #152]	; (80091e0 <prvAddNewTaskToReadyList+0xcc>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d109      	bne.n	8009162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800914e:	4b23      	ldr	r3, [pc, #140]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	429a      	cmp	r2, r3
 800915a:	d802      	bhi.n	8009162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800915c:	4a1f      	ldr	r2, [pc, #124]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009162:	4b20      	ldr	r3, [pc, #128]	; (80091e4 <prvAddNewTaskToReadyList+0xd0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <prvAddNewTaskToReadyList+0xd0>)
 800916a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800916c:	4b1d      	ldr	r3, [pc, #116]	; (80091e4 <prvAddNewTaskToReadyList+0xd0>)
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4b1b      	ldr	r3, [pc, #108]	; (80091e8 <prvAddNewTaskToReadyList+0xd4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d903      	bls.n	8009188 <prvAddNewTaskToReadyList+0x74>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	4a18      	ldr	r2, [pc, #96]	; (80091e8 <prvAddNewTaskToReadyList+0xd4>)
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4a15      	ldr	r2, [pc, #84]	; (80091ec <prvAddNewTaskToReadyList+0xd8>)
 8009196:	441a      	add	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3304      	adds	r3, #4
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f7ff f913 	bl	80083ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091a4:	f001 fa2e 	bl	800a604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091a8:	4b0d      	ldr	r3, [pc, #52]	; (80091e0 <prvAddNewTaskToReadyList+0xcc>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00e      	beq.n	80091ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <prvAddNewTaskToReadyList+0xc8>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d207      	bcs.n	80091ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <prvAddNewTaskToReadyList+0xdc>)
 80091c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000edc 	.word	0x20000edc
 80091dc:	20000a08 	.word	0x20000a08
 80091e0:	20000ee8 	.word	0x20000ee8
 80091e4:	20000ef8 	.word	0x20000ef8
 80091e8:	20000ee4 	.word	0x20000ee4
 80091ec:	20000a0c 	.word	0x20000a0c
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091fc:	2300      	movs	r3, #0
 80091fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d017      	beq.n	8009236 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009206:	4b13      	ldr	r3, [pc, #76]	; (8009254 <vTaskDelay+0x60>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00a      	beq.n	8009224 <vTaskDelay+0x30>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	60bb      	str	r3, [r7, #8]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009224:	f000 f880 	bl	8009328 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009228:	2100      	movs	r1, #0
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fcea 	bl	8009c04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009230:	f000 f888 	bl	8009344 <xTaskResumeAll>
 8009234:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d107      	bne.n	800924c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800923c:	4b06      	ldr	r3, [pc, #24]	; (8009258 <vTaskDelay+0x64>)
 800923e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800924c:	bf00      	nop
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000f04 	.word	0x20000f04
 8009258:	e000ed04 	.word	0xe000ed04

0800925c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08a      	sub	sp, #40	; 0x28
 8009260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800926a:	463a      	mov	r2, r7
 800926c:	1d39      	adds	r1, r7, #4
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff f848 	bl	8008308 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	9202      	str	r2, [sp, #8]
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	2300      	movs	r3, #0
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	2300      	movs	r3, #0
 8009288:	460a      	mov	r2, r1
 800928a:	4921      	ldr	r1, [pc, #132]	; (8009310 <vTaskStartScheduler+0xb4>)
 800928c:	4821      	ldr	r0, [pc, #132]	; (8009314 <vTaskStartScheduler+0xb8>)
 800928e:	f7ff fe0f 	bl	8008eb0 <xTaskCreateStatic>
 8009292:	4603      	mov	r3, r0
 8009294:	4a20      	ldr	r2, [pc, #128]	; (8009318 <vTaskStartScheduler+0xbc>)
 8009296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009298:	4b1f      	ldr	r3, [pc, #124]	; (8009318 <vTaskStartScheduler+0xbc>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80092a0:	2301      	movs	r3, #1
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	e001      	b.n	80092aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d102      	bne.n	80092b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092b0:	f000 fcfc 	bl	8009cac <xTimerCreateTimerTask>
 80092b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d116      	bne.n	80092ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	613b      	str	r3, [r7, #16]
}
 80092ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092d0:	4b12      	ldr	r3, [pc, #72]	; (800931c <vTaskStartScheduler+0xc0>)
 80092d2:	f04f 32ff 	mov.w	r2, #4294967295
 80092d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092d8:	4b11      	ldr	r3, [pc, #68]	; (8009320 <vTaskStartScheduler+0xc4>)
 80092da:	2201      	movs	r2, #1
 80092dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092de:	4b11      	ldr	r3, [pc, #68]	; (8009324 <vTaskStartScheduler+0xc8>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092e4:	f001 f8bc 	bl	800a460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092e8:	e00e      	b.n	8009308 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f0:	d10a      	bne.n	8009308 <vTaskStartScheduler+0xac>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	60fb      	str	r3, [r7, #12]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <vTaskStartScheduler+0xaa>
}
 8009308:	bf00      	nop
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	0800b634 	.word	0x0800b634
 8009314:	08009941 	.word	0x08009941
 8009318:	20000f00 	.word	0x20000f00
 800931c:	20000efc 	.word	0x20000efc
 8009320:	20000ee8 	.word	0x20000ee8
 8009324:	20000ee0 	.word	0x20000ee0

08009328 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <vTaskSuspendAll+0x18>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3301      	adds	r3, #1
 8009332:	4a03      	ldr	r2, [pc, #12]	; (8009340 <vTaskSuspendAll+0x18>)
 8009334:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009336:	bf00      	nop
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	20000f04 	.word	0x20000f04

08009344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009352:	4b42      	ldr	r3, [pc, #264]	; (800945c <xTaskResumeAll+0x118>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10a      	bne.n	8009370 <xTaskResumeAll+0x2c>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	603b      	str	r3, [r7, #0]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009370:	f001 f918 	bl	800a5a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009374:	4b39      	ldr	r3, [pc, #228]	; (800945c <xTaskResumeAll+0x118>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3b01      	subs	r3, #1
 800937a:	4a38      	ldr	r2, [pc, #224]	; (800945c <xTaskResumeAll+0x118>)
 800937c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800937e:	4b37      	ldr	r3, [pc, #220]	; (800945c <xTaskResumeAll+0x118>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d162      	bne.n	800944c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009386:	4b36      	ldr	r3, [pc, #216]	; (8009460 <xTaskResumeAll+0x11c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d05e      	beq.n	800944c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800938e:	e02f      	b.n	80093f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009390:	4b34      	ldr	r3, [pc, #208]	; (8009464 <xTaskResumeAll+0x120>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3318      	adds	r3, #24
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff f871 	bl	8008484 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff f86c 	bl	8008484 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b0:	4b2d      	ldr	r3, [pc, #180]	; (8009468 <xTaskResumeAll+0x124>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d903      	bls.n	80093c0 <xTaskResumeAll+0x7c>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	4a2a      	ldr	r2, [pc, #168]	; (8009468 <xTaskResumeAll+0x124>)
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4a27      	ldr	r2, [pc, #156]	; (800946c <xTaskResumeAll+0x128>)
 80093ce:	441a      	add	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4619      	mov	r1, r3
 80093d6:	4610      	mov	r0, r2
 80093d8:	f7fe fff7 	bl	80083ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e0:	4b23      	ldr	r3, [pc, #140]	; (8009470 <xTaskResumeAll+0x12c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d302      	bcc.n	80093f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093ea:	4b22      	ldr	r3, [pc, #136]	; (8009474 <xTaskResumeAll+0x130>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093f0:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <xTaskResumeAll+0x120>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1cb      	bne.n	8009390 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093fe:	f000 fb55 	bl	8009aac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009402:	4b1d      	ldr	r3, [pc, #116]	; (8009478 <xTaskResumeAll+0x134>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800940e:	f000 f847 	bl	80094a0 <xTaskIncrementTick>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009418:	4b16      	ldr	r3, [pc, #88]	; (8009474 <xTaskResumeAll+0x130>)
 800941a:	2201      	movs	r2, #1
 800941c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3b01      	subs	r3, #1
 8009422:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f1      	bne.n	800940e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <xTaskResumeAll+0x134>)
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009430:	4b10      	ldr	r3, [pc, #64]	; (8009474 <xTaskResumeAll+0x130>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800943c:	4b0f      	ldr	r3, [pc, #60]	; (800947c <xTaskResumeAll+0x138>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800944c:	f001 f8da 	bl	800a604 <vPortExitCritical>

	return xAlreadyYielded;
 8009450:	68bb      	ldr	r3, [r7, #8]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20000f04 	.word	0x20000f04
 8009460:	20000edc 	.word	0x20000edc
 8009464:	20000e9c 	.word	0x20000e9c
 8009468:	20000ee4 	.word	0x20000ee4
 800946c:	20000a0c 	.word	0x20000a0c
 8009470:	20000a08 	.word	0x20000a08
 8009474:	20000ef0 	.word	0x20000ef0
 8009478:	20000eec 	.word	0x20000eec
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009486:	4b05      	ldr	r3, [pc, #20]	; (800949c <xTaskGetTickCount+0x1c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800948c:	687b      	ldr	r3, [r7, #4]
}
 800948e:	4618      	mov	r0, r3
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	20000ee0 	.word	0x20000ee0

080094a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094aa:	4b4f      	ldr	r3, [pc, #316]	; (80095e8 <xTaskIncrementTick+0x148>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f040 808f 	bne.w	80095d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094b4:	4b4d      	ldr	r3, [pc, #308]	; (80095ec <xTaskIncrementTick+0x14c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3301      	adds	r3, #1
 80094ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094bc:	4a4b      	ldr	r2, [pc, #300]	; (80095ec <xTaskIncrementTick+0x14c>)
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d120      	bne.n	800950a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80094c8:	4b49      	ldr	r3, [pc, #292]	; (80095f0 <xTaskIncrementTick+0x150>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	603b      	str	r3, [r7, #0]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <xTaskIncrementTick+0x46>
 80094e8:	4b41      	ldr	r3, [pc, #260]	; (80095f0 <xTaskIncrementTick+0x150>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	4b41      	ldr	r3, [pc, #260]	; (80095f4 <xTaskIncrementTick+0x154>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a3f      	ldr	r2, [pc, #252]	; (80095f0 <xTaskIncrementTick+0x150>)
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	4a3f      	ldr	r2, [pc, #252]	; (80095f4 <xTaskIncrementTick+0x154>)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	4b3e      	ldr	r3, [pc, #248]	; (80095f8 <xTaskIncrementTick+0x158>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	4a3d      	ldr	r2, [pc, #244]	; (80095f8 <xTaskIncrementTick+0x158>)
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	f000 fad1 	bl	8009aac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800950a:	4b3c      	ldr	r3, [pc, #240]	; (80095fc <xTaskIncrementTick+0x15c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	429a      	cmp	r2, r3
 8009512:	d349      	bcc.n	80095a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009514:	4b36      	ldr	r3, [pc, #216]	; (80095f0 <xTaskIncrementTick+0x150>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d104      	bne.n	8009528 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951e:	4b37      	ldr	r3, [pc, #220]	; (80095fc <xTaskIncrementTick+0x15c>)
 8009520:	f04f 32ff 	mov.w	r2, #4294967295
 8009524:	601a      	str	r2, [r3, #0]
					break;
 8009526:	e03f      	b.n	80095a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009528:	4b31      	ldr	r3, [pc, #196]	; (80095f0 <xTaskIncrementTick+0x150>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	429a      	cmp	r2, r3
 800953e:	d203      	bcs.n	8009548 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009540:	4a2e      	ldr	r2, [pc, #184]	; (80095fc <xTaskIncrementTick+0x15c>)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009546:	e02f      	b.n	80095a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	3304      	adds	r3, #4
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe ff99 	bl	8008484 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3318      	adds	r3, #24
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe ff90 	bl	8008484 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009568:	4b25      	ldr	r3, [pc, #148]	; (8009600 <xTaskIncrementTick+0x160>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d903      	bls.n	8009578 <xTaskIncrementTick+0xd8>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009574:	4a22      	ldr	r2, [pc, #136]	; (8009600 <xTaskIncrementTick+0x160>)
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4a1f      	ldr	r2, [pc, #124]	; (8009604 <xTaskIncrementTick+0x164>)
 8009586:	441a      	add	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	3304      	adds	r3, #4
 800958c:	4619      	mov	r1, r3
 800958e:	4610      	mov	r0, r2
 8009590:	f7fe ff1b 	bl	80083ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <xTaskIncrementTick+0x168>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959e:	429a      	cmp	r2, r3
 80095a0:	d3b8      	bcc.n	8009514 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80095a2:	2301      	movs	r3, #1
 80095a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095a6:	e7b5      	b.n	8009514 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095a8:	4b17      	ldr	r3, [pc, #92]	; (8009608 <xTaskIncrementTick+0x168>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ae:	4915      	ldr	r1, [pc, #84]	; (8009604 <xTaskIncrementTick+0x164>)
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d901      	bls.n	80095c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80095c0:	2301      	movs	r3, #1
 80095c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095c4:	4b11      	ldr	r3, [pc, #68]	; (800960c <xTaskIncrementTick+0x16c>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d007      	beq.n	80095dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80095cc:	2301      	movs	r3, #1
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	e004      	b.n	80095dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095d2:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <xTaskIncrementTick+0x170>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3301      	adds	r3, #1
 80095d8:	4a0d      	ldr	r2, [pc, #52]	; (8009610 <xTaskIncrementTick+0x170>)
 80095da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095dc:	697b      	ldr	r3, [r7, #20]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000f04 	.word	0x20000f04
 80095ec:	20000ee0 	.word	0x20000ee0
 80095f0:	20000e94 	.word	0x20000e94
 80095f4:	20000e98 	.word	0x20000e98
 80095f8:	20000ef4 	.word	0x20000ef4
 80095fc:	20000efc 	.word	0x20000efc
 8009600:	20000ee4 	.word	0x20000ee4
 8009604:	20000a0c 	.word	0x20000a0c
 8009608:	20000a08 	.word	0x20000a08
 800960c:	20000ef0 	.word	0x20000ef0
 8009610:	20000eec 	.word	0x20000eec

08009614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800961a:	4b28      	ldr	r3, [pc, #160]	; (80096bc <vTaskSwitchContext+0xa8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d003      	beq.n	800962a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009622:	4b27      	ldr	r3, [pc, #156]	; (80096c0 <vTaskSwitchContext+0xac>)
 8009624:	2201      	movs	r2, #1
 8009626:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009628:	e041      	b.n	80096ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800962a:	4b25      	ldr	r3, [pc, #148]	; (80096c0 <vTaskSwitchContext+0xac>)
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009630:	4b24      	ldr	r3, [pc, #144]	; (80096c4 <vTaskSwitchContext+0xb0>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	e010      	b.n	800965a <vTaskSwitchContext+0x46>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <vTaskSwitchContext+0x40>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	607b      	str	r3, [r7, #4]
}
 8009650:	bf00      	nop
 8009652:	e7fe      	b.n	8009652 <vTaskSwitchContext+0x3e>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3b01      	subs	r3, #1
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	491b      	ldr	r1, [pc, #108]	; (80096c8 <vTaskSwitchContext+0xb4>)
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0e4      	beq.n	8009638 <vTaskSwitchContext+0x24>
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4a13      	ldr	r2, [pc, #76]	; (80096c8 <vTaskSwitchContext+0xb4>)
 800967a:	4413      	add	r3, r2
 800967c:	60bb      	str	r3, [r7, #8]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	605a      	str	r2, [r3, #4]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	3308      	adds	r3, #8
 8009690:	429a      	cmp	r2, r3
 8009692:	d104      	bne.n	800969e <vTaskSwitchContext+0x8a>
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	605a      	str	r2, [r3, #4]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	4a09      	ldr	r2, [pc, #36]	; (80096cc <vTaskSwitchContext+0xb8>)
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	4a06      	ldr	r2, [pc, #24]	; (80096c4 <vTaskSwitchContext+0xb0>)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6013      	str	r3, [r2, #0]
}
 80096ae:	bf00      	nop
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	20000f04 	.word	0x20000f04
 80096c0:	20000ef0 	.word	0x20000ef0
 80096c4:	20000ee4 	.word	0x20000ee4
 80096c8:	20000a0c 	.word	0x20000a0c
 80096cc:	20000a08 	.word	0x20000a08

080096d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	60fb      	str	r3, [r7, #12]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096f6:	4b07      	ldr	r3, [pc, #28]	; (8009714 <vTaskPlaceOnEventList+0x44>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3318      	adds	r3, #24
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7fe fe87 	bl	8008412 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009704:	2101      	movs	r1, #1
 8009706:	6838      	ldr	r0, [r7, #0]
 8009708:	f000 fa7c 	bl	8009c04 <prvAddCurrentTaskToDelayedList>
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20000a08 	.word	0x20000a08

08009718 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	617b      	str	r3, [r7, #20]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009740:	4b0a      	ldr	r3, [pc, #40]	; (800976c <vTaskPlaceOnEventListRestricted+0x54>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3318      	adds	r3, #24
 8009746:	4619      	mov	r1, r3
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f7fe fe3e 	bl	80083ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009754:	f04f 33ff 	mov.w	r3, #4294967295
 8009758:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	68b8      	ldr	r0, [r7, #8]
 800975e:	f000 fa51 	bl	8009c04 <prvAddCurrentTaskToDelayedList>
	}
 8009762:	bf00      	nop
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000a08 	.word	0x20000a08

08009770 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60fb      	str	r3, [r7, #12]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	3318      	adds	r3, #24
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe fe6f 	bl	8008484 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a6:	4b1e      	ldr	r3, [pc, #120]	; (8009820 <xTaskRemoveFromEventList+0xb0>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d11d      	bne.n	80097ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	3304      	adds	r3, #4
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe fe66 	bl	8008484 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097bc:	4b19      	ldr	r3, [pc, #100]	; (8009824 <xTaskRemoveFromEventList+0xb4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d903      	bls.n	80097cc <xTaskRemoveFromEventList+0x5c>
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	4a16      	ldr	r2, [pc, #88]	; (8009824 <xTaskRemoveFromEventList+0xb4>)
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d0:	4613      	mov	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4413      	add	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4a13      	ldr	r2, [pc, #76]	; (8009828 <xTaskRemoveFromEventList+0xb8>)
 80097da:	441a      	add	r2, r3
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	3304      	adds	r3, #4
 80097e0:	4619      	mov	r1, r3
 80097e2:	4610      	mov	r0, r2
 80097e4:	f7fe fdf1 	bl	80083ca <vListInsertEnd>
 80097e8:	e005      	b.n	80097f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	3318      	adds	r3, #24
 80097ee:	4619      	mov	r1, r3
 80097f0:	480e      	ldr	r0, [pc, #56]	; (800982c <xTaskRemoveFromEventList+0xbc>)
 80097f2:	f7fe fdea 	bl	80083ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fa:	4b0d      	ldr	r3, [pc, #52]	; (8009830 <xTaskRemoveFromEventList+0xc0>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	429a      	cmp	r2, r3
 8009802:	d905      	bls.n	8009810 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009804:	2301      	movs	r3, #1
 8009806:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <xTaskRemoveFromEventList+0xc4>)
 800980a:	2201      	movs	r2, #1
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	e001      	b.n	8009814 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009814:	697b      	ldr	r3, [r7, #20]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000f04 	.word	0x20000f04
 8009824:	20000ee4 	.word	0x20000ee4
 8009828:	20000a0c 	.word	0x20000a0c
 800982c:	20000e9c 	.word	0x20000e9c
 8009830:	20000a08 	.word	0x20000a08
 8009834:	20000ef0 	.word	0x20000ef0

08009838 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009840:	4b06      	ldr	r3, [pc, #24]	; (800985c <vTaskInternalSetTimeOutState+0x24>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <vTaskInternalSetTimeOutState+0x28>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	605a      	str	r2, [r3, #4]
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	20000ef4 	.word	0x20000ef4
 8009860:	20000ee0 	.word	0x20000ee0

08009864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	613b      	str	r3, [r7, #16]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	60fb      	str	r3, [r7, #12]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80098a6:	f000 fe7d 	bl	800a5a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098aa:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <xTaskCheckForTimeOut+0xbc>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c2:	d102      	bne.n	80098ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61fb      	str	r3, [r7, #28]
 80098c8:	e023      	b.n	8009912 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b15      	ldr	r3, [pc, #84]	; (8009924 <xTaskCheckForTimeOut+0xc0>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d007      	beq.n	80098e6 <xTaskCheckForTimeOut+0x82>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d302      	bcc.n	80098e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098e0:	2301      	movs	r3, #1
 80098e2:	61fb      	str	r3, [r7, #28]
 80098e4:	e015      	b.n	8009912 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d20b      	bcs.n	8009908 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	1ad2      	subs	r2, r2, r3
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff ff9b 	bl	8009838 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009902:	2300      	movs	r3, #0
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	e004      	b.n	8009912 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800990e:	2301      	movs	r3, #1
 8009910:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009912:	f000 fe77 	bl	800a604 <vPortExitCritical>

	return xReturn;
 8009916:	69fb      	ldr	r3, [r7, #28]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3720      	adds	r7, #32
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	20000ee0 	.word	0x20000ee0
 8009924:	20000ef4 	.word	0x20000ef4

08009928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009928:	b480      	push	{r7}
 800992a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800992c:	4b03      	ldr	r3, [pc, #12]	; (800993c <vTaskMissedYield+0x14>)
 800992e:	2201      	movs	r2, #1
 8009930:	601a      	str	r2, [r3, #0]
}
 8009932:	bf00      	nop
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	20000ef0 	.word	0x20000ef0

08009940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009948:	f000 f852 	bl	80099f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800994c:	4b06      	ldr	r3, [pc, #24]	; (8009968 <prvIdleTask+0x28>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d9f9      	bls.n	8009948 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <prvIdleTask+0x2c>)
 8009956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009964:	e7f0      	b.n	8009948 <prvIdleTask+0x8>
 8009966:	bf00      	nop
 8009968:	20000a0c 	.word	0x20000a0c
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009976:	2300      	movs	r3, #0
 8009978:	607b      	str	r3, [r7, #4]
 800997a:	e00c      	b.n	8009996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4a12      	ldr	r2, [pc, #72]	; (80099d0 <prvInitialiseTaskLists+0x60>)
 8009988:	4413      	add	r3, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fcf0 	bl	8008370 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3301      	adds	r3, #1
 8009994:	607b      	str	r3, [r7, #4]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b37      	cmp	r3, #55	; 0x37
 800999a:	d9ef      	bls.n	800997c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800999c:	480d      	ldr	r0, [pc, #52]	; (80099d4 <prvInitialiseTaskLists+0x64>)
 800999e:	f7fe fce7 	bl	8008370 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099a2:	480d      	ldr	r0, [pc, #52]	; (80099d8 <prvInitialiseTaskLists+0x68>)
 80099a4:	f7fe fce4 	bl	8008370 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099a8:	480c      	ldr	r0, [pc, #48]	; (80099dc <prvInitialiseTaskLists+0x6c>)
 80099aa:	f7fe fce1 	bl	8008370 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099ae:	480c      	ldr	r0, [pc, #48]	; (80099e0 <prvInitialiseTaskLists+0x70>)
 80099b0:	f7fe fcde 	bl	8008370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099b4:	480b      	ldr	r0, [pc, #44]	; (80099e4 <prvInitialiseTaskLists+0x74>)
 80099b6:	f7fe fcdb 	bl	8008370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099ba:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <prvInitialiseTaskLists+0x78>)
 80099bc:	4a05      	ldr	r2, [pc, #20]	; (80099d4 <prvInitialiseTaskLists+0x64>)
 80099be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <prvInitialiseTaskLists+0x7c>)
 80099c2:	4a05      	ldr	r2, [pc, #20]	; (80099d8 <prvInitialiseTaskLists+0x68>)
 80099c4:	601a      	str	r2, [r3, #0]
}
 80099c6:	bf00      	nop
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000a0c 	.word	0x20000a0c
 80099d4:	20000e6c 	.word	0x20000e6c
 80099d8:	20000e80 	.word	0x20000e80
 80099dc:	20000e9c 	.word	0x20000e9c
 80099e0:	20000eb0 	.word	0x20000eb0
 80099e4:	20000ec8 	.word	0x20000ec8
 80099e8:	20000e94 	.word	0x20000e94
 80099ec:	20000e98 	.word	0x20000e98

080099f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099f6:	e019      	b.n	8009a2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099f8:	f000 fdd4 	bl	800a5a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099fc:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <prvCheckTasksWaitingTermination+0x50>)
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fd3b 	bl	8008484 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a0e:	4b0d      	ldr	r3, [pc, #52]	; (8009a44 <prvCheckTasksWaitingTermination+0x54>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	4a0b      	ldr	r2, [pc, #44]	; (8009a44 <prvCheckTasksWaitingTermination+0x54>)
 8009a16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <prvCheckTasksWaitingTermination+0x58>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	4a0a      	ldr	r2, [pc, #40]	; (8009a48 <prvCheckTasksWaitingTermination+0x58>)
 8009a20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a22:	f000 fdef 	bl	800a604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f810 	bl	8009a4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a2c:	4b06      	ldr	r3, [pc, #24]	; (8009a48 <prvCheckTasksWaitingTermination+0x58>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e1      	bne.n	80099f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20000eb0 	.word	0x20000eb0
 8009a44:	20000edc 	.word	0x20000edc
 8009a48:	20000ec4 	.word	0x20000ec4

08009a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d108      	bne.n	8009a70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 ff8c 	bl	800a980 <vPortFree>
				vPortFree( pxTCB );
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 ff89 	bl	800a980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a6e:	e018      	b.n	8009aa2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d103      	bne.n	8009a82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 ff80 	bl	800a980 <vPortFree>
	}
 8009a80:	e00f      	b.n	8009aa2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d00a      	beq.n	8009aa2 <prvDeleteTCB+0x56>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	60fb      	str	r3, [r7, #12]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <prvDeleteTCB+0x54>
	}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ab2:	4b0c      	ldr	r3, [pc, #48]	; (8009ae4 <prvResetNextTaskUnblockTime+0x38>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009abc:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <prvResetNextTaskUnblockTime+0x3c>)
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ac4:	e008      	b.n	8009ad8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac6:	4b07      	ldr	r3, [pc, #28]	; (8009ae4 <prvResetNextTaskUnblockTime+0x38>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4a04      	ldr	r2, [pc, #16]	; (8009ae8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ad6:	6013      	str	r3, [r2, #0]
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	20000e94 	.word	0x20000e94
 8009ae8:	20000efc 	.word	0x20000efc

08009aec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009af2:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <xTaskGetSchedulerState+0x34>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009afa:	2301      	movs	r3, #1
 8009afc:	607b      	str	r3, [r7, #4]
 8009afe:	e008      	b.n	8009b12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b00:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <xTaskGetSchedulerState+0x38>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d102      	bne.n	8009b0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b08:	2302      	movs	r3, #2
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	e001      	b.n	8009b12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b12:	687b      	ldr	r3, [r7, #4]
	}
 8009b14:	4618      	mov	r0, r3
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	20000ee8 	.word	0x20000ee8
 8009b24:	20000f04 	.word	0x20000f04

08009b28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d056      	beq.n	8009bec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b3e:	4b2e      	ldr	r3, [pc, #184]	; (8009bf8 <xTaskPriorityDisinherit+0xd0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d00a      	beq.n	8009b5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	60fb      	str	r3, [r7, #12]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10a      	bne.n	8009b7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	60bb      	str	r3, [r7, #8]
}
 8009b78:	bf00      	nop
 8009b7a:	e7fe      	b.n	8009b7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b80:	1e5a      	subs	r2, r3, #1
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d02c      	beq.n	8009bec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d128      	bne.n	8009bec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fe fc70 	bl	8008484 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbc:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <xTaskPriorityDisinherit+0xd4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d903      	bls.n	8009bcc <xTaskPriorityDisinherit+0xa4>
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	4a0c      	ldr	r2, [pc, #48]	; (8009bfc <xTaskPriorityDisinherit+0xd4>)
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4a09      	ldr	r2, [pc, #36]	; (8009c00 <xTaskPriorityDisinherit+0xd8>)
 8009bda:	441a      	add	r2, r3
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f7fe fbf1 	bl	80083ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009be8:	2301      	movs	r3, #1
 8009bea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bec:	697b      	ldr	r3, [r7, #20]
	}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000a08 	.word	0x20000a08
 8009bfc:	20000ee4 	.word	0x20000ee4
 8009c00:	20000a0c 	.word	0x20000a0c

08009c04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c0e:	4b21      	ldr	r3, [pc, #132]	; (8009c94 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c14:	4b20      	ldr	r3, [pc, #128]	; (8009c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe fc32 	bl	8008484 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c26:	d10a      	bne.n	8009c3e <prvAddCurrentTaskToDelayedList+0x3a>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d007      	beq.n	8009c3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c2e:	4b1a      	ldr	r3, [pc, #104]	; (8009c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4619      	mov	r1, r3
 8009c36:	4819      	ldr	r0, [pc, #100]	; (8009c9c <prvAddCurrentTaskToDelayedList+0x98>)
 8009c38:	f7fe fbc7 	bl	80083ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c3c:	e026      	b.n	8009c8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4413      	add	r3, r2
 8009c44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c46:	4b14      	ldr	r3, [pc, #80]	; (8009c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d209      	bcs.n	8009c6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c56:	4b12      	ldr	r3, [pc, #72]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f7fe fbd5 	bl	8008412 <vListInsert>
}
 8009c68:	e010      	b.n	8009c8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f7fe fbcb 	bl	8008412 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d202      	bcs.n	8009c8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c86:	4a08      	ldr	r2, [pc, #32]	; (8009ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	6013      	str	r3, [r2, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	20000ee0 	.word	0x20000ee0
 8009c98:	20000a08 	.word	0x20000a08
 8009c9c:	20000ec8 	.word	0x20000ec8
 8009ca0:	20000e98 	.word	0x20000e98
 8009ca4:	20000e94 	.word	0x20000e94
 8009ca8:	20000efc 	.word	0x20000efc

08009cac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08a      	sub	sp, #40	; 0x28
 8009cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009cb6:	f000 fb07 	bl	800a2c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009cba:	4b1c      	ldr	r3, [pc, #112]	; (8009d2c <xTimerCreateTimerTask+0x80>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d021      	beq.n	8009d06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009cca:	1d3a      	adds	r2, r7, #4
 8009ccc:	f107 0108 	add.w	r1, r7, #8
 8009cd0:	f107 030c 	add.w	r3, r7, #12
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe fb31 	bl	800833c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009cda:	6879      	ldr	r1, [r7, #4]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	9202      	str	r2, [sp, #8]
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	460a      	mov	r2, r1
 8009cec:	4910      	ldr	r1, [pc, #64]	; (8009d30 <xTimerCreateTimerTask+0x84>)
 8009cee:	4811      	ldr	r0, [pc, #68]	; (8009d34 <xTimerCreateTimerTask+0x88>)
 8009cf0:	f7ff f8de 	bl	8008eb0 <xTaskCreateStatic>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	4a10      	ldr	r2, [pc, #64]	; (8009d38 <xTimerCreateTimerTask+0x8c>)
 8009cf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009cfa:	4b0f      	ldr	r3, [pc, #60]	; (8009d38 <xTimerCreateTimerTask+0x8c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d02:	2301      	movs	r3, #1
 8009d04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	613b      	str	r3, [r7, #16]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d22:	697b      	ldr	r3, [r7, #20]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20000f38 	.word	0x20000f38
 8009d30:	0800b63c 	.word	0x0800b63c
 8009d34:	08009e71 	.word	0x08009e71
 8009d38:	20000f3c 	.word	0x20000f3c

08009d3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	; 0x28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	623b      	str	r3, [r7, #32]
}
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d6a:	4b1a      	ldr	r3, [pc, #104]	; (8009dd4 <xTimerGenericCommand+0x98>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d02a      	beq.n	8009dc8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2b05      	cmp	r3, #5
 8009d82:	dc18      	bgt.n	8009db6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d84:	f7ff feb2 	bl	8009aec <xTaskGetSchedulerState>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d109      	bne.n	8009da2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d8e:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <xTimerGenericCommand+0x98>)
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	f107 0110 	add.w	r1, r7, #16
 8009d96:	2300      	movs	r3, #0
 8009d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d9a:	f7fe fca1 	bl	80086e0 <xQueueGenericSend>
 8009d9e:	6278      	str	r0, [r7, #36]	; 0x24
 8009da0:	e012      	b.n	8009dc8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009da2:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <xTimerGenericCommand+0x98>)
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f107 0110 	add.w	r1, r7, #16
 8009daa:	2300      	movs	r3, #0
 8009dac:	2200      	movs	r2, #0
 8009dae:	f7fe fc97 	bl	80086e0 <xQueueGenericSend>
 8009db2:	6278      	str	r0, [r7, #36]	; 0x24
 8009db4:	e008      	b.n	8009dc8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009db6:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <xTimerGenericCommand+0x98>)
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	f107 0110 	add.w	r1, r7, #16
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	f7fe fd8b 	bl	80088dc <xQueueGenericSendFromISR>
 8009dc6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3728      	adds	r7, #40	; 0x28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20000f38 	.word	0x20000f38

08009dd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de2:	4b22      	ldr	r3, [pc, #136]	; (8009e6c <prvProcessExpiredTimer+0x94>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	3304      	adds	r3, #4
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe fb47 	bl	8008484 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d022      	beq.n	8009e4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	699a      	ldr	r2, [r3, #24]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	18d1      	adds	r1, r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	6978      	ldr	r0, [r7, #20]
 8009e12:	f000 f8d1 	bl	8009fb8 <prvInsertTimerInActiveList>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01f      	beq.n	8009e5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	2300      	movs	r3, #0
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	2100      	movs	r1, #0
 8009e26:	6978      	ldr	r0, [r7, #20]
 8009e28:	f7ff ff88 	bl	8009d3c <xTimerGenericCommand>
 8009e2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d113      	bne.n	8009e5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	60fb      	str	r3, [r7, #12]
}
 8009e46:	bf00      	nop
 8009e48:	e7fe      	b.n	8009e48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e50:	f023 0301 	bic.w	r3, r3, #1
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	6978      	ldr	r0, [r7, #20]
 8009e62:	4798      	blx	r3
}
 8009e64:	bf00      	nop
 8009e66:	3718      	adds	r7, #24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	20000f30 	.word	0x20000f30

08009e70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e78:	f107 0308 	add.w	r3, r7, #8
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 f857 	bl	8009f30 <prvGetNextExpireTime>
 8009e82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4619      	mov	r1, r3
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 f803 	bl	8009e94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e8e:	f000 f8d5 	bl	800a03c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e92:	e7f1      	b.n	8009e78 <prvTimerTask+0x8>

08009e94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e9e:	f7ff fa43 	bl	8009328 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 f866 	bl	8009f78 <prvSampleTimeNow>
 8009eac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d130      	bne.n	8009f16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10a      	bne.n	8009ed0 <prvProcessTimerOrBlockTask+0x3c>
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d806      	bhi.n	8009ed0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ec2:	f7ff fa3f 	bl	8009344 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff ff85 	bl	8009dd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ece:	e024      	b.n	8009f1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d008      	beq.n	8009ee8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ed6:	4b13      	ldr	r3, [pc, #76]	; (8009f24 <prvProcessTimerOrBlockTask+0x90>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <prvProcessTimerOrBlockTask+0x50>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e000      	b.n	8009ee6 <prvProcessTimerOrBlockTask+0x52>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ee8:	4b0f      	ldr	r3, [pc, #60]	; (8009f28 <prvProcessTimerOrBlockTask+0x94>)
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	f7fe ffa7 	bl	8008e48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009efa:	f7ff fa23 	bl	8009344 <xTaskResumeAll>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10a      	bne.n	8009f1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f04:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <prvProcessTimerOrBlockTask+0x98>)
 8009f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f0a:	601a      	str	r2, [r3, #0]
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	f3bf 8f6f 	isb	sy
}
 8009f14:	e001      	b.n	8009f1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f16:	f7ff fa15 	bl	8009344 <xTaskResumeAll>
}
 8009f1a:	bf00      	nop
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000f34 	.word	0x20000f34
 8009f28:	20000f38 	.word	0x20000f38
 8009f2c:	e000ed04 	.word	0xe000ed04

08009f30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f38:	4b0e      	ldr	r3, [pc, #56]	; (8009f74 <prvGetNextExpireTime+0x44>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <prvGetNextExpireTime+0x16>
 8009f42:	2201      	movs	r2, #1
 8009f44:	e000      	b.n	8009f48 <prvGetNextExpireTime+0x18>
 8009f46:	2200      	movs	r2, #0
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d105      	bne.n	8009f60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f54:	4b07      	ldr	r3, [pc, #28]	; (8009f74 <prvGetNextExpireTime+0x44>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	e001      	b.n	8009f64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f64:	68fb      	ldr	r3, [r7, #12]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	20000f30 	.word	0x20000f30

08009f78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f80:	f7ff fa7e 	bl	8009480 <xTaskGetTickCount>
 8009f84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f86:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <prvSampleTimeNow+0x3c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d205      	bcs.n	8009f9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f90:	f000 f936 	bl	800a200 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e002      	b.n	8009fa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009fa2:	4a04      	ldr	r2, [pc, #16]	; (8009fb4 <prvSampleTimeNow+0x3c>)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000f40 	.word	0x20000f40

08009fb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d812      	bhi.n	800a004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	1ad2      	subs	r2, r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d302      	bcc.n	8009ff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009fec:	2301      	movs	r3, #1
 8009fee:	617b      	str	r3, [r7, #20]
 8009ff0:	e01b      	b.n	800a02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ff2:	4b10      	ldr	r3, [pc, #64]	; (800a034 <prvInsertTimerInActiveList+0x7c>)
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f7fe fa08 	bl	8008412 <vListInsert>
 800a002:	e012      	b.n	800a02a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d206      	bcs.n	800a01a <prvInsertTimerInActiveList+0x62>
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d302      	bcc.n	800a01a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a014:	2301      	movs	r3, #1
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	e007      	b.n	800a02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a01a:	4b07      	ldr	r3, [pc, #28]	; (800a038 <prvInsertTimerInActiveList+0x80>)
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3304      	adds	r3, #4
 800a022:	4619      	mov	r1, r3
 800a024:	4610      	mov	r0, r2
 800a026:	f7fe f9f4 	bl	8008412 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a02a:	697b      	ldr	r3, [r7, #20]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	20000f34 	.word	0x20000f34
 800a038:	20000f30 	.word	0x20000f30

0800a03c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08e      	sub	sp, #56	; 0x38
 800a040:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a042:	e0ca      	b.n	800a1da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	da18      	bge.n	800a07c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a04a:	1d3b      	adds	r3, r7, #4
 800a04c:	3304      	adds	r3, #4
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10a      	bne.n	800a06c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	61fb      	str	r3, [r7, #28]
}
 800a068:	bf00      	nop
 800a06a:	e7fe      	b.n	800a06a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a072:	6850      	ldr	r0, [r2, #4]
 800a074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a076:	6892      	ldr	r2, [r2, #8]
 800a078:	4611      	mov	r1, r2
 800a07a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f2c0 80aa 	blt.w	800a1d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d004      	beq.n	800a09a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	3304      	adds	r3, #4
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe f9f5 	bl	8008484 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a09a:	463b      	mov	r3, r7
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7ff ff6b 	bl	8009f78 <prvSampleTimeNow>
 800a0a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b09      	cmp	r3, #9
 800a0a8:	f200 8097 	bhi.w	800a1da <prvProcessReceivedCommands+0x19e>
 800a0ac:	a201      	add	r2, pc, #4	; (adr r2, 800a0b4 <prvProcessReceivedCommands+0x78>)
 800a0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b2:	bf00      	nop
 800a0b4:	0800a0dd 	.word	0x0800a0dd
 800a0b8:	0800a0dd 	.word	0x0800a0dd
 800a0bc:	0800a0dd 	.word	0x0800a0dd
 800a0c0:	0800a151 	.word	0x0800a151
 800a0c4:	0800a165 	.word	0x0800a165
 800a0c8:	0800a1af 	.word	0x0800a1af
 800a0cc:	0800a0dd 	.word	0x0800a0dd
 800a0d0:	0800a0dd 	.word	0x0800a0dd
 800a0d4:	0800a151 	.word	0x0800a151
 800a0d8:	0800a165 	.word	0x0800a165
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	18d1      	adds	r1, r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0fc:	f7ff ff5c 	bl	8009fb8 <prvInsertTimerInActiveList>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d069      	beq.n	800a1da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a10c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d05e      	beq.n	800a1da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	441a      	add	r2, r3
 800a124:	2300      	movs	r3, #0
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	2300      	movs	r3, #0
 800a12a:	2100      	movs	r1, #0
 800a12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a12e:	f7ff fe05 	bl	8009d3c <xTimerGenericCommand>
 800a132:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d14f      	bne.n	800a1da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13e:	f383 8811 	msr	BASEPRI, r3
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	61bb      	str	r3, [r7, #24]
}
 800a14c:	bf00      	nop
 800a14e:	e7fe      	b.n	800a14e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a156:	f023 0301 	bic.w	r3, r3, #1
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a162:	e03a      	b.n	800a1da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a16a:	f043 0301 	orr.w	r3, r3, #1
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10a      	bne.n	800a19a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	617b      	str	r3, [r7, #20]
}
 800a196:	bf00      	nop
 800a198:	e7fe      	b.n	800a198 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	18d1      	adds	r1, r2, r3
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a8:	f7ff ff06 	bl	8009fb8 <prvInsertTimerInActiveList>
					break;
 800a1ac:	e015      	b.n	800a1da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d103      	bne.n	800a1c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1be:	f000 fbdf 	bl	800a980 <vPortFree>
 800a1c2:	e00a      	b.n	800a1da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ca:	f023 0301 	bic.w	r3, r3, #1
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1d6:	e000      	b.n	800a1da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a1d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1da:	4b08      	ldr	r3, [pc, #32]	; (800a1fc <prvProcessReceivedCommands+0x1c0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	1d39      	adds	r1, r7, #4
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fc16 	bl	8008a14 <xQueueReceive>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f47f af2a 	bne.w	800a044 <prvProcessReceivedCommands+0x8>
	}
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	3730      	adds	r7, #48	; 0x30
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000f38 	.word	0x20000f38

0800a200 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a206:	e048      	b.n	800a29a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a208:	4b2d      	ldr	r3, [pc, #180]	; (800a2c0 <prvSwitchTimerLists+0xc0>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a212:	4b2b      	ldr	r3, [pc, #172]	; (800a2c0 <prvSwitchTimerLists+0xc0>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3304      	adds	r3, #4
 800a220:	4618      	mov	r0, r3
 800a222:	f7fe f92f 	bl	8008484 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d02e      	beq.n	800a29a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	4413      	add	r3, r2
 800a244:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d90e      	bls.n	800a26c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a25a:	4b19      	ldr	r3, [pc, #100]	; (800a2c0 <prvSwitchTimerLists+0xc0>)
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3304      	adds	r3, #4
 800a262:	4619      	mov	r1, r3
 800a264:	4610      	mov	r0, r2
 800a266:	f7fe f8d4 	bl	8008412 <vListInsert>
 800a26a:	e016      	b.n	800a29a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a26c:	2300      	movs	r3, #0
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	2300      	movs	r3, #0
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	2100      	movs	r1, #0
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f7ff fd60 	bl	8009d3c <xTimerGenericCommand>
 800a27c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	603b      	str	r3, [r7, #0]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a29a:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <prvSwitchTimerLists+0xc0>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1b1      	bne.n	800a208 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2a4:	4b06      	ldr	r3, [pc, #24]	; (800a2c0 <prvSwitchTimerLists+0xc0>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2aa:	4b06      	ldr	r3, [pc, #24]	; (800a2c4 <prvSwitchTimerLists+0xc4>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a04      	ldr	r2, [pc, #16]	; (800a2c0 <prvSwitchTimerLists+0xc0>)
 800a2b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2b2:	4a04      	ldr	r2, [pc, #16]	; (800a2c4 <prvSwitchTimerLists+0xc4>)
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	6013      	str	r3, [r2, #0]
}
 800a2b8:	bf00      	nop
 800a2ba:	3718      	adds	r7, #24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20000f30 	.word	0x20000f30
 800a2c4:	20000f34 	.word	0x20000f34

0800a2c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2ce:	f000 f969 	bl	800a5a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <prvCheckForValidListAndQueue+0x60>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d120      	bne.n	800a31c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2da:	4814      	ldr	r0, [pc, #80]	; (800a32c <prvCheckForValidListAndQueue+0x64>)
 800a2dc:	f7fe f848 	bl	8008370 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2e0:	4813      	ldr	r0, [pc, #76]	; (800a330 <prvCheckForValidListAndQueue+0x68>)
 800a2e2:	f7fe f845 	bl	8008370 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2e6:	4b13      	ldr	r3, [pc, #76]	; (800a334 <prvCheckForValidListAndQueue+0x6c>)
 800a2e8:	4a10      	ldr	r2, [pc, #64]	; (800a32c <prvCheckForValidListAndQueue+0x64>)
 800a2ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2ec:	4b12      	ldr	r3, [pc, #72]	; (800a338 <prvCheckForValidListAndQueue+0x70>)
 800a2ee:	4a10      	ldr	r2, [pc, #64]	; (800a330 <prvCheckForValidListAndQueue+0x68>)
 800a2f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	4b11      	ldr	r3, [pc, #68]	; (800a33c <prvCheckForValidListAndQueue+0x74>)
 800a2f8:	4a11      	ldr	r2, [pc, #68]	; (800a340 <prvCheckForValidListAndQueue+0x78>)
 800a2fa:	2110      	movs	r1, #16
 800a2fc:	200a      	movs	r0, #10
 800a2fe:	f7fe f953 	bl	80085a8 <xQueueGenericCreateStatic>
 800a302:	4603      	mov	r3, r0
 800a304:	4a08      	ldr	r2, [pc, #32]	; (800a328 <prvCheckForValidListAndQueue+0x60>)
 800a306:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a308:	4b07      	ldr	r3, [pc, #28]	; (800a328 <prvCheckForValidListAndQueue+0x60>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d005      	beq.n	800a31c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <prvCheckForValidListAndQueue+0x60>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	490b      	ldr	r1, [pc, #44]	; (800a344 <prvCheckForValidListAndQueue+0x7c>)
 800a316:	4618      	mov	r0, r3
 800a318:	f7fe fd6c 	bl	8008df4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a31c:	f000 f972 	bl	800a604 <vPortExitCritical>
}
 800a320:	bf00      	nop
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20000f38 	.word	0x20000f38
 800a32c:	20000f08 	.word	0x20000f08
 800a330:	20000f1c 	.word	0x20000f1c
 800a334:	20000f30 	.word	0x20000f30
 800a338:	20000f34 	.word	0x20000f34
 800a33c:	20000fe4 	.word	0x20000fe4
 800a340:	20000f44 	.word	0x20000f44
 800a344:	0800b644 	.word	0x0800b644

0800a348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3b04      	subs	r3, #4
 800a358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3b04      	subs	r3, #4
 800a366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f023 0201 	bic.w	r2, r3, #1
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3b04      	subs	r3, #4
 800a376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a378:	4a0c      	ldr	r2, [pc, #48]	; (800a3ac <pxPortInitialiseStack+0x64>)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3b14      	subs	r3, #20
 800a382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3b04      	subs	r3, #4
 800a38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f06f 0202 	mvn.w	r2, #2
 800a396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3b20      	subs	r3, #32
 800a39c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a39e:	68fb      	ldr	r3, [r7, #12]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	0800a3b1 	.word	0x0800a3b1

0800a3b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3ba:	4b12      	ldr	r3, [pc, #72]	; (800a404 <prvTaskExitError+0x54>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c2:	d00a      	beq.n	800a3da <prvTaskExitError+0x2a>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	60fb      	str	r3, [r7, #12]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <prvTaskExitError+0x28>
	__asm volatile
 800a3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	60bb      	str	r3, [r7, #8]
}
 800a3ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3ee:	bf00      	nop
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0fc      	beq.n	800a3f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3f6:	bf00      	nop
 800a3f8:	bf00      	nop
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	20000098 	.word	0x20000098
	...

0800a410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a410:	4b07      	ldr	r3, [pc, #28]	; (800a430 <pxCurrentTCBConst2>)
 800a412:	6819      	ldr	r1, [r3, #0]
 800a414:	6808      	ldr	r0, [r1, #0]
 800a416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41a:	f380 8809 	msr	PSP, r0
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f04f 0000 	mov.w	r0, #0
 800a426:	f380 8811 	msr	BASEPRI, r0
 800a42a:	4770      	bx	lr
 800a42c:	f3af 8000 	nop.w

0800a430 <pxCurrentTCBConst2>:
 800a430:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop

0800a438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a438:	4808      	ldr	r0, [pc, #32]	; (800a45c <prvPortStartFirstTask+0x24>)
 800a43a:	6800      	ldr	r0, [r0, #0]
 800a43c:	6800      	ldr	r0, [r0, #0]
 800a43e:	f380 8808 	msr	MSP, r0
 800a442:	f04f 0000 	mov.w	r0, #0
 800a446:	f380 8814 	msr	CONTROL, r0
 800a44a:	b662      	cpsie	i
 800a44c:	b661      	cpsie	f
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	df00      	svc	0
 800a458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a45a:	bf00      	nop
 800a45c:	e000ed08 	.word	0xe000ed08

0800a460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a466:	4b46      	ldr	r3, [pc, #280]	; (800a580 <xPortStartScheduler+0x120>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a46      	ldr	r2, [pc, #280]	; (800a584 <xPortStartScheduler+0x124>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d10a      	bne.n	800a486 <xPortStartScheduler+0x26>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	613b      	str	r3, [r7, #16]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a486:	4b3e      	ldr	r3, [pc, #248]	; (800a580 <xPortStartScheduler+0x120>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a3f      	ldr	r2, [pc, #252]	; (800a588 <xPortStartScheduler+0x128>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d10a      	bne.n	800a4a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	60fb      	str	r3, [r7, #12]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4a6:	4b39      	ldr	r3, [pc, #228]	; (800a58c <xPortStartScheduler+0x12c>)
 800a4a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	22ff      	movs	r2, #255	; 0xff
 800a4b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	4b31      	ldr	r3, [pc, #196]	; (800a590 <xPortStartScheduler+0x130>)
 800a4cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4ce:	4b31      	ldr	r3, [pc, #196]	; (800a594 <xPortStartScheduler+0x134>)
 800a4d0:	2207      	movs	r2, #7
 800a4d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4d4:	e009      	b.n	800a4ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a4d6:	4b2f      	ldr	r3, [pc, #188]	; (800a594 <xPortStartScheduler+0x134>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	4a2d      	ldr	r2, [pc, #180]	; (800a594 <xPortStartScheduler+0x134>)
 800a4de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4e0:	78fb      	ldrb	r3, [r7, #3]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	005b      	lsls	r3, r3, #1
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4ea:	78fb      	ldrb	r3, [r7, #3]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f2:	2b80      	cmp	r3, #128	; 0x80
 800a4f4:	d0ef      	beq.n	800a4d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4f6:	4b27      	ldr	r3, [pc, #156]	; (800a594 <xPortStartScheduler+0x134>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f1c3 0307 	rsb	r3, r3, #7
 800a4fe:	2b04      	cmp	r3, #4
 800a500:	d00a      	beq.n	800a518 <xPortStartScheduler+0xb8>
	__asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	60bb      	str	r3, [r7, #8]
}
 800a514:	bf00      	nop
 800a516:	e7fe      	b.n	800a516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a518:	4b1e      	ldr	r3, [pc, #120]	; (800a594 <xPortStartScheduler+0x134>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	021b      	lsls	r3, r3, #8
 800a51e:	4a1d      	ldr	r2, [pc, #116]	; (800a594 <xPortStartScheduler+0x134>)
 800a520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a522:	4b1c      	ldr	r3, [pc, #112]	; (800a594 <xPortStartScheduler+0x134>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a52a:	4a1a      	ldr	r2, [pc, #104]	; (800a594 <xPortStartScheduler+0x134>)
 800a52c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	b2da      	uxtb	r2, r3
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a536:	4b18      	ldr	r3, [pc, #96]	; (800a598 <xPortStartScheduler+0x138>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a17      	ldr	r2, [pc, #92]	; (800a598 <xPortStartScheduler+0x138>)
 800a53c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a542:	4b15      	ldr	r3, [pc, #84]	; (800a598 <xPortStartScheduler+0x138>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a14      	ldr	r2, [pc, #80]	; (800a598 <xPortStartScheduler+0x138>)
 800a548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a54c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a54e:	f000 f8dd 	bl	800a70c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a552:	4b12      	ldr	r3, [pc, #72]	; (800a59c <xPortStartScheduler+0x13c>)
 800a554:	2200      	movs	r2, #0
 800a556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a558:	f000 f8fc 	bl	800a754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a55c:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <xPortStartScheduler+0x140>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a0f      	ldr	r2, [pc, #60]	; (800a5a0 <xPortStartScheduler+0x140>)
 800a562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a568:	f7ff ff66 	bl	800a438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a56c:	f7ff f852 	bl	8009614 <vTaskSwitchContext>
	prvTaskExitError();
 800a570:	f7ff ff1e 	bl	800a3b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	e000ed00 	.word	0xe000ed00
 800a584:	410fc271 	.word	0x410fc271
 800a588:	410fc270 	.word	0x410fc270
 800a58c:	e000e400 	.word	0xe000e400
 800a590:	20001034 	.word	0x20001034
 800a594:	20001038 	.word	0x20001038
 800a598:	e000ed20 	.word	0xe000ed20
 800a59c:	20000098 	.word	0x20000098
 800a5a0:	e000ef34 	.word	0xe000ef34

0800a5a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	607b      	str	r3, [r7, #4]
}
 800a5bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5be:	4b0f      	ldr	r3, [pc, #60]	; (800a5fc <vPortEnterCritical+0x58>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	4a0d      	ldr	r2, [pc, #52]	; (800a5fc <vPortEnterCritical+0x58>)
 800a5c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5c8:	4b0c      	ldr	r3, [pc, #48]	; (800a5fc <vPortEnterCritical+0x58>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d10f      	bne.n	800a5f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5d0:	4b0b      	ldr	r3, [pc, #44]	; (800a600 <vPortEnterCritical+0x5c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00a      	beq.n	800a5f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	603b      	str	r3, [r7, #0]
}
 800a5ec:	bf00      	nop
 800a5ee:	e7fe      	b.n	800a5ee <vPortEnterCritical+0x4a>
	}
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	20000098 	.word	0x20000098
 800a600:	e000ed04 	.word	0xe000ed04

0800a604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a60a:	4b12      	ldr	r3, [pc, #72]	; (800a654 <vPortExitCritical+0x50>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10a      	bne.n	800a628 <vPortExitCritical+0x24>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	607b      	str	r3, [r7, #4]
}
 800a624:	bf00      	nop
 800a626:	e7fe      	b.n	800a626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a628:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <vPortExitCritical+0x50>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	4a09      	ldr	r2, [pc, #36]	; (800a654 <vPortExitCritical+0x50>)
 800a630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a632:	4b08      	ldr	r3, [pc, #32]	; (800a654 <vPortExitCritical+0x50>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d105      	bne.n	800a646 <vPortExitCritical+0x42>
 800a63a:	2300      	movs	r3, #0
 800a63c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	f383 8811 	msr	BASEPRI, r3
}
 800a644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a646:	bf00      	nop
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	20000098 	.word	0x20000098
	...

0800a660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a660:	f3ef 8009 	mrs	r0, PSP
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <pxCurrentTCBConst>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	f01e 0f10 	tst.w	lr, #16
 800a670:	bf08      	it	eq
 800a672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67a:	6010      	str	r0, [r2, #0]
 800a67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a684:	f380 8811 	msr	BASEPRI, r0
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f7fe ffc0 	bl	8009614 <vTaskSwitchContext>
 800a694:	f04f 0000 	mov.w	r0, #0
 800a698:	f380 8811 	msr	BASEPRI, r0
 800a69c:	bc09      	pop	{r0, r3}
 800a69e:	6819      	ldr	r1, [r3, #0]
 800a6a0:	6808      	ldr	r0, [r1, #0]
 800a6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a6:	f01e 0f10 	tst.w	lr, #16
 800a6aa:	bf08      	it	eq
 800a6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6b0:	f380 8809 	msr	PSP, r0
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	f3af 8000 	nop.w

0800a6c0 <pxCurrentTCBConst>:
 800a6c0:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop

0800a6c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	607b      	str	r3, [r7, #4]
}
 800a6e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6e2:	f7fe fedd 	bl	80094a0 <xTaskIncrementTick>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6ec:	4b06      	ldr	r3, [pc, #24]	; (800a708 <xPortSysTickHandler+0x40>)
 800a6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f383 8811 	msr	BASEPRI, r3
}
 800a6fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	e000ed04 	.word	0xe000ed04

0800a70c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <vPortSetupTimerInterrupt+0x34>)
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a716:	4b0b      	ldr	r3, [pc, #44]	; (800a744 <vPortSetupTimerInterrupt+0x38>)
 800a718:	2200      	movs	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a71c:	4b0a      	ldr	r3, [pc, #40]	; (800a748 <vPortSetupTimerInterrupt+0x3c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a0a      	ldr	r2, [pc, #40]	; (800a74c <vPortSetupTimerInterrupt+0x40>)
 800a722:	fba2 2303 	umull	r2, r3, r2, r3
 800a726:	099b      	lsrs	r3, r3, #6
 800a728:	4a09      	ldr	r2, [pc, #36]	; (800a750 <vPortSetupTimerInterrupt+0x44>)
 800a72a:	3b01      	subs	r3, #1
 800a72c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a72e:	4b04      	ldr	r3, [pc, #16]	; (800a740 <vPortSetupTimerInterrupt+0x34>)
 800a730:	2207      	movs	r2, #7
 800a732:	601a      	str	r2, [r3, #0]
}
 800a734:	bf00      	nop
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	e000e010 	.word	0xe000e010
 800a744:	e000e018 	.word	0xe000e018
 800a748:	20000000 	.word	0x20000000
 800a74c:	10624dd3 	.word	0x10624dd3
 800a750:	e000e014 	.word	0xe000e014

0800a754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a764 <vPortEnableVFP+0x10>
 800a758:	6801      	ldr	r1, [r0, #0]
 800a75a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a75e:	6001      	str	r1, [r0, #0]
 800a760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a762:	bf00      	nop
 800a764:	e000ed88 	.word	0xe000ed88

0800a768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a76e:	f3ef 8305 	mrs	r3, IPSR
 800a772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b0f      	cmp	r3, #15
 800a778:	d914      	bls.n	800a7a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a77a:	4a17      	ldr	r2, [pc, #92]	; (800a7d8 <vPortValidateInterruptPriority+0x70>)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4413      	add	r3, r2
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a784:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <vPortValidateInterruptPriority+0x74>)
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	7afa      	ldrb	r2, [r7, #11]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d20a      	bcs.n	800a7a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	607b      	str	r3, [r7, #4]
}
 800a7a0:	bf00      	nop
 800a7a2:	e7fe      	b.n	800a7a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7a4:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <vPortValidateInterruptPriority+0x78>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a7ac:	4b0d      	ldr	r3, [pc, #52]	; (800a7e4 <vPortValidateInterruptPriority+0x7c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d90a      	bls.n	800a7ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	603b      	str	r3, [r7, #0]
}
 800a7c6:	bf00      	nop
 800a7c8:	e7fe      	b.n	800a7c8 <vPortValidateInterruptPriority+0x60>
	}
 800a7ca:	bf00      	nop
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	e000e3f0 	.word	0xe000e3f0
 800a7dc:	20001034 	.word	0x20001034
 800a7e0:	e000ed0c 	.word	0xe000ed0c
 800a7e4:	20001038 	.word	0x20001038

0800a7e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b08a      	sub	sp, #40	; 0x28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7f4:	f7fe fd98 	bl	8009328 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7f8:	4b5b      	ldr	r3, [pc, #364]	; (800a968 <pvPortMalloc+0x180>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a800:	f000 f920 	bl	800aa44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a804:	4b59      	ldr	r3, [pc, #356]	; (800a96c <pvPortMalloc+0x184>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4013      	ands	r3, r2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f040 8093 	bne.w	800a938 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01d      	beq.n	800a854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a818:	2208      	movs	r2, #8
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4413      	add	r3, r2
 800a81e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f003 0307 	and.w	r3, r3, #7
 800a826:	2b00      	cmp	r3, #0
 800a828:	d014      	beq.n	800a854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f023 0307 	bic.w	r3, r3, #7
 800a830:	3308      	adds	r3, #8
 800a832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f003 0307 	and.w	r3, r3, #7
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00a      	beq.n	800a854 <pvPortMalloc+0x6c>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	617b      	str	r3, [r7, #20]
}
 800a850:	bf00      	nop
 800a852:	e7fe      	b.n	800a852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d06e      	beq.n	800a938 <pvPortMalloc+0x150>
 800a85a:	4b45      	ldr	r3, [pc, #276]	; (800a970 <pvPortMalloc+0x188>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	d869      	bhi.n	800a938 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a864:	4b43      	ldr	r3, [pc, #268]	; (800a974 <pvPortMalloc+0x18c>)
 800a866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a868:	4b42      	ldr	r3, [pc, #264]	; (800a974 <pvPortMalloc+0x18c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a86e:	e004      	b.n	800a87a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	429a      	cmp	r2, r3
 800a882:	d903      	bls.n	800a88c <pvPortMalloc+0xa4>
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f1      	bne.n	800a870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a88c:	4b36      	ldr	r3, [pc, #216]	; (800a968 <pvPortMalloc+0x180>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a892:	429a      	cmp	r2, r3
 800a894:	d050      	beq.n	800a938 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2208      	movs	r2, #8
 800a89c:	4413      	add	r3, r2
 800a89e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	1ad2      	subs	r2, r2, r3
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d91f      	bls.n	800a8f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4413      	add	r3, r2
 800a8be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	f003 0307 	and.w	r3, r3, #7
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00a      	beq.n	800a8e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	613b      	str	r3, [r7, #16]
}
 800a8dc:	bf00      	nop
 800a8de:	e7fe      	b.n	800a8de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	1ad2      	subs	r2, r2, r3
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8f2:	69b8      	ldr	r0, [r7, #24]
 800a8f4:	f000 f908 	bl	800ab08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8f8:	4b1d      	ldr	r3, [pc, #116]	; (800a970 <pvPortMalloc+0x188>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	4a1b      	ldr	r2, [pc, #108]	; (800a970 <pvPortMalloc+0x188>)
 800a904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a906:	4b1a      	ldr	r3, [pc, #104]	; (800a970 <pvPortMalloc+0x188>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	4b1b      	ldr	r3, [pc, #108]	; (800a978 <pvPortMalloc+0x190>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d203      	bcs.n	800a91a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a912:	4b17      	ldr	r3, [pc, #92]	; (800a970 <pvPortMalloc+0x188>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a18      	ldr	r2, [pc, #96]	; (800a978 <pvPortMalloc+0x190>)
 800a918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	4b13      	ldr	r3, [pc, #76]	; (800a96c <pvPortMalloc+0x184>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	431a      	orrs	r2, r3
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a92e:	4b13      	ldr	r3, [pc, #76]	; (800a97c <pvPortMalloc+0x194>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3301      	adds	r3, #1
 800a934:	4a11      	ldr	r2, [pc, #68]	; (800a97c <pvPortMalloc+0x194>)
 800a936:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a938:	f7fe fd04 	bl	8009344 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	f003 0307 	and.w	r3, r3, #7
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <pvPortMalloc+0x174>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	60fb      	str	r3, [r7, #12]
}
 800a958:	bf00      	nop
 800a95a:	e7fe      	b.n	800a95a <pvPortMalloc+0x172>
	return pvReturn;
 800a95c:	69fb      	ldr	r3, [r7, #28]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3728      	adds	r7, #40	; 0x28
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20004c44 	.word	0x20004c44
 800a96c:	20004c58 	.word	0x20004c58
 800a970:	20004c48 	.word	0x20004c48
 800a974:	20004c3c 	.word	0x20004c3c
 800a978:	20004c4c 	.word	0x20004c4c
 800a97c:	20004c50 	.word	0x20004c50

0800a980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d04d      	beq.n	800aa2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a992:	2308      	movs	r3, #8
 800a994:	425b      	negs	r3, r3
 800a996:	697a      	ldr	r2, [r7, #20]
 800a998:	4413      	add	r3, r2
 800a99a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	4b24      	ldr	r3, [pc, #144]	; (800aa38 <vPortFree+0xb8>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10a      	bne.n	800a9c4 <vPortFree+0x44>
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	60fb      	str	r3, [r7, #12]
}
 800a9c0:	bf00      	nop
 800a9c2:	e7fe      	b.n	800a9c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00a      	beq.n	800a9e2 <vPortFree+0x62>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	60bb      	str	r3, [r7, #8]
}
 800a9de:	bf00      	nop
 800a9e0:	e7fe      	b.n	800a9e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	4b14      	ldr	r3, [pc, #80]	; (800aa38 <vPortFree+0xb8>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d01e      	beq.n	800aa2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d11a      	bne.n	800aa2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	4b0e      	ldr	r3, [pc, #56]	; (800aa38 <vPortFree+0xb8>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	43db      	mvns	r3, r3
 800aa02:	401a      	ands	r2, r3
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa08:	f7fe fc8e 	bl	8009328 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <vPortFree+0xbc>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4413      	add	r3, r2
 800aa16:	4a09      	ldr	r2, [pc, #36]	; (800aa3c <vPortFree+0xbc>)
 800aa18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa1a:	6938      	ldr	r0, [r7, #16]
 800aa1c:	f000 f874 	bl	800ab08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa20:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <vPortFree+0xc0>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	3301      	adds	r3, #1
 800aa26:	4a06      	ldr	r2, [pc, #24]	; (800aa40 <vPortFree+0xc0>)
 800aa28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa2a:	f7fe fc8b 	bl	8009344 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa2e:	bf00      	nop
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20004c58 	.word	0x20004c58
 800aa3c:	20004c48 	.word	0x20004c48
 800aa40:	20004c54 	.word	0x20004c54

0800aa44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aa4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa50:	4b27      	ldr	r3, [pc, #156]	; (800aaf0 <prvHeapInit+0xac>)
 800aa52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f003 0307 	and.w	r3, r3, #7
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00c      	beq.n	800aa78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3307      	adds	r3, #7
 800aa62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 0307 	bic.w	r3, r3, #7
 800aa6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	4a1f      	ldr	r2, [pc, #124]	; (800aaf0 <prvHeapInit+0xac>)
 800aa74:	4413      	add	r3, r2
 800aa76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa7c:	4a1d      	ldr	r2, [pc, #116]	; (800aaf4 <prvHeapInit+0xb0>)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa82:	4b1c      	ldr	r3, [pc, #112]	; (800aaf4 <prvHeapInit+0xb0>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa90:	2208      	movs	r2, #8
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1a9b      	subs	r3, r3, r2
 800aa96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 0307 	bic.w	r3, r3, #7
 800aa9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4a15      	ldr	r2, [pc, #84]	; (800aaf8 <prvHeapInit+0xb4>)
 800aaa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aaa6:	4b14      	ldr	r3, [pc, #80]	; (800aaf8 <prvHeapInit+0xb4>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aaae:	4b12      	ldr	r3, [pc, #72]	; (800aaf8 <prvHeapInit+0xb4>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2200      	movs	r2, #0
 800aab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	1ad2      	subs	r2, r2, r3
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aac4:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <prvHeapInit+0xb4>)
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	4a0a      	ldr	r2, [pc, #40]	; (800aafc <prvHeapInit+0xb8>)
 800aad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	4a09      	ldr	r2, [pc, #36]	; (800ab00 <prvHeapInit+0xbc>)
 800aada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aadc:	4b09      	ldr	r3, [pc, #36]	; (800ab04 <prvHeapInit+0xc0>)
 800aade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aae2:	601a      	str	r2, [r3, #0]
}
 800aae4:	bf00      	nop
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	2000103c 	.word	0x2000103c
 800aaf4:	20004c3c 	.word	0x20004c3c
 800aaf8:	20004c44 	.word	0x20004c44
 800aafc:	20004c4c 	.word	0x20004c4c
 800ab00:	20004c48 	.word	0x20004c48
 800ab04:	20004c58 	.word	0x20004c58

0800ab08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab10:	4b28      	ldr	r3, [pc, #160]	; (800abb4 <prvInsertBlockIntoFreeList+0xac>)
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	e002      	b.n	800ab1c <prvInsertBlockIntoFreeList+0x14>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d8f7      	bhi.n	800ab16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	4413      	add	r3, r2
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d108      	bne.n	800ab4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	441a      	add	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	441a      	add	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d118      	bne.n	800ab90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4b15      	ldr	r3, [pc, #84]	; (800abb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d00d      	beq.n	800ab86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	441a      	add	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	e008      	b.n	800ab98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab86:	4b0c      	ldr	r3, [pc, #48]	; (800abb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	e003      	b.n	800ab98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d002      	beq.n	800aba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aba6:	bf00      	nop
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	20004c3c 	.word	0x20004c3c
 800abb8:	20004c44 	.word	0x20004c44

0800abbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800abc0:	2200      	movs	r2, #0
 800abc2:	4912      	ldr	r1, [pc, #72]	; (800ac0c <MX_USB_DEVICE_Init+0x50>)
 800abc4:	4812      	ldr	r0, [pc, #72]	; (800ac10 <MX_USB_DEVICE_Init+0x54>)
 800abc6:	f7fb ff71 	bl	8006aac <USBD_Init>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d001      	beq.n	800abd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800abd0:	f7f5 ffbe 	bl	8000b50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800abd4:	490f      	ldr	r1, [pc, #60]	; (800ac14 <MX_USB_DEVICE_Init+0x58>)
 800abd6:	480e      	ldr	r0, [pc, #56]	; (800ac10 <MX_USB_DEVICE_Init+0x54>)
 800abd8:	f7fb ff98 	bl	8006b0c <USBD_RegisterClass>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800abe2:	f7f5 ffb5 	bl	8000b50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800abe6:	490c      	ldr	r1, [pc, #48]	; (800ac18 <MX_USB_DEVICE_Init+0x5c>)
 800abe8:	4809      	ldr	r0, [pc, #36]	; (800ac10 <MX_USB_DEVICE_Init+0x54>)
 800abea:	f7fb fecf 	bl	800698c <USBD_CDC_RegisterInterface>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800abf4:	f7f5 ffac 	bl	8000b50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800abf8:	4805      	ldr	r0, [pc, #20]	; (800ac10 <MX_USB_DEVICE_Init+0x54>)
 800abfa:	f7fb ffbd 	bl	8006b78 <USBD_Start>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ac04:	f7f5 ffa4 	bl	8000b50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac08:	bf00      	nop
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	200000b0 	.word	0x200000b0
 800ac10:	20004c5c 	.word	0x20004c5c
 800ac14:	20000018 	.word	0x20000018
 800ac18:	2000009c 	.word	0x2000009c

0800ac1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ac20:	2200      	movs	r2, #0
 800ac22:	4905      	ldr	r1, [pc, #20]	; (800ac38 <CDC_Init_FS+0x1c>)
 800ac24:	4805      	ldr	r0, [pc, #20]	; (800ac3c <CDC_Init_FS+0x20>)
 800ac26:	f7fb fecb 	bl	80069c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ac2a:	4905      	ldr	r1, [pc, #20]	; (800ac40 <CDC_Init_FS+0x24>)
 800ac2c:	4803      	ldr	r0, [pc, #12]	; (800ac3c <CDC_Init_FS+0x20>)
 800ac2e:	f7fb fee9 	bl	8006a04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ac32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	20005320 	.word	0x20005320
 800ac3c:	20004c5c 	.word	0x20004c5c
 800ac40:	20004f38 	.word	0x20004f38

0800ac44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ac44:	b480      	push	{r7}
 800ac46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ac48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	6039      	str	r1, [r7, #0]
 800ac5e:	71fb      	strb	r3, [r7, #7]
 800ac60:	4613      	mov	r3, r2
 800ac62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	2b23      	cmp	r3, #35	; 0x23
 800ac68:	d84a      	bhi.n	800ad00 <CDC_Control_FS+0xac>
 800ac6a:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <CDC_Control_FS+0x1c>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ad01 	.word	0x0800ad01
 800ac74:	0800ad01 	.word	0x0800ad01
 800ac78:	0800ad01 	.word	0x0800ad01
 800ac7c:	0800ad01 	.word	0x0800ad01
 800ac80:	0800ad01 	.word	0x0800ad01
 800ac84:	0800ad01 	.word	0x0800ad01
 800ac88:	0800ad01 	.word	0x0800ad01
 800ac8c:	0800ad01 	.word	0x0800ad01
 800ac90:	0800ad01 	.word	0x0800ad01
 800ac94:	0800ad01 	.word	0x0800ad01
 800ac98:	0800ad01 	.word	0x0800ad01
 800ac9c:	0800ad01 	.word	0x0800ad01
 800aca0:	0800ad01 	.word	0x0800ad01
 800aca4:	0800ad01 	.word	0x0800ad01
 800aca8:	0800ad01 	.word	0x0800ad01
 800acac:	0800ad01 	.word	0x0800ad01
 800acb0:	0800ad01 	.word	0x0800ad01
 800acb4:	0800ad01 	.word	0x0800ad01
 800acb8:	0800ad01 	.word	0x0800ad01
 800acbc:	0800ad01 	.word	0x0800ad01
 800acc0:	0800ad01 	.word	0x0800ad01
 800acc4:	0800ad01 	.word	0x0800ad01
 800acc8:	0800ad01 	.word	0x0800ad01
 800accc:	0800ad01 	.word	0x0800ad01
 800acd0:	0800ad01 	.word	0x0800ad01
 800acd4:	0800ad01 	.word	0x0800ad01
 800acd8:	0800ad01 	.word	0x0800ad01
 800acdc:	0800ad01 	.word	0x0800ad01
 800ace0:	0800ad01 	.word	0x0800ad01
 800ace4:	0800ad01 	.word	0x0800ad01
 800ace8:	0800ad01 	.word	0x0800ad01
 800acec:	0800ad01 	.word	0x0800ad01
 800acf0:	0800ad01 	.word	0x0800ad01
 800acf4:	0800ad01 	.word	0x0800ad01
 800acf8:	0800ad01 	.word	0x0800ad01
 800acfc:	0800ad01 	.word	0x0800ad01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad00:	bf00      	nop
  }

  return (USBD_OK);
 800ad02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4805      	ldr	r0, [pc, #20]	; (800ad34 <CDC_Receive_FS+0x24>)
 800ad1e:	f7fb fe71 	bl	8006a04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ad22:	4804      	ldr	r0, [pc, #16]	; (800ad34 <CDC_Receive_FS+0x24>)
 800ad24:	f7fb fe8c 	bl	8006a40 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ad28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20004c5c 	.word	0x20004c5c

0800ad38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	4613      	mov	r3, r2
 800ad44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ad4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	371c      	adds	r7, #28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
	...

0800ad5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	4603      	mov	r3, r0
 800ad64:	6039      	str	r1, [r7, #0]
 800ad66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	2212      	movs	r2, #18
 800ad6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ad6e:	4b03      	ldr	r3, [pc, #12]	; (800ad7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	200000cc 	.word	0x200000cc

0800ad80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	6039      	str	r1, [r7, #0]
 800ad8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2204      	movs	r2, #4
 800ad90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad92:	4b03      	ldr	r3, [pc, #12]	; (800ada0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	200000e0 	.word	0x200000e0

0800ada4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	4603      	mov	r3, r0
 800adac:	6039      	str	r1, [r7, #0]
 800adae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800adb0:	79fb      	ldrb	r3, [r7, #7]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d105      	bne.n	800adc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	4907      	ldr	r1, [pc, #28]	; (800add8 <USBD_FS_ProductStrDescriptor+0x34>)
 800adba:	4808      	ldr	r0, [pc, #32]	; (800addc <USBD_FS_ProductStrDescriptor+0x38>)
 800adbc:	f7fd f888 	bl	8007ed0 <USBD_GetString>
 800adc0:	e004      	b.n	800adcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	4904      	ldr	r1, [pc, #16]	; (800add8 <USBD_FS_ProductStrDescriptor+0x34>)
 800adc6:	4805      	ldr	r0, [pc, #20]	; (800addc <USBD_FS_ProductStrDescriptor+0x38>)
 800adc8:	f7fd f882 	bl	8007ed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800adcc:	4b02      	ldr	r3, [pc, #8]	; (800add8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20005708 	.word	0x20005708
 800addc:	0800b64c 	.word	0x0800b64c

0800ade0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	6039      	str	r1, [r7, #0]
 800adea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	4904      	ldr	r1, [pc, #16]	; (800ae00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800adf0:	4804      	ldr	r0, [pc, #16]	; (800ae04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800adf2:	f7fd f86d 	bl	8007ed0 <USBD_GetString>
  return USBD_StrDesc;
 800adf6:	4b02      	ldr	r3, [pc, #8]	; (800ae00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	20005708 	.word	0x20005708
 800ae04:	0800b664 	.word	0x0800b664

0800ae08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	4603      	mov	r3, r0
 800ae10:	6039      	str	r1, [r7, #0]
 800ae12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	221a      	movs	r2, #26
 800ae18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae1a:	f000 f843 	bl	800aea4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ae1e:	4b02      	ldr	r3, [pc, #8]	; (800ae28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	200000e4 	.word	0x200000e4

0800ae2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4603      	mov	r3, r0
 800ae34:	6039      	str	r1, [r7, #0]
 800ae36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ae38:	79fb      	ldrb	r3, [r7, #7]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d105      	bne.n	800ae4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	4907      	ldr	r1, [pc, #28]	; (800ae60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae42:	4808      	ldr	r0, [pc, #32]	; (800ae64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae44:	f7fd f844 	bl	8007ed0 <USBD_GetString>
 800ae48:	e004      	b.n	800ae54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	4904      	ldr	r1, [pc, #16]	; (800ae60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae4e:	4805      	ldr	r0, [pc, #20]	; (800ae64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae50:	f7fd f83e 	bl	8007ed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae54:	4b02      	ldr	r3, [pc, #8]	; (800ae60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20005708 	.word	0x20005708
 800ae64:	0800b678 	.word	0x0800b678

0800ae68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	6039      	str	r1, [r7, #0]
 800ae72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae74:	79fb      	ldrb	r3, [r7, #7]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d105      	bne.n	800ae86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	4907      	ldr	r1, [pc, #28]	; (800ae9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae7e:	4808      	ldr	r0, [pc, #32]	; (800aea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae80:	f7fd f826 	bl	8007ed0 <USBD_GetString>
 800ae84:	e004      	b.n	800ae90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	4904      	ldr	r1, [pc, #16]	; (800ae9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae8a:	4805      	ldr	r0, [pc, #20]	; (800aea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae8c:	f7fd f820 	bl	8007ed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae90:	4b02      	ldr	r3, [pc, #8]	; (800ae9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	20005708 	.word	0x20005708
 800aea0:	0800b684 	.word	0x0800b684

0800aea4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aeaa:	4b0f      	ldr	r3, [pc, #60]	; (800aee8 <Get_SerialNum+0x44>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aeb0:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <Get_SerialNum+0x48>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aeb6:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <Get_SerialNum+0x4c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4413      	add	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d009      	beq.n	800aede <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aeca:	2208      	movs	r2, #8
 800aecc:	4909      	ldr	r1, [pc, #36]	; (800aef4 <Get_SerialNum+0x50>)
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 f814 	bl	800aefc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aed4:	2204      	movs	r2, #4
 800aed6:	4908      	ldr	r1, [pc, #32]	; (800aef8 <Get_SerialNum+0x54>)
 800aed8:	68b8      	ldr	r0, [r7, #8]
 800aeda:	f000 f80f 	bl	800aefc <IntToUnicode>
  }
}
 800aede:	bf00      	nop
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	1fff7a10 	.word	0x1fff7a10
 800aeec:	1fff7a14 	.word	0x1fff7a14
 800aef0:	1fff7a18 	.word	0x1fff7a18
 800aef4:	200000e6 	.word	0x200000e6
 800aef8:	200000f6 	.word	0x200000f6

0800aefc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	4613      	mov	r3, r2
 800af08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800af0e:	2300      	movs	r3, #0
 800af10:	75fb      	strb	r3, [r7, #23]
 800af12:	e027      	b.n	800af64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	0f1b      	lsrs	r3, r3, #28
 800af18:	2b09      	cmp	r3, #9
 800af1a:	d80b      	bhi.n	800af34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	0f1b      	lsrs	r3, r3, #28
 800af20:	b2da      	uxtb	r2, r3
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	4619      	mov	r1, r3
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	440b      	add	r3, r1
 800af2c:	3230      	adds	r2, #48	; 0x30
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]
 800af32:	e00a      	b.n	800af4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	0f1b      	lsrs	r3, r3, #28
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	4619      	mov	r1, r3
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	440b      	add	r3, r1
 800af44:	3237      	adds	r2, #55	; 0x37
 800af46:	b2d2      	uxtb	r2, r2
 800af48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	011b      	lsls	r3, r3, #4
 800af4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800af50:	7dfb      	ldrb	r3, [r7, #23]
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	3301      	adds	r3, #1
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	4413      	add	r3, r2
 800af5a:	2200      	movs	r2, #0
 800af5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af5e:	7dfb      	ldrb	r3, [r7, #23]
 800af60:	3301      	adds	r3, #1
 800af62:	75fb      	strb	r3, [r7, #23]
 800af64:	7dfa      	ldrb	r2, [r7, #23]
 800af66:	79fb      	ldrb	r3, [r7, #7]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d3d3      	bcc.n	800af14 <IntToUnicode+0x18>
  }
}
 800af6c:	bf00      	nop
 800af6e:	bf00      	nop
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
	...

0800af7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08a      	sub	sp, #40	; 0x28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af84:	f107 0314 	add.w	r3, r7, #20
 800af88:	2200      	movs	r2, #0
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	605a      	str	r2, [r3, #4]
 800af8e:	609a      	str	r2, [r3, #8]
 800af90:	60da      	str	r2, [r3, #12]
 800af92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af9c:	d13a      	bne.n	800b014 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af9e:	2300      	movs	r3, #0
 800afa0:	613b      	str	r3, [r7, #16]
 800afa2:	4b1e      	ldr	r3, [pc, #120]	; (800b01c <HAL_PCD_MspInit+0xa0>)
 800afa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa6:	4a1d      	ldr	r2, [pc, #116]	; (800b01c <HAL_PCD_MspInit+0xa0>)
 800afa8:	f043 0301 	orr.w	r3, r3, #1
 800afac:	6313      	str	r3, [r2, #48]	; 0x30
 800afae:	4b1b      	ldr	r3, [pc, #108]	; (800b01c <HAL_PCD_MspInit+0xa0>)
 800afb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	613b      	str	r3, [r7, #16]
 800afb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800afba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800afbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afc0:	2302      	movs	r3, #2
 800afc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc4:	2300      	movs	r3, #0
 800afc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afc8:	2303      	movs	r3, #3
 800afca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800afcc:	230a      	movs	r3, #10
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afd0:	f107 0314 	add.w	r3, r7, #20
 800afd4:	4619      	mov	r1, r3
 800afd6:	4812      	ldr	r0, [pc, #72]	; (800b020 <HAL_PCD_MspInit+0xa4>)
 800afd8:	f7f6 fbb8 	bl	800174c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800afdc:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <HAL_PCD_MspInit+0xa0>)
 800afde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe0:	4a0e      	ldr	r2, [pc, #56]	; (800b01c <HAL_PCD_MspInit+0xa0>)
 800afe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe6:	6353      	str	r3, [r2, #52]	; 0x34
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	4b0b      	ldr	r3, [pc, #44]	; (800b01c <HAL_PCD_MspInit+0xa0>)
 800afee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff0:	4a0a      	ldr	r2, [pc, #40]	; (800b01c <HAL_PCD_MspInit+0xa0>)
 800aff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aff6:	6453      	str	r3, [r2, #68]	; 0x44
 800aff8:	4b08      	ldr	r3, [pc, #32]	; (800b01c <HAL_PCD_MspInit+0xa0>)
 800affa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800affc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b004:	2200      	movs	r2, #0
 800b006:	2105      	movs	r1, #5
 800b008:	2043      	movs	r0, #67	; 0x43
 800b00a:	f7f6 f88b 	bl	8001124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b00e:	2043      	movs	r0, #67	; 0x43
 800b010:	f7f6 f8a4 	bl	800115c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b014:	bf00      	nop
 800b016:	3728      	adds	r7, #40	; 0x28
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	40023800 	.word	0x40023800
 800b020:	40020000 	.word	0x40020000

0800b024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f7fb fde9 	bl	8006c12 <USBD_LL_SetupStage>
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b05a:	78fa      	ldrb	r2, [r7, #3]
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	4613      	mov	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	440b      	add	r3, r1
 800b068:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	78fb      	ldrb	r3, [r7, #3]
 800b070:	4619      	mov	r1, r3
 800b072:	f7fb fe23 	bl	8006cbc <USBD_LL_DataOutStage>
}
 800b076:	bf00      	nop
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	460b      	mov	r3, r1
 800b088:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b090:	78fa      	ldrb	r2, [r7, #3]
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	4613      	mov	r3, r2
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	334c      	adds	r3, #76	; 0x4c
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	78fb      	ldrb	r3, [r7, #3]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	f7fb febc 	bl	8006e22 <USBD_LL_DataInStage>
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fb fff0 	bl	80070a6 <USBD_LL_SOF>
}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d001      	beq.n	800b0e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b0e2:	f7f5 fd35 	bl	8000b50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0ec:	7bfa      	ldrb	r2, [r7, #15]
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fb ff9a 	bl	800702a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fb ff42 	bl	8006f86 <USBD_LL_Reset>
}
 800b102:	bf00      	nop
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fb ff95 	bl	800704a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	6812      	ldr	r2, [r2, #0]
 800b12e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b132:	f043 0301 	orr.w	r3, r3, #1
 800b136:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b140:	4b04      	ldr	r3, [pc, #16]	; (800b154 <HAL_PCD_SuspendCallback+0x48>)
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	4a03      	ldr	r2, [pc, #12]	; (800b154 <HAL_PCD_SuspendCallback+0x48>)
 800b146:	f043 0306 	orr.w	r3, r3, #6
 800b14a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b14c:	bf00      	nop
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	e000ed00 	.word	0xe000ed00

0800b158 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b166:	4618      	mov	r0, r3
 800b168:	f7fb ff85 	bl	8007076 <USBD_LL_Resume>
}
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b186:	78fa      	ldrb	r2, [r7, #3]
 800b188:	4611      	mov	r1, r2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fb ffdd 	bl	800714a <USBD_LL_IsoOUTIncomplete>
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1aa:	78fa      	ldrb	r2, [r7, #3]
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fb ff99 	bl	80070e6 <USBD_LL_IsoINIncomplete>
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fb ffef 	bl	80071ae <USBD_LL_DevConnected>
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fb ffec 	bl	80071c4 <USBD_LL_DevDisconnected>
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d13c      	bne.n	800b27e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b204:	4a20      	ldr	r2, [pc, #128]	; (800b288 <USBD_LL_Init+0x94>)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a1e      	ldr	r2, [pc, #120]	; (800b288 <USBD_LL_Init+0x94>)
 800b210:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b214:	4b1c      	ldr	r3, [pc, #112]	; (800b288 <USBD_LL_Init+0x94>)
 800b216:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b21a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b21c:	4b1a      	ldr	r3, [pc, #104]	; (800b288 <USBD_LL_Init+0x94>)
 800b21e:	2204      	movs	r2, #4
 800b220:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b222:	4b19      	ldr	r3, [pc, #100]	; (800b288 <USBD_LL_Init+0x94>)
 800b224:	2202      	movs	r2, #2
 800b226:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b228:	4b17      	ldr	r3, [pc, #92]	; (800b288 <USBD_LL_Init+0x94>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b22e:	4b16      	ldr	r3, [pc, #88]	; (800b288 <USBD_LL_Init+0x94>)
 800b230:	2202      	movs	r2, #2
 800b232:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b234:	4b14      	ldr	r3, [pc, #80]	; (800b288 <USBD_LL_Init+0x94>)
 800b236:	2200      	movs	r2, #0
 800b238:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b23a:	4b13      	ldr	r3, [pc, #76]	; (800b288 <USBD_LL_Init+0x94>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b240:	4b11      	ldr	r3, [pc, #68]	; (800b288 <USBD_LL_Init+0x94>)
 800b242:	2200      	movs	r2, #0
 800b244:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b246:	4b10      	ldr	r3, [pc, #64]	; (800b288 <USBD_LL_Init+0x94>)
 800b248:	2200      	movs	r2, #0
 800b24a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b24c:	4b0e      	ldr	r3, [pc, #56]	; (800b288 <USBD_LL_Init+0x94>)
 800b24e:	2200      	movs	r2, #0
 800b250:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b252:	480d      	ldr	r0, [pc, #52]	; (800b288 <USBD_LL_Init+0x94>)
 800b254:	f7f6 fc31 	bl	8001aba <HAL_PCD_Init>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b25e:	f7f5 fc77 	bl	8000b50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b262:	2180      	movs	r1, #128	; 0x80
 800b264:	4808      	ldr	r0, [pc, #32]	; (800b288 <USBD_LL_Init+0x94>)
 800b266:	f7f7 fe88 	bl	8002f7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b26a:	2240      	movs	r2, #64	; 0x40
 800b26c:	2100      	movs	r1, #0
 800b26e:	4806      	ldr	r0, [pc, #24]	; (800b288 <USBD_LL_Init+0x94>)
 800b270:	f7f7 fe3c 	bl	8002eec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b274:	2280      	movs	r2, #128	; 0x80
 800b276:	2101      	movs	r1, #1
 800b278:	4803      	ldr	r0, [pc, #12]	; (800b288 <USBD_LL_Init+0x94>)
 800b27a:	f7f7 fe37 	bl	8002eec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	20005908 	.word	0x20005908

0800b28c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7f6 fd26 	bl	8001cf4 <HAL_PCD_Start>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 f942 	bl	800b538 <USBD_Get_USB_Status>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	4608      	mov	r0, r1
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	70fb      	strb	r3, [r7, #3]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	70bb      	strb	r3, [r7, #2]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2ea:	78bb      	ldrb	r3, [r7, #2]
 800b2ec:	883a      	ldrh	r2, [r7, #0]
 800b2ee:	78f9      	ldrb	r1, [r7, #3]
 800b2f0:	f7f7 f9f7 	bl	80026e2 <HAL_PCD_EP_Open>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 f91c 	bl	800b538 <USBD_Get_USB_Status>
 800b300:	4603      	mov	r3, r0
 800b302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b304:	7bbb      	ldrb	r3, [r7, #14]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	460b      	mov	r3, r1
 800b318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b328:	78fa      	ldrb	r2, [r7, #3]
 800b32a:	4611      	mov	r1, r2
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7f7 fa40 	bl	80027b2 <HAL_PCD_EP_Close>
 800b332:	4603      	mov	r3, r0
 800b334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 f8fd 	bl	800b538 <USBD_Get_USB_Status>
 800b33e:	4603      	mov	r3, r0
 800b340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b342:	7bbb      	ldrb	r3, [r7, #14]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	460b      	mov	r3, r1
 800b356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	4611      	mov	r1, r2
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f7 fb18 	bl	80029a0 <HAL_PCD_EP_SetStall>
 800b370:	4603      	mov	r3, r0
 800b372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b374:	7bfb      	ldrb	r3, [r7, #15]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 f8de 	bl	800b538 <USBD_Get_USB_Status>
 800b37c:	4603      	mov	r3, r0
 800b37e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b380:	7bbb      	ldrb	r3, [r7, #14]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b084      	sub	sp, #16
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	460b      	mov	r3, r1
 800b394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3a4:	78fa      	ldrb	r2, [r7, #3]
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7f7 fb5d 	bl	8002a68 <HAL_PCD_EP_ClrStall>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 f8bf 	bl	800b538 <USBD_Get_USB_Status>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b3dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	da0b      	bge.n	800b3fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b3e4:	78fb      	ldrb	r3, [r7, #3]
 800b3e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3ea:	68f9      	ldr	r1, [r7, #12]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	00db      	lsls	r3, r3, #3
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	440b      	add	r3, r1
 800b3f6:	333e      	adds	r3, #62	; 0x3e
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	e00b      	b.n	800b414 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b3fc:	78fb      	ldrb	r3, [r7, #3]
 800b3fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b402:	68f9      	ldr	r1, [r7, #12]
 800b404:	4613      	mov	r3, r2
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	4413      	add	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	440b      	add	r3, r1
 800b40e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b412:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b43a:	78fa      	ldrb	r2, [r7, #3]
 800b43c:	4611      	mov	r1, r2
 800b43e:	4618      	mov	r0, r3
 800b440:	f7f7 f92a 	bl	8002698 <HAL_PCD_SetAddress>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 f874 	bl	800b538 <USBD_Get_USB_Status>
 800b450:	4603      	mov	r3, r0
 800b452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b454:	7bbb      	ldrb	r3, [r7, #14]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b086      	sub	sp, #24
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
 800b46a:	460b      	mov	r3, r1
 800b46c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b47c:	7af9      	ldrb	r1, [r7, #11]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	f7f7 fa43 	bl	800290c <HAL_PCD_EP_Transmit>
 800b486:	4603      	mov	r3, r0
 800b488:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 f853 	bl	800b538 <USBD_Get_USB_Status>
 800b492:	4603      	mov	r3, r0
 800b494:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b496:	7dbb      	ldrb	r3, [r7, #22]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	607a      	str	r2, [r7, #4]
 800b4aa:	603b      	str	r3, [r7, #0]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b4be:	7af9      	ldrb	r1, [r7, #11]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	f7f7 f9bf 	bl	8002846 <HAL_PCD_EP_Receive>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 f832 	bl	800b538 <USBD_Get_USB_Status>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3718      	adds	r7, #24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b082      	sub	sp, #8
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4f4:	78fa      	ldrb	r2, [r7, #3]
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f7 f9ef 	bl	80028dc <HAL_PCD_EP_GetRxCount>
 800b4fe:	4603      	mov	r3, r0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b510:	4b03      	ldr	r3, [pc, #12]	; (800b520 <USBD_static_malloc+0x18>)
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	20005e14 	.word	0x20005e14

0800b524 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]

}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b542:	2300      	movs	r3, #0
 800b544:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b546:	79fb      	ldrb	r3, [r7, #7]
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d817      	bhi.n	800b57c <USBD_Get_USB_Status+0x44>
 800b54c:	a201      	add	r2, pc, #4	; (adr r2, 800b554 <USBD_Get_USB_Status+0x1c>)
 800b54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b552:	bf00      	nop
 800b554:	0800b565 	.word	0x0800b565
 800b558:	0800b56b 	.word	0x0800b56b
 800b55c:	0800b571 	.word	0x0800b571
 800b560:	0800b577 	.word	0x0800b577
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	73fb      	strb	r3, [r7, #15]
    break;
 800b568:	e00b      	b.n	800b582 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b56a:	2303      	movs	r3, #3
 800b56c:	73fb      	strb	r3, [r7, #15]
    break;
 800b56e:	e008      	b.n	800b582 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b570:	2301      	movs	r3, #1
 800b572:	73fb      	strb	r3, [r7, #15]
    break;
 800b574:	e005      	b.n	800b582 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b576:	2303      	movs	r3, #3
 800b578:	73fb      	strb	r3, [r7, #15]
    break;
 800b57a:	e002      	b.n	800b582 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b57c:	2303      	movs	r3, #3
 800b57e:	73fb      	strb	r3, [r7, #15]
    break;
 800b580:	bf00      	nop
  }
  return usb_status;
 800b582:	7bfb      	ldrb	r3, [r7, #15]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <__libc_init_array>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	4d0d      	ldr	r5, [pc, #52]	; (800b5c8 <__libc_init_array+0x38>)
 800b594:	4c0d      	ldr	r4, [pc, #52]	; (800b5cc <__libc_init_array+0x3c>)
 800b596:	1b64      	subs	r4, r4, r5
 800b598:	10a4      	asrs	r4, r4, #2
 800b59a:	2600      	movs	r6, #0
 800b59c:	42a6      	cmp	r6, r4
 800b59e:	d109      	bne.n	800b5b4 <__libc_init_array+0x24>
 800b5a0:	4d0b      	ldr	r5, [pc, #44]	; (800b5d0 <__libc_init_array+0x40>)
 800b5a2:	4c0c      	ldr	r4, [pc, #48]	; (800b5d4 <__libc_init_array+0x44>)
 800b5a4:	f000 f82e 	bl	800b604 <_init>
 800b5a8:	1b64      	subs	r4, r4, r5
 800b5aa:	10a4      	asrs	r4, r4, #2
 800b5ac:	2600      	movs	r6, #0
 800b5ae:	42a6      	cmp	r6, r4
 800b5b0:	d105      	bne.n	800b5be <__libc_init_array+0x2e>
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b8:	4798      	blx	r3
 800b5ba:	3601      	adds	r6, #1
 800b5bc:	e7ee      	b.n	800b59c <__libc_init_array+0xc>
 800b5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c2:	4798      	blx	r3
 800b5c4:	3601      	adds	r6, #1
 800b5c6:	e7f2      	b.n	800b5ae <__libc_init_array+0x1e>
 800b5c8:	0800b704 	.word	0x0800b704
 800b5cc:	0800b704 	.word	0x0800b704
 800b5d0:	0800b704 	.word	0x0800b704
 800b5d4:	0800b708 	.word	0x0800b708

0800b5d8 <memcpy>:
 800b5d8:	440a      	add	r2, r1
 800b5da:	4291      	cmp	r1, r2
 800b5dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5e0:	d100      	bne.n	800b5e4 <memcpy+0xc>
 800b5e2:	4770      	bx	lr
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ee:	4291      	cmp	r1, r2
 800b5f0:	d1f9      	bne.n	800b5e6 <memcpy+0xe>
 800b5f2:	bd10      	pop	{r4, pc}

0800b5f4 <memset>:
 800b5f4:	4402      	add	r2, r0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d100      	bne.n	800b5fe <memset+0xa>
 800b5fc:	4770      	bx	lr
 800b5fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b602:	e7f9      	b.n	800b5f8 <memset+0x4>

0800b604 <_init>:
 800b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b606:	bf00      	nop
 800b608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b60a:	bc08      	pop	{r3}
 800b60c:	469e      	mov	lr, r3
 800b60e:	4770      	bx	lr

0800b610 <_fini>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	bf00      	nop
 800b614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b616:	bc08      	pop	{r3}
 800b618:	469e      	mov	lr, r3
 800b61a:	4770      	bx	lr
